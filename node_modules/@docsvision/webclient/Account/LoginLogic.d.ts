import { FormType, ILoginProvider } from "@docsvision/webclient/Account/";
import { ComponentLogic } from "@docsvision/web/core/component";
export declare const defaultNumberOfProviders = 1;
export declare class LoginLogic extends ComponentLogic {
    domain: 
import("effector").Domain;
    setUser: 
import("effector").Event<string>;
    $user: 
import("effector").Store<string>;
    $userAccount: 
import("effector").Store<string>;
    site: string;
    origin: string;
    returnUrl: string;
    onChangeUserName: 
import("effector").Event<string>;
    onChangePassword: 
import("effector").Event<string>;
    $userName: 
import("effector").Store<string>;
    $password: 
import("effector").Store<string>;
    $providers: 
import("effector").Store<ILoginProvider[]>;
    $userProviders: 
import("effector").Store<ILoginProvider[]>;
    setError: 
import("effector").Event<string>;
    $error: 
import("effector").Store<string>;
    setFormType: 
import("effector").Event<FormType>;
    $formType: 
import("effector").Store<FormType>;
    setLoading: 
import("effector").Event<boolean>;
    $formSubmitLoading: 
import("effector").Store<boolean>;
    $currentAuthenticationExtensionId: 
import("effector").Store<string>;
    $formDisabled: 
import("effector").Store<boolean>;
    $urlSearchParamUserName: 
import("effector").Store<string>;
    $providersUpdate: 
import("effector").Store<[ILoginProvider[], ILoginProvider[]]>;
    clickProviderButton: 
import("effector").Event<string>;
    $timeStartDownloadingProviders: 
import("effector").Store<number>;
    setTimeStartDownloadingProviders: 
import("effector").Event<number>;
    clearInputs: 
import("effector").Event<void>;
    $hasLicenseProblem: 
import("effector").Store<boolean>;
    constructor();
    submitForm: 
import("effector").Effect<unknown, any, Error>;
    getProviders: 
import("effector").Effect<unknown, {
        currentAuthenticationExtensionId: any;
        userAccount: any;
        userName: any;
        userAuthenticationExtensions: any[];
        authenticationExtensionModels: any[];
        hasLicenseProblem: boolean;
    }, Error>;
    followLinkToProvider: 
import("effector").Effect<string, void, Error>;
    getValidProviderLink: 
import("effector").Effect<ILoginProvider, string, Error>;
    handleContactClick: (e: MouseEvent) => void;
    getNumberOfProvidersFromStorage(): number;
    getProvidersList(): ILoginProvider[];
    init(): void;
}
