import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { ImageType } from '@docsvision/webclient/Platform/ImageType';
import { ScanInfo } from '@docsvision/webclient/Platform/RotateDirection';
import { CancelableApiEvent, BasicApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { IMainFileAddingArgs } from '@docsvision/webclient/BackOffice/IMainFileAddingArgs';
import { IMainFileAddedArgs } from '@docsvision/webclient/BackOffice/IMainFileAddedArgs';
import { IExtraFileAddingArgs } from '@docsvision/webclient/BackOffice/IExtraFileAddingArgs';
import { IExtraFileAddedArgs } from '@docsvision/webclient/BackOffice/IExtraFileAddedArgs';
export interface ScanDialogProps {
    operationName: string;
    isMain: boolean;
    mainFileAdding?: CancelableApiEvent<IMainFileAddingArgs>;
    extraFileAdding?: CancelableApiEvent<IExtraFileAddingArgs>;
    mainFileAdded?: BasicApiEvent<IMainFileAddedArgs>;
    extraFileAdded?: BasicApiEvent<IExtraFileAddedArgs>;
    onLoaded?: () => void;
}
export interface ScanDialogState {
    image: string;
    allScannedImages: string[];
    multipleMode: boolean;
    selectedScannerID: string;
    selectedResolutionID: string;
    selectedColorMode: ImageType;
    selectedFileType: GenModels.ScannedImageFormat;
    tabStop: boolean;
    currentPage: string;
    totalPages: string;
    fileName: string;
    scanProcessInfo: ScanInfo;
    wasPreview: boolean;
    wasScan: boolean;
    showFileNameWarning: boolean;
    scaleValue: number;
}
export interface IScanDialog {
    open(props: ScanDialogProps): Promise<void>;
    updateState(state: ScanDialogState): Promise<void>;
    close(): Promise<void>;
    readonly isOpen: boolean;
}
export declare type $ScanDialog = {
    scanDialog: IScanDialog;
};
export declare const $ScanDialog: string | ((model?: $ScanDialog) => IScanDialog);
