import { $LayoutController } from "@docsvision/webclient/Generated/DocsVision.WebClient.Controllers";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { Panel, PanelParams } from "@docsvision/webclient/Platform/Panel";
import { TabPageInfo } from "@docsvision/webclient/Platform/TabPageInfo";
import { IActiveTabChangeEventArgs } from "@docsvision/webclient/Platform/IActiveTabChangeEventArgs";
import { TabImpl, ITabState } from "@docsvision/webclient/Platform/TabImpl";
import { $DeviceType } from "@docsvision/webclient/StandardServices";
import { $Layout } from "@docsvision/webclient/System/$Layout";
import { $CardId, $EditOperationStore, $LayoutInfo } from "@docsvision/webclient/System/LayoutServices";
import { BasicApiEvent, CancelableApiEvent } from "@docsvision/webclient/System/ApiEvent";
import { IEventArgs } from '@docsvision/webclient/System/IEventArgs';
/**
 * Содержит публичные свойства элемента управления [Вкладки]{@link Tab}.
 */
export declare class TabParams extends PanelParams {
    /** Стандартный CSS класс со стилями элемента управления. */
    standardCssClass?: string;
    /** Должны ли быть вкладки основными вкладками в мобильной вёрстке. */
    mainTabOnMobile: boolean;
    /** Индекс вкладки по умолчанию. */
    defaultPageIndex: number;
    /** Страницы вкладок. */
    tabPages: TabPageInfo[];
    /** Активная вкладка. */
    activeTabPage: TabPageInfo;
    /** Событие, возникающее после переключения активной вкладки. */
    activeTabChange: BasicApiEvent<IActiveTabChangeEventArgs>;
    /** Событие, возникающее после переключения активной вкладки. */
    activeTabChanging: CancelableApiEvent<IActiveTabChangeEventArgs>;
    /** Событие, возникающее после завершения асинхронной подгрузки контролов. */
    allControlsLoaded: BasicApiEvent<IEventArgs>;
    services?: $LayoutController & $Layout & $CardId & $LayoutInfo & $EditOperationStore & $DeviceType;
}
/**
 * Класс элемента управления Вкладки
 *
 * Добавляет в web-разметку элемент управления для отображения вкладок.
 */
export declare class Tab extends Panel<TabParams, ITabState> {
    get activeTabs(): {
        [key: string]: number;
    };
    /** @internal */
    protected createParams(): TabParams;
    private get tabImpl();
    /** @internal */
    protected set childrenHandler(children: GenModels.ControlModel[]);
    /** @internal */
    set activeTabPage(val: any);
    /**
     * Установка заголовка указанной вкладки
     * @param tab Вкладка
     * @param header Заголовок
     */
    setTabPageHeader(tab: TabPageInfo, header: string): void;
    /**
     * Загрузить содержимое указанной вкладки
     * @param tab Вкладка
     */
    loadTabPage(tab: TabPageInfo): Promise<void>;
    /**
     * Загрузить содержимое всех незагруженных вкладок
     */
    loadAllTabPages(): Promise<void>;
    /**
     * Открыть указанную вкладку
     * @param tabNumber Номер вкладки
     */
    openTabPage(tabNumber: number): Promise<unknown>;
    /** @internal */
    protected createImpl(): TabImpl;
}
