import { $StaffDirectoryItemsServices } from '@docsvision/webclient/BackOffice/StaffDirectoryItems';
import { $LayoutRowController, $LayoutStaffController, $SecurityController, $StaffDirectoryItemsController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { ModalHost } from '@docsvision/webclient/Helpers/ModalHost';
import { AccessInheritanceButtons } from '@docsvision/webclient/Platform/AccessInheritanceButtons';
import { showDisableInheritanceModeSelectDialog } from '@docsvision/webclient/Platform/DisableInheritanceModeSelectDialog';
import { ColumnWidthOptions } from '@docsvision/webclient/Platform/ColumnWidthOptions';
import { SecurityDescriptorDialogLogic } from '@docsvision/webclient/Platform/SecurityDescriptorDialogLogic';
import { $CurrentEmployeeId, $DeviceType } from '@docsvision/webclient/StandardServices';
import { $CardInfo, $EditOperationStore, $LayoutInfo } from '@docsvision/webclient/System/LayoutServices';
import { $LabelWidth } from '@docsvision/webclient/System/$LabelWidth';
import { $LayoutManager } from '@docsvision/webclient/System/$LayoutManager';
import { $LocalStorage } from '@docsvision/webclient/System/$LocalStorage';
import { $MessageBox } from '@docsvision/webclient/System/$MessageBox';
import { IComponentProps } from '@docsvision/web/core/component';
import React from 'react';

export declare type $SecurityDescriptorDialogServices = $SecurityController & $LocalStorage & $CurrentEmployeeId & $StaffDirectoryItemsServices & $MessageBox & $DeviceType;
export interface SecurityDescriptorDialogProps extends IComponentProps<SecurityDescriptorDialogLogic, SecurityDescriptorDialogView> {
    target: GenModels.SecurityTarget;
    canEdit?: boolean;
    isOpen: boolean;
    onClose: () => void;
    services: TSecurityDescriptorDialogPropsServices;
}
export declare type TSecurityDescriptorDialogPropsServices = $SecurityDescriptorDialogServices & $LayoutInfo & $EditOperationStore & $StaffDirectoryItemsController & $CardInfo & Partial<$LabelWidth> & Partial<$LocalStorage> & $LayoutStaffController & $LayoutRowController & $LayoutManager;
export declare class SecurityDescriptorDialogView {
    frame: (props: 
import("./components/SecurityDialogFrame").SecurityDialogFrameProps) => JSX.Element;
    table: (props: 
import("C:/Dev/WebCDev/Bin/TypeScriptDefinitions/Helpers/Table/TableHelper").ITableHelperProps) => JSX.Element;
    tableHead: (props: 
import("./components/AccessListTableHead").AccessListTableHeadProps) => JSX.Element;
    inheritanceButtons: typeof AccessInheritanceButtons;
    aclRow: (props: 
import("./components/AccessListEntryRow").AccessListEntryRowProps) => JSX.Element;
    aclRowTrustee: (props: 
import("./components/AccessListEntryTrustee").AccessListEntryTrusteeProps) => JSX.Element;
    aclRowFlag: (props: 
import("./components/AccessListEntryRowFlag").AccessListEntryRowFlagProps) => JSX.Element;
    aclRowRemove: (props: 
import("./components/AccessListEntryRowRemove").AccessListEntryRowRemoveProps) => JSX.Element;
    newAclRow: (props: 
import("./components/NewAccessListEntryRow").NewAccessListEntryRowProps) => JSX.Element;
    newAclTrusteeSelect: (props: 
import("./components/NewAccessListEntryTrusteeSelect").NewAccessListEntryTrusteeSelectProps) => JSX.Element;
    message: (props: 
import("./components/SecurityDialogMessage").SecurityDialogMessageProps) => JSX.Element;
    showDisableInheritanceModeSelectDialog: typeof showDisableInheritanceModeSelectDialog;
    showEnableInheritanceConfirmationDialog: (services: $MessageBox) => Promise<void>;
    headerText: string;
    inheritedRowMessage: string;
    noEditAccessMessage: string;
    noViewAccessMessage: string;
    columnWidth: ColumnWidthOptions;
    inheritanceModes: {
        flags: number;
        name: string;
    }[];
    getInheritanceTitle(title: string, mode: string): string;
}
export declare const SecurityDescriptorDialog: (props: SecurityDescriptorDialogProps) => JSX.Element;
export declare type ShowSecurityDescriptorDialogProps = Omit<SecurityDescriptorDialogProps, "onClose" | "isOpen">;
export declare function getSecurityDescriptorDialog(props: ShowSecurityDescriptorDialogProps): ModalHost;
export declare function showSecurityDescriptorDialog(props: ShowSecurityDescriptorDialogProps): ModalHost;
export declare function useSecurityDescriptorDialog(props: ShowSecurityDescriptorDialogProps): [ModalHost, React.Dispatch<React.SetStateAction<ModalHost>>];
