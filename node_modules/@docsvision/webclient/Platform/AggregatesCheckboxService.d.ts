import { $GridController } from "@docsvision/webclient/Generated/DocsVision.WebClient.Controllers";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { IAggregate, IAggregatesServiceOptions, IAggregatesState, ILoadItemsOptions, ISelectItemData } from "@docsvision/webclient/Platform/IAggregates";
import { $SidePanel } from "@docsvision/web/components/table/plugins/side-panel";
import { $TableData } from "@docsvision/web/components/table/plugins/table-data";
import { $Domain } from "@docsvision/web/core/state-management";
import { Store, Event, Effect } from "effector";
import { $FolderGrid } from "@docsvision/webclient/Platform/$FolderGrid";
import { IAggregatesCheckboxService } from "@docsvision/webclient/Platform/$AggregatesCheckbox";
import { $CurrentFolder } from "@docsvision/webclient/Platform/$CurrentFolder";
import { $LastSearchResponse } from "@docsvision/webclient/System/$LastSearchResponse";
import { $FolderDataLoading } from "@docsvision/webclient/Platform/$FolderDataLoading";
import { $WebFrameSearchPanel } from "@docsvision/webclient/Platform/$WebFrameSearchPanel";
import { $ApplicationSettings } from '@docsvision/webclient/StandardServices';
import { $EmployeeStatus } from "@docsvision/webclient/Platform/$EmployeeStatus";
export declare const AGGREGATES_TAB_ID = "AggregatesTab";
export declare type $AggregatesCheckboxServices = $Domain & $SidePanel & $TableData & $GridController & $FolderGrid & $CurrentFolder & $LastSearchResponse & $WebFrameSearchPanel & $FolderDataLoading & $ApplicationSettings & $EmployeeStatus;
export declare class AggregatesCheckboxService implements IAggregatesCheckboxService {
    private options;
    private services;
    $isAggregatesAvailable: Store<boolean>;
    $isAggregationUser: Store<boolean>;
    $aggregates: Store<IAggregate[]>;
    $lastAggregates: Store<IAggregate[]>;
    $selectedAggregateItems: Store<GenModels.GridAggregateValue[] | null>;
    $lastAppliedSelection: Store<GenModels.GridAggregateValue[] | null>;
    $aggregatesState: Store<IAggregatesState>;
    loadAggregateItemsFx: Effect<ILoadItemsOptions, IAggregate[]>;
    toggleAggregate: Event<IAggregate>;
    selectItemValue: Event<ISelectItemData>;
    setAggregatesAvailabe: Event<boolean>;
    setAggregationUser: Event<boolean>;
    setLoading: Event<boolean>;
    selectionApplied: Event<GenModels.GridAggregateValue[] | null>;
    toggleAll: Event<boolean>;
    clearAll: Event<void>;
    applySelection: Event<void>;
    loadAggregates: Event<ILoadItemsOptions>;
    $lastDataId: Store<string>;
    $reloadAggregatesOnChangeData: Store<boolean>;
    reloadTableFx: Effect<void, void>;
    saveSelectionFx: Effect<GenModels.GridAggregateValue[], void>;
    registerTab: Event<void>;
    constructor(options: IAggregatesServiceOptions, services: $AggregatesCheckboxServices);
    private getSelection;
    updateTableAndAggregates(selectedAggregates: GenModels.GridAggregateValue[], options?: ILoadItemsOptions): Promise<void>;
    getAggregates({ dropFilters, loadSelection }?: ILoadItemsOptions): Promise<IAggregate[]>;
    getAggregateFilterItems(aggregates: GenModels.GridAggregateValue[]): GenModels.AggregateFilterItem[];
    /** Apply selection from $selectedAggregateItems to aggregates model */
    private restoreSelection;
    prepareAggregates(aggregateModel: GenModels.GridAggregateModel[]): GenModels.GridAggregateModel[];
}
