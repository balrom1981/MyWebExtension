import { BaseControl, BaseControlParams } from '@docsvision/webclient/System/BaseControl';
import { BasicApiEvent, CancelableApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { SearchingResultsImpl, ISearchingResultsState } from '@docsvision/webclient/Platform/SearchingResultsImpl';
import { $CardsPresentationController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { $DeviceType, $ApplicationSettings } from '@docsvision/webclient/StandardServices';
import { LoadingState } from '@docsvision/webclient/System/LoadingState';
export declare class SearchingResultsParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления */
    standardCssClass?: string;
    /** Пользовательский CSS класс со стилями элемента управления */
    customCssClass?: string;
    /** Флаг видимости элемента управления */
    visibility?: boolean;
    /** Заголовок результата поиска */
    headerText?: string;
    stringText?: string;
    /** Модель запроса поиска */
    requestModel: GenModels.SearchRequestModel;
    /** Модель запроса поиска */
    presentationExtension: "Standard" | "Layout" | "Report" | string;
    /** Является ли описание карточек безопасной HTML разметкой. */
    htmlPresentation?: boolean;
    /** Карточки, подгруженные в результате поиска */
    cards: GenModels.DigestRow[];
    /** Описание карточек */
    cardsPresentation: GenModels.CardPresentation[];
    /** Карточки, выбранные пользователем */
    selectedCards?: GenModels.CardPresentation[];
    /** Доступен ли множественный выбор. */
    allowMultipleSelection?: boolean;
    /** Показывается ли индикатор загрузки. */
    loadingState?: LoadingState;
    /** Событие перед отправкой запроса поиска */
    searching?: CancelableApiEvent<GenModels.SearchPresentationRequestModel>;
    /** Событие после получения результата запроса поиска */
    searched?: BasicApiEvent<GenModels.CardPresentation[]>;
    /** Событие после изменения выделения */
    selectedCardsChanged?: BasicApiEvent<GenModels.CardPresentation[]>;
    services?: $CardsPresentationController & $DeviceType & $ApplicationSettings;
}
/**
 * Класс элемента управления Отображение организации сотрудника.
 */
export declare class SearchingResults extends BaseControl<SearchingResultsParams, ISearchingResultsState> {
    protected createParams(): SearchingResultsParams;
    protected createImpl(): SearchingResultsImpl;
    set cards(cards: GenModels.DigestRow[]);
    clearCardsSelection(): void;
    fillCardsSelection(): void;
    getCardSelection(): GenModels.CardPresentation[];
}
