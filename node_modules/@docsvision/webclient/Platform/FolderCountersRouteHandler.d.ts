/// <reference types="node" />
import { Grid } from "@docsvision/webclient/Legacy/Grid";
import { IFolderRouteData } from "@docsvision/webclient/Platform/IFolderRouteData";
import { $WebFrameContext } from '@docsvision/webclient/Platform/$WebFrameContext';
import { IRouteHandler } from "@docsvision/webclient/System/IRouteHandler";
import { RouteHandleResult } from "@docsvision/webclient/System/RouteHandleResult";
import { RouteType } from "@docsvision/webclient/System/RouteType";
import { $RealtimeCommunicationService } from "@docsvision/webclient/System/$RealtimeCommunicationService";
import { IRealTimeCommunicationMessage } from "@docsvision/webclient/System/IRealTimeCommunicationMessage";
/** @internal */
export declare class FolderCountersRouteHandler implements IRouteHandler<IFolderRouteData> {
    protected services: $RealtimeCommunicationService & $WebFrameContext;
    name: string;
    protected timer: any;
    protected grid: Grid;
    protected isNotifying: boolean;
    protected sessionSuspended: boolean;
    /** @deprecated Use {@link SessionExpiredHandler.SuspednedMessageType} */
    static get SuspendedMessageType(): string;
    constructor(services: $RealtimeCommunicationService & $WebFrameContext);
    mountRoute(data: IFolderRouteData, routeType: RouteType): Promise<RouteHandleResult>;
    unmountRoute(data: IFolderRouteData, routeType: RouteType): Promise<{}>;
    protected createTimer(gridModel: any, refreshTimeout: number): NodeJS.Timer;
    protected clearTimer(): void;
    protected onSessionAwokenOrCreated: () => void;
    protected onSessionSuspendedOrDisposed: () => void;
    protected onGridRefresh: () => void;
    protected onCountersChanged: (message: IRealTimeCommunicationMessage<any>) => void;
}
