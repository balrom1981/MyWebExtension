import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { FolderParams } from "@docsvision/webclient/Platform/Folder";
import { FolderContent } from "@docsvision/webclient/Platform/FolderContent";
import { BaseControlState } from "@docsvision/webclient/System/BaseControl";
import { BaseControlImpl } from "@docsvision/webclient/System/BaseControlImpl";
import { IDataChangedEventArgs } from "@docsvision/webclient/System/IDataChangedEventArgs";
import { IValidationParams } from "@docsvision/webclient/System/IValidationParams";
import { IValidationResult } from "@docsvision/webclient/System/IValidationResult";
import React from "react";
/** @internal */
export interface IFolderState extends FolderParams, BaseControlState {
    checkFolderForAvailable: (folderId: string) => Promise<GenModels.CheckResult>;
    validationMessage: string;
    maximized: boolean;
}
export interface FolderState extends IFolderState {
}
/** @internal */
export declare type FolderImplState = IFolderState;
/** @internal */
export declare class FolderImpl extends BaseControlImpl<FolderParams, IFolderState> {
    private folderContent;
    private folderModalHost;
    constructor(props: FolderParams, state: IFolderState);
    componentDidMount(): void;
    updateFolderContent(): void;
    private setFolderInTree;
    private onMaximize;
    onButtonClick(): Promise<void>;
    showModal(): React.ReactNode;
    closeWindow(): void;
    attachFolderContent: (el: FolderContent) => void;
    renderFolderTree(): JSX.Element;
    clear(): void;
    validate(params: IValidationParams): IValidationResult;
    protected handleDataChanged(eventArgs: IDataChangedEventArgs): void;
    protected onFolderKeyDown: (e: React.KeyboardEvent) => void;
    protected onFolderClearKeyDown: (e: React.KeyboardEvent) => void;
    protected renderValidationMessage(): JSX.Element;
    protected updateValidationMessage(): void;
    get value(): GenModels.FolderNode;
    set value(value: GenModels.FolderNode);
    changeFolder(newFolder: GenModels.FolderNode): void;
    protected onFolderSelected(): void;
    protected onFolderInTreeSelected(folder: GenModels.FolderNode): void;
    protected selectFolder(folderId: string): Promise<void>;
    protected getFolderInfo(folderId: string): Promise<GenModels.FolderNode>;
    protected renderLabel(): JSX.Element;
    protected renderValueInModalMode(): JSX.Element;
    protected renderClearButton(): JSX.Element;
    protected getCssClass(): string;
    renderControl(): JSX.Element;
}
