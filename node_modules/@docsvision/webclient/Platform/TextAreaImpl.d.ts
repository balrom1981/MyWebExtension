import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { IEditPopoverProps } from "@docsvision/webclient/Helpers/PopoverHelpers/EditPopover/IEditPopoverProps";
import { TextArea, TextAreaParams } from "@docsvision/webclient/Platform/TextArea";
import { TextControlBaseImpl, ITextControlBaseState } from "@docsvision/webclient/Platform/TextControlBaseImpl";
import { RequestHelper } from '@docsvision/webclient/System/RequestHelper';
import React from "react";
/** @internal */
export interface ITextAreaState extends TextAreaParams, ITextControlBaseState {
    asyncLoader: RequestHelper;
    valueIsMultiline: boolean;
}
export interface TextAreaState extends ITextAreaState {
}
/** @internal */
export declare type TextAreaImplState = ITextAreaState;
/** @internal */
export declare class TextAreaImpl extends TextControlBaseImpl<TextAreaParams, ITextAreaState> {
    private editInPlaceLoader;
    private popoverImageDisplay;
    private fontSize;
    constructor(props: TextAreaParams, state: ITextAreaState);
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected get useHTML(): boolean;
    private removeElements;
    protected init(): Promise<void>;
    protected loadAsync(bindingInfo: GenModels.SimpleBindingInfo): Promise<void>;
    setValue(value: string, redraw: boolean): void;
    protected onInputBlur(event: React.FocusEvent): void;
    private saveCard;
    private shouldSaveCardWithEditInPlaceValue;
    private isLayoutViewMode;
    private updateSizeAndPositions;
    /** Тоже что и {@link InputBasedControlParams.value} */
    set value(val: string);
    get value(): string;
    protected onValueClick(): void;
    protected valueIsMultiline(): boolean;
    renderPlaceholder(): JSX.Element;
    protected getCssClass(): string;
    protected renderInput(): JSX.Element;
    viewModeRender(): JSX.Element;
    editInPlaceModeRender(): JSX.Element;
    renderValueAsHtml(): JSX.Element;
    protected renderInto(props: TextAreaParams, container: HTMLElement): void;
    protected showEditPopover(popoverOptions?: IEditPopoverProps): Promise<TextArea>;
    protected getNumValueOfWidth(): number;
    protected attachInput(inputElem: any): void;
    protected attachEditInPlaceLoader: (elem: any) => void;
    protected initSummernote(): Promise<void>;
    private onDocumentMouseDown;
    checkImageClick: (we: JQuery.Event, event: MouseEvent) => void;
    onTextChange: (value: string) => void;
    protected onSummernoteImageUpload(files: FileList): void;
    renderControl(): {};
}
