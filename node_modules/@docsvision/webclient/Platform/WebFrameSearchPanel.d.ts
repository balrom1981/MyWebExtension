import { BaseControl, BaseControlParams, BaseControlState } from '@docsvision/webclient/System/BaseControl';
import { $Layout } from '@docsvision/webclient/System/$Layout';
import { ControlImpl } from '@docsvision/webclient/System/ControlImpl';
import React from 'react';
import { $ApplicationSettings, $FullTextSearchEnabled, $DeviceType, $LastSearchRequest, $IsIE } from '@docsvision/webclient/StandardServices';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { $CompanyLogo } from '@docsvision/webclient/Platform/$CompanyLogo';
import { SearchDropdown } from '@docsvision/webclient/Legacy/SearchDropdown';
import { $WebFrameContext } from '@docsvision/webclient/Platform/$WebFrameContext';
import { $Router } from '@docsvision/webclient/System/$Router';
import { $ExperimentalFeature } from '@docsvision/webclient/System/$ExperimentalFeature';
import { $LastSearchResponse } from '@docsvision/webclient/System/$LastSearchResponse';
import { $WebFrameSearchPanel } from '@docsvision/webclient/Platform/$WebFrameSearchPanel';
import { $Resources } from '@docsvision/web/core/localization/$Resources';
import { $FolderInfo } from '@docsvision/webclient/Platform/$FolderInfo';
export declare class WebFrameSearchPanelParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления */
    standardCssClass?: string;
    /** Показывает закрыта ли поисковая строка */
    isNotOpened?: boolean;
    /** Показывает установлен ли фокус в инпуте */
    isInputFocused?: boolean;
    /** Скрыта ли кнопка поиска */
    isSearchButtonHidden?: boolean;
    /** Скрыта ли кнопка очистки поиска */
    isClearButtonHidden?: boolean;
    /** Скрыт ли плейсхолдер */
    isPlaceholderHidden?: boolean;
    services?: $Layout & $ApplicationSettings & $CompanyLogo & $FullTextSearchEnabled & $WebFrameContext & $DeviceType & $Router & $LastSearchRequest & $WebFrameSearchPanel & $ExperimentalFeature & $LastSearchResponse & $IsIE & $Resources & $WebFrameSearchPanel & $FolderInfo;
}
export interface IWebFrameSearchPanelState extends WebFrameSearchPanelParams, BaseControlState {
}
/** @internal */
export declare class WebFrameSearchPanel extends BaseControl<WebFrameSearchPanelParams, IWebFrameSearchPanelState> {
    private searchInput;
    private searchInputText;
    private searchPlaceholder;
    private dropdown;
    private searchText;
    private prevNavBarMode;
    private isMobile;
    shouldResetInstanceBeforeSearch: boolean;
    private placeholderText;
    /** @notest @internal */
    protected createParams(): WebFrameSearchPanelParams;
    /** @notest @internal  */
    protected createImpl(): ControlImpl;
    get IsDashboard(): boolean;
    get IsMobile(): boolean;
    get IsSearchResults(): boolean;
    get SearchContext(): GenModels.SearchContextOption;
    get IsSearchEveryWhere(): boolean;
    get SearchText(): string;
    get Dropdown(): SearchDropdown;
    get IsNotOpened(): boolean;
    get SearchTextInput(): HTMLInputElement;
    get SearchInput(): HTMLElement;
    get FullTextSearchEnabled(): boolean;
    get ShouldResetInstanceBeforeSearch(): boolean;
    private get control();
    componentDidMount(): void;
    hide: () => void;
    show: () => void;
    expand: () => void;
    collapse: () => void;
    onSearchAreaSelected: (oldVal: GenModels.SearchContextOption, newVal: GenModels.SearchContextOption) => void;
    reset: () => void;
    clear: () => void;
    search: (refresh?: boolean, clear?: boolean) => void;
    rebuild: () => void;
    buildSearchRequestParams: (searchText: string, refresh: boolean, clear?: boolean) => void;
    checkFullTextSearchAvailability: () => boolean;
    toggleSearchPanel: () => void;
    onExpanded: () => void;
    onClosed: () => void;
    updateCaption: () => void;
    clearSearch: (e: any) => void;
    updateSearchPlaceholderVisibility: () => void;
    toggleClearButton: () => void;
    clearTextInput: () => void;
    handleInputFocus: () => void;
    handleInputBlur: () => void;
    handleInput: (e: any) => void;
    updateSearchText: (value: string) => void;
    handleKeyPress: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    handleOnClickSearchButton: () => void;
    handleOnKeyUp: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    renderControl(): JSX.Element;
}
