import { BaseControl, BaseControlParams } from "@docsvision/webclient/System/BaseControl";
import { BasicApiEvent } from "@docsvision/webclient/System/ApiEvent";
import { ImageImpl, IImageState } from '@docsvision/webclient/Platform/ImageImpl';
import { IBindingResult } from '@docsvision/webclient/System/IBindingResult';
import { ICancelableEventArgs } from '@docsvision/webclient/System/ICancelableEventArgs';
import { IEventArgs } from '@docsvision/webclient/System/IEventArgs';
import { EditMode } from '@docsvision/webclient/System/EditMode';
import { IValidationParams } from "@docsvision/webclient/System/IValidationParams";
import { IValidationResult } from "@docsvision/webclient/System/IValidationResult";
export declare class ImageParams extends BaseControlParams {
    /** Стандартные css классы */
    standardCssClass?: string;
    /** Текст заполнителя */
    placeHolder?: string;
    /** Текст заполнителя при перетаскивании */
    dragDropPlaceholder?: string;
    /** Всплывающая подсказка */
    tip?: string;
    /** Высота изображения (в пикселях) */
    height?: number;
    /** Радиус скругления */
    borderRadius?: number;
    /** Источник данных */
    dataSource?: unknown;
    /** Поле данных */
    dataField?: unknown;
    /** Операция редактирования */
    editOperation?: string;
    /** Видимость */
    visibility?: boolean;
    /** Пользовательские css классы */
    customCssClasses?: string;
    /** Обязательное поле */
    required?: boolean;
    /** Загрузка разрешена */
    downloadAllowed?: boolean;
    /** Режим редактирования */
    editMode?: EditMode;
    /** Получение стандартного изображения */
    gettingDefaultImageFunction?: BasicApiEvent<IEventArgs>;
    /** Перед сбросом изображения */
    imageClearing?: BasicApiEvent<IEventArgs>;
    /** После сброса изображения */
    imageCleared?: BasicApiEvent<IEventArgs>;
}
export declare class Image extends BaseControl<ImageParams, IImageState> {
    constructor(props: ImageParams);
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected createParams(): ImageParams;
    protected createImpl(): ImageImpl;
    protected onCardSaving(sender: any, args: ICancelableEventArgs<unknown>): void;
    setImageValue(value: string): void;
    private get imageImpl();
    /** @inheritDoc */
    validate(params: IValidationParams): IValidationResult[];
    private set setBinding(value);
    getBindings(): IBindingResult<any>[];
}
