import { $LayoutFileApiController, $LayoutFileController, $LayoutLinksController, $R7OfficeController } from "@docsvision/webclient/Generated/DocsVision.WebClient.Controllers";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { $FileController } from "@docsvision/webclient/Legacy/FileController";
import { CommentFileImpl, ICommentFileState } from "@docsvision/webclient/Platform/CommentFileImpl";
import { BaseControl, BaseControlParams } from "@docsvision/webclient/System/BaseControl";
import { IDataChangedEventArgsEx } from "@docsvision/webclient/System/IDataChangedEventArgs";
import { $CardId, $CardInfo, $CardTimestamp, $EditOperationStore, $LayoutInfo } from "@docsvision/webclient/System/LayoutServices";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import { EditMode } from "@docsvision/webclient/System/EditMode";
import { BasicApiEvent, CancelableApiEvent } from "@docsvision/webclient/System/ApiEvent";
import { IEventArgs } from "@docsvision/webclient/System/IEventArgs";
import { IValidationResult } from "@docsvision/webclient/System/IValidationResult";
import { $MessageBox } from '@docsvision/webclient/System/$MessageBox';
import { $FilePreviewServices } from '@docsvision/webclient/Platform/FilePreview';
import { $LabelWidth } from '@docsvision/webclient/System/$LabelWidth';
import { Optional } from "@docsvision/web/core/services";
import { $ApplicationSettings, $SiteUrl } from '@docsvision/webclient/StandardServices';
import { $RealtimeCommunicationService } from "@docsvision/webclient/System/$RealtimeCommunicationService";
import { $WebServices } from "@docsvision/webclient/System/IWebServicesService";
/**
 * Публичные свойства для контрола {@link CommentFile}.
 */
export declare class CommentFileParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления. */
    standardCssClass?: string;
    /** Информация о текущей выбранной карточке. */
    value?: GenModels.CommonFileModel;
    /** Доступно редактирование значения или нет (согласно операции редактирования). */
    canEdit?: boolean;
    /** Обязатально ли необходимо ввести значение данного контрола. */
    required?: boolean;
    /** Текст метки */
    labelText?: string;
    /** Флаг, определяющий, что метка должна отображаться, когда значение элемента управления не задано: true - отображать, false - не отображать. */
    showEmptyLabel?: boolean;
    /** Всплывающая подсказка */
    tip?: string;
    /** Текст, которые будет показываться при отсутсвии файла. */
    placeHolder?: string;
    /** Проверка, доступно ли редактирование файла через WebDav. */
    webDavSupported?: boolean;
    /** Режим редактирования контрола - просмотр или просмотр и редактирование значения. */
    editMode?: EditMode;
    /** Открывать предпросмотр по щелчку по имени файла (true, по умолчанию), или в соответствующем пункте меню (false). */
    previewOnClick?: boolean;
    /** Событие, возникающее перед очисткой значения. */
    fileDeleting?: CancelableApiEvent<IEventArgs>;
    /** Событие, возникающее после очистки значения. */
    fileDeleted?: BasicApiEvent<IEventArgs>;
    /** Событие, возникающее перед открытием окна выбора файла */
    fileSelecting?: CancelableApiEvent<IEventArgs>;
    /** Событие, возникающее после открытия окна выбора файла, но до загрузки файла на сервер и установления значения контрола. */
    fileSelected?: CancelableApiEvent<File>;
    /** Событие, возникающее перед открытием файла через WebDav. */
    webDavOpening?: CancelableApiEvent<IEventArgs>;
    /** Событие возникающее при изменении значения элемента управления. */
    dataChanged?: BasicApiEvent<IDataChangedEventArgsEx<GenModels.CommonFileModel>>;
    /** Событие, возникающее перед открытием предпросмотра файла. */
    filePreviewOpening?: CancelableApiEvent<IEventArgs>;
    /** Событие, возникающее после открытия предпросмотра файла. */
    filePreviewOpened?: BasicApiEvent<IEventArgs>;
    /** Событие, возникающее перед скачиванием файла. */
    fileDownloading?: CancelableApiEvent<IEventArgs>;
    /** Событие возникает при сохранении файла в WebDAV. */
    fileSaveByWebDAV?: BasicApiEvent<IEventArgs>;
    services?: $FileController & $LayoutFileController & $LayoutFileApiController & $MessageBox & $LayoutLinksController & $CardInfo & $EditOperationStore & $LayoutInfo & $CardId & $FilePreviewServices & $WebServices & Optional<$LabelWidth> & $ApplicationSettings & $RealtimeCommunicationService & $R7OfficeController & $SiteUrl & $CardTimestamp;
}
/**
 * Представляет элемент управления для редактирования файла замечаний.
 */
export declare class CommentFile extends BaseControl<CommentFileParams, ICommentFileState> {
    /** Возвращает URL для скачивания файла. */
    getDownloadLink: () => void;
    /** Открывает предпросмотр файла */
    openFilePreview(): void;
    /** Удаляет файл и очищает значение контрола */
    removeFile(): void;
    /** Открывает системный диалог выбора файла. */
    openSelectFileDialog(): void;
    /** @internal */
    protected get checkWebDavSupported(): boolean;
    /** @internal */
    protected createParams(): CommentFileParams;
    /** @internal */
    protected createImpl(): CommentFileImpl;
    /** @inheritDoc */
    validate(params: unknown): IValidationResult[];
    /** @internal */
    private set binding(value);
    /** @internal */
    protected set value(newVal: GenModels.CommonFileModel);
    /** @internal */
    protected getBindings(): IBindingResult<any>[];
}
