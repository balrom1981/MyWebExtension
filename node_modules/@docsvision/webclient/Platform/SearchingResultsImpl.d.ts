/// <reference types="react" />
import { SearchingResultsParams } from '@docsvision/webclient/Platform/SearchingResults';
import { BaseControlState } from '@docsvision/webclient/System/BaseControl';
import { BaseControlImpl } from '@docsvision/webclient/System/BaseControlImpl';
import { LoadingState } from '@docsvision/webclient/System/LoadingState';
import { ReactListDynamic } from '@docsvision/webclient/Helpers/ReactList/ReactListDynamic';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
/** @internal */
export interface ISearchingResultsState extends SearchingResultsParams, BaseControlState {
    cardLoadingState: LoadingState;
}
export interface SearchingResultsState extends ISearchingResultsState {
}
/** @internal */
export declare type SearchingResultsImplState = ISearchingResultsState;
/** @internal */
export declare class SearchingResultsImpl extends BaseControlImpl<SearchingResultsParams, ISearchingResultsState> {
    reactList: ReactListDynamic;
    constructor(props: any, state: any);
    setCardsValue: (cards: GenModels.DigestRow[]) => Promise<void>;
    clearCardsSelection(): void;
    fillCardsSelection(): void;
    getCardsSelection(): GenModels.CardPresentation[];
    private scrollListToFirstItem;
    protected clearCacheCards: () => Promise<void>;
    initCacheCardsPresentation: () => Promise<void>;
    protected loadCardsPresentation: (indexes?: number[]) => Promise<void>;
    selectItem: (cardModel: GenModels.CardPresentation) => void;
    multiSelectItem: (cardModel: GenModels.CardPresentation) => void;
    protected renderItem: (key: number, data: unknown, index: number) => JSX.Element;
    protected renderLoadingItem: (index: number, key: number) => JSX.Element;
    renderControl(): JSX.Element;
}
