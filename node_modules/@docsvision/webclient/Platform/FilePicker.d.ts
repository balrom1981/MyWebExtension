import { $FilePickerController, $LayoutFileController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { $FileController } from '@docsvision/webclient/Legacy/FileController';
import { FilePickerImpl, IFilePickerState } from "@docsvision/webclient/Platform/FilePickerImpl";
import { IFilePicker } from '@docsvision/webclient/Platform/IFilePicker';
import { IFileCardVersionCommentAddArgs, IFileCardVersionCommentDeleteArgs, IFileCardVersionEventArgs } from '@docsvision/webclient/Platform/EventArgs';
import { IFilePickerValue } from '@docsvision/webclient/Platform/IFilePickerValue';
import { $FileDownload } from '@docsvision/webclient/Platform/$FileDownload';
import { $WindowLocation } from '@docsvision/webclient/Platform/$WindowLocation';
import { $FilePickerUpload } from '@docsvision/webclient/Platform/IFilePickerUploadService';
import { $DeviceType } from '@docsvision/webclient/StandardServices';
import { BaseControl, BaseControlParams } from "@docsvision/webclient/System/BaseControl";
import { IDataChangedEventArgsEx } from '@docsvision/webclient/System/IDataChangedEventArgs';
import { $CardId, $EditOperationStore, $LayoutInfo } from "@docsvision/webclient/System/LayoutServices";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import { EditMode } from '@docsvision/webclient/System/EditMode';
import { BasicApiEvent, CancelableApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { IEventArgs } from '@docsvision/webclient/System/IEventArgs';
import { IValidationParams } from '@docsvision/webclient/System/IValidationParams';
import { IValidationResult } from '@docsvision/webclient/System/IValidationResult';
import { $MessageBox } from '@docsvision/webclient/System/$MessageBox';
import { $Layout } from '@docsvision/webclient/System/$Layout';
import { $FilePreviewServices } from '@docsvision/webclient/Platform/FilePreview';
import { $RealtimeCommunicationService } from "@docsvision/webclient/System/$RealtimeCommunicationService";
import { LoadingState } from "@docsvision/webclient/System/LoadingState";
/**
 * Содержит публичные свойства элемента управления [Файл]{@link FilePicker}.
 */
export declare class FilePickerParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления */
    standardCssClass?: string;
    /** Доступно ли редактирование в контроле. @partly_covered */
    disabled?: boolean;
    /** Текст всплывающей подсказки. */
    tip?: string;
    /** Текст метки. */
    labelText?: string;
    /** Флаг отображения метки, когда значение элемента управления не задано: true - отображать, false - не отображать. */
    showEmptyLabel?: boolean;
    /** Текст об отсутсвии значения в режиме просмотра */
    emptyValueMessage?: string;
    /** Текст, который будет отображаться при незаданном значении @covered */
    placeHolder?: string;
    /** Флаг отображения отображения контекстного меню */
    showContextMenu?: boolean;
    /** Текст, который будет отображаться в области для перетаскивания файлов. */
    dragAndDropPlaceHolder?: string;
    /** Расширения файлов, доступные для добавления в контрол. */
    availableExtensions?: string[];
    /** Показывает доступность операции скачивания. @covered */
    canDownload?: boolean;
    /** Показывает доступность операции чтения. @partly_covered */
    canRead?: boolean;
    /** Показывает доступность операции редактирования. @partly_covered */
    canEdit?: boolean;
    /** Если true - то версия файла отображается рядом с именем, иначе - информация о версии не отображается. @covered */
    enableVersioning?: boolean;
    /** Получает или устанавливает текущее значение контрола. @covered */
    value?: IFilePickerValue;
    /** Хранит файл текущего значения контрола в формате base64. */
    fileString?: string;
    /** Состояние загрузки данных в контрол */
    loading?: LoadingState;
    /** Режим редактирования контрола. @partly_covered */
    editMode?: EditMode;
    /** Компактный режим без отступов. */
    compactMode?: boolean;
    /** Обзяателен ли ввод данного поля в карточке. @covered */
    required?: boolean;
    /** Событие возникает при выборе файла из файловой системы. @covered */
    fileSelected?: BasicApiEvent<IDataChangedEventArgsEx<IFilePickerValue>>;
    /** Событие возникает при успешном сохранении файла на сервере. @covered */
    fileUploaded?: BasicApiEvent<IDataChangedEventArgsEx<IFilePickerValue>>;
    /** Событие возникает при очищении значения файлового контрола. @covered */
    fileRemoved?: BasicApiEvent<IDataChangedEventArgsEx<IFilePickerValue>>;
    /**
     * Событие возникает при любом изменении значения параметра {@see value}.
     *
     * Событие может возникать по нескольку раз подряд на одно действие пользователя.
     * Для более точного контроля см. события {@see fileSelected}, {@see fileUploaded}, {@see fileRemoved}.
     *
     * @covered
     */
    dataChanged?: BasicApiEvent<IDataChangedEventArgsEx<IFilePickerValue>>;
    /** Событие возникает при открытии файла через WebDav. @covered */
    fileOpening?: CancelableApiEvent<IEventArgs>;
    /** Событие возникает после открытия файла через WebDav. @covered */
    fileOpened?: BasicApiEvent<IEventArgs>;
    /** Событие возникает при открытии окна предварительного просмотра файла. @covered */
    filePreviewing?: CancelableApiEvent<IEventArgs>;
    /** Событие возникает после открытия окна предварительного просмотра файла. @covered */
    filePreviewed?: BasicApiEvent<IEventArgs>;
    /** Событие возникает при открытии окна просмотра комментариев. @covered */
    fileVersionCommentsOpening?: CancelableApiEvent<IEventArgs>;
    /** Событие возникает после открытия окна просмотра комментариев. @covered */
    fileVersionCommentsOpened?: BasicApiEvent<IEventArgs>;
    /** Событие возникает при закрытии окна просмотра комментариев. */
    fileVersionCommentsClosing?: CancelableApiEvent<IEventArgs>;
    /** Событие возникает после закрытия окна просмотра комментариев. */
    fileVersionCommentsClosed?: BasicApiEvent<IEventArgs>;
    /** Событие возникает при добавлении комментария к версии файла. */
    fileVersionCommentAdding?: CancelableApiEvent<IFileCardVersionCommentAddArgs>;
    /** Событие возникает при удалении комментария к версии файла. */
    fileVersionCommentDeleting?: CancelableApiEvent<IFileCardVersionCommentDeleteArgs>;
    /** Событие возникает после добавления комментария к версии файла. */
    fileVersionCommentAdded?: BasicApiEvent<IFileCardVersionCommentAddArgs>;
    /** Событие возникает после удаления комментария к версии файла. */
    fileVersionCommentDeleted?: BasicApiEvent<IFileCardVersionCommentDeleteArgs>;
    /** Событие возникает после скачивания версии файла. @covered */
    fileVersionDownloaded?: BasicApiEvent<IFileCardVersionEventArgs>;
    /** Событие возникает при скачивании версии файла. @covered */
    fileVersionDownloading?: CancelableApiEvent<IFileCardVersionEventArgs>;
    /** Событие возникает при открытии окна просмотра версий. @covered */
    fileVersionsDialogOpening?: CancelableApiEvent<IEventArgs>;
    /** Событие возникает после открытия окна просмотра версий. @covered */
    fileVersionsDialogOpened?: BasicApiEvent<IEventArgs>;
    /** Событие возникает при закрытии окна просмотра версий. */
    fileVersionsDialogClosing?: CancelableApiEvent<IEventArgs>;
    /** Событие возникает после закрытия окна просмотра версий. */
    fileVersionsDialogClosed?: BasicApiEvent<IEventArgs>;
    /** Событие возникает после подгрузки информации о версиях файла. @covered */
    fileVersionsLoaded?: BasicApiEvent<IEventArgs>;
    /** Событие возникает при сохранении файла в WebDAV. */
    fileSaveByWebDAV?: BasicApiEvent<IEventArgs>;
    services?: $EditOperationStore & $FilePickerUpload & $MessageBox & $WindowLocation & $FileController & $LayoutFileController & $CardId & $FilePickerController & $DeviceType & $FileDownload & $Layout & $RealtimeCommunicationService & $FilePreviewServices & $LayoutInfo;
}
/**
 * Класс элемента управления Файл.
 *
 * Позволяет выбирать и прикреплять файл из файловой системы.
 */
export declare class FilePicker extends BaseControl<FilePickerParams, IFilePickerState> implements IFilePicker {
    protected createParams(): FilePickerParams;
    /** @internal @covered */
    get isFilePicker(): boolean;
    /** @covered */
    private set downloadOperation(value);
    /** @covered */
    private set readOperation(value);
    private set availableExtensions(value);
    /** @covered */
    private set binding(value);
    /** Получает или устанавливает текущее значение контрола. @covered */
    get value(): IFilePickerValue;
    set value(val: IFilePickerValue);
    /** @covered */
    hasValue(): boolean;
    /** @internal */
    protected createImpl(): FilePickerImpl;
    /** @internal @covered */
    onSaving(): Promise<void>;
    /** Открывает окно просмотра версий файла. @covered */
    openVersionsDialog(): void;
    /** Инициирует скачивание файла. @covered */
    download(): Promise<void>;
    /** Инициирует скачивание файла, контроллируемое через JavaScript. @covered */
    saveAs(): Promise<Blob>;
    /** Открывает предпросмотр файла. @covered */
    openPreview(): Promise<void>;
    /** Открывает диалог комментариев. @covered */
    showComments(): Promise<void>;
    /** Инициирует открытие файла через WebDav @covered */
    openWebDav(): Promise<void>;
    /** Очищает значение контрола. @covered */
    clear(): Promise<void>;
    private callMenuItem;
    /** @covered */
    validate(params: IValidationParams): IValidationResult[];
    /** Инициирует выполенение отложенной операцию загрузки файла на сервер. @covered */
    uploadSelected(): Promise<any>;
    /** @internal */
    protected getBindings(): IBindingResult<string>[];
}
