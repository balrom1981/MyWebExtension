import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { IColumnVisibility } from '@docsvision/webclient/Platform/UpdateValueCheckedColumn';
import { ISettingsPopupProps } from '@docsvision/webclient/Platform/SettingsPopup';
import { ComponentLogic } from '@docsvision/web/core/component';
export declare class SettingsPopupLogic extends ComponentLogic<ISettingsPopupProps> {
    domain: 
import("effector").Domain;
    $listViews: 
import("effector").Store<GenModels.FolderViewInfo[]>;
    $defaultView: 
import("effector").Store<GenModels.FolderViewInfo>;
    $itemsView: 
import("effector").Store<GenModels.Element[]>;
    selectItemView: 
import("effector").Event<string>;
    getViewListFx: 
import("effector").Effect<GenModels.FolderIdentityModel, GenModels.FolderViewInfosModel, Error>;
    $currentView: 
import("effector").Store<string>;
    $rowsMode: 
import("effector").Store<{
        value: string;
        key: string;
    }[]>;
    $currentRowsMode: 
import("effector").Store<GenModels.GridViewMode>;
    selectedRowsMode: 
import("effector").Event<string>;
    $rowsModeVisible: 
import("effector").Store<boolean>;
    setRowsModeVisible: 
import("effector").Event<boolean>;
    $columnsModeItems: 
import("effector").Store<{
        value: string;
        key: string;
    }[]>;
    $currentColumnWidthMode: 
import("effector").Store<GenModels.GridViewMode>;
    setColumnWidthMode: 
import("effector").Event<string>;
    $gridUserSettings: 
import("effector").Store<GenModels.GridUserSettingsData>;
    $columns: 
import("effector").Store<GenModels.ViewColumnModel[]>;
    $columnsOrder: 
import("effector").Store<string[]>;
    reorderColumns: 
import("effector").Event<GenModels.ViewColumnModel[]>;
    $columnsVisible: 
import("effector").Store<GenModels.ViewColumnModel[]>;
    updateCheckedColumn: 
import("effector").Event<IColumnVisibility>;
    $isHelp: 
import("effector").Store<boolean>;
    setIsHelp: 
import("effector").Event<boolean>;
    $isResetButton: 
import("effector").Store<boolean>;
    setIsRestButton: 
import("effector").Event<boolean>;
    getGridUserDataFx: 
import("effector").Effect<string, {
        settings: GenModels.GridUserSettingsData;
        filteredColumns: GenModels.ViewColumnModel[];
    }, Error>;
    saveGridUserSettingsFx: 
import("effector").Effect<void, void, Error>;
    resetSettingsFx: 
import("effector").Effect<void, void, Error>;
    $isLoadingSettings: 
import("effector").Store<boolean>;
    getHeader: () => string;
    init(): void;
}
