import { TextControlBaseParams } from "@docsvision/webclient/Platform/TextControlBase";
import { InputBasedControlImpl, InputBasedControlState } from "@docsvision/webclient/System/InputBasedControlImpl";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import React from 'react';
/** @internal */
export interface ITextControlBaseState extends TextControlBaseParams, InputBasedControlState<string> {
    binding: IBindingResult<string>;
}
export interface TextControlBaseState extends ITextControlBaseState {
}
export declare type TextControlBaseImplState = ITextControlBaseState;
export declare abstract class TextControlBaseImpl<PropsT extends TextControlBaseParams, StateT extends ITextControlBaseState> extends InputBasedControlImpl<string, PropsT, StateT> {
    constructor(props: PropsT, state: StateT);
    protected abstract renderInto(props: TextControlBaseParams, container: HTMLElement): void;
    protected onInputChange(event: any): void;
    protected renderInputWithPlaceholder(options?: {
        hideTooltip: boolean;
    }): React.ReactNode;
    /** @internal */
    protected set binding(binding: IBindingResult<string>);
    protected getTextValue(): string;
    protected getCssClass(): string;
}
