import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { IApprovalVisualizationProps, INodeArrows } from "@docsvision/webclient/Platform/ApprovalVisualization";
import { ComponentLogic } from "@docsvision/web/core/component";
import { ChangeEvent } from "react";
export declare class ApprovalVisualizationLogic extends ComponentLogic<IApprovalVisualizationProps> {
    domain: 
import("effector").Domain;
    nodes: vis.Node[];
    startConditionNodes: vis.Node[];
    edges: vis.Edge[];
    nodesWithConditions: vis.Node[];
    edgesWithConditions: vis.Edge[];
    firstLevel: any[];
    nodeArrows: INodeArrows;
    levelCount: number;
    $semanticsUsed: 
import("effector").Store<GenModels.DecisionSemantics[]>;
    addSemanticsUsed: 
import("effector").Event<GenModels.DecisionSemantics>;
    setVisContainer: 
import("effector").Event<HTMLDivElement>;
    $isStartNodesMount: 
import("effector").Store<boolean>;
    setIsStartNodesMount: 
import("effector").Event<ChangeEvent<HTMLInputElement>>;
    defaultData: vis.Node[];
    vis: vis.Network;
    makeEdges(): void;
    makeNodes(): void;
    makeLevels(level: any): void;
    addStartConditionNodes: () => void;
    getDataVis(startConditions?: boolean): {
        nodes: 
import("vis").Node[];
        edges: 
import("vis").Edge[];
    };
    init(): void;
}
