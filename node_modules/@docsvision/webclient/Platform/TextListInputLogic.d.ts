import { ITextListInputProps } from "@docsvision/webclient/Platform/TextListInput";
import { ComponentLogic } from "@docsvision/web/core/component";
import { ChangeEvent } from "react";
export interface IListItems {
    selected: boolean;
    value: string;
}
export declare class TextListInputLogic extends ComponentLogic<ITextListInputProps> {
    domain: 
import("effector").Domain;
    pageSize: number;
    pageNumber: number;
    scrollTop: number;
    searchText: string;
    isFullList: boolean;
    listWrapper: HTMLDivElement;
    filterValues: string[];
    $filterValues: 
import("effector").Store<string[]>;
    setFilterValues: 
import("effector").Event<string[]>;
    $listWrapper: 
import("effector").Store<HTMLDivElement>;
    setListWrapper: 
import("effector").Event<HTMLDivElement>;
    $listScrollable: 
import("effector").Store<boolean>;
    setListScrollable: 
import("effector").Event<boolean>;
    setSearchText: 
import("effector").Event<ChangeEvent<HTMLInputElement>>;
    $searchText: 
import("effector").Store<string>;
    $formatedSearchText: 
import("effector").Store<string>;
    setListItems: 
import("effector").Event<IListItems[]>;
    $listItems: 
import("effector").Store<IListItems[]>;
    $loading: 
import("effector").Store<boolean>;
    setLoading: 
import("effector").Event<boolean>;
    private getListData;
    private getGrouping;
    private format;
    private reloadListData;
    onClear: (e: any) => void;
    private clearDateString;
    private formatData;
    private onScrollTop;
    onScroll: (e: React.UIEvent<HTMLDivElement>) => void;
    onCheckboxChange: (e: React.ChangeEvent<HTMLInputElement>, key: number) => void;
    private onChangeItems;
    private formatItem;
    onVisible(): void;
    formatNumber(str: any): any;
    init(): void;
}
