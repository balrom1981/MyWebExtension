import { $FolderDataLoading } from "@docsvision/webclient/Platform/$FolderDataLoading";
import { IFolderGridService } from "@docsvision/webclient/Platform/$FolderGrid";
import { $Router } from "@docsvision/webclient/System/$Router";
import { IRow, IColumn, ITableData, ITableDataLoadRequest, TableCompositions } from "@docsvision/web/components/table/interfaces";
import { SortDirection } from "@docsvision/web/components/table/plugins/sort";
import { IFilterActiveColumn } from "@docsvision/web/components/table/plugins/filter";
import { IComposition } from "@docsvision/web/core/composition";
import { ILoadGroupingItemsOptions, IGrouping, IGroupingPathItem, $Grouping } from "@docsvision/web/components/table/plugins/grouping";
import { ICustomContextMenuBlock, ICustomContextMenuOption, IDataItemProvider, IParamsItemProvider } from "@docsvision/webclient/Platform/$ContextMenuOptions";
import { $CurrentFolder } from "@docsvision/webclient/Platform/$CurrentFolder";
import { Store, Event } from "effector";
import { $Domain } from "@docsvision/web/core/state-management";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { $SidePanel } from "@docsvision/web/components/table/plugins/side-panel";
import { $ListView } from "@docsvision/web/components/table/plugins/list-view";
import { $ApplicationSettings, $IsIE } from "@docsvision/webclient/StandardServices";
export declare class FolderGridService implements IFolderGridService {
    private services;
    $groupingReadonly: Store<boolean>;
    setGroupingReadonly: Event<boolean>;
    constructor(services: $FolderDataLoading & $Router & $CurrentFolder & $Domain & $ApplicationSettings & $IsIE);
    private _backgroundOpacity;
    get backgroundOpacity(): number;
    set backgroundOpacity(value: number);
    get isElasticSearch(): boolean;
    defaultTablePresentation: GenModels.TablePresentation;
    newGridAvailable: boolean;
    onRowClick: (row: IRow, services?: any, event?: MouseEvent) => void;
    onSortRequest: (column: IColumn, sortDirection: SortDirection) => Promise<void>;
    onFilterRequest: (filterColumns: IFilterActiveColumn[]) => Promise<void>;
    onLoadData: (data?: ITableData, options?: ITableDataLoadRequest) => Promise<void>;
    getRoute(context: TableCompositions.Cell): string;
    onLoadGrouping: (options: ILoadGroupingItemsOptions) => Promise<IGrouping>;
    onGroupingPathChanged(path: IGroupingPathItem[]): void;
    onChangeAggregateValue(items: GenModels.GridAggregateValue[]): Promise<void>;
    refreshPage(): void;
    getGroupingAvailable(): boolean;
    openPageInCurrentTab(context: TableCompositions.Cell): void;
    openPageInNewTab(context: TableCompositions.Cell): void;
    openPageInNewBrowserWindow(context: TableCompositions.Cell): void;
    filterByValue(context: TableCompositions.Cell): void;
    groupByColumn(context: TableCompositions.Cell<$Grouping & $SidePanel>): void;
    copyUrl(context: TableCompositions.Cell): void;
    copyText(context: TableCompositions.Cell): void;
    getContextMenuBlockNames: () => {
        gridOperation: string;
        textOperation: string;
        linkOperation: string;
    };
    getContextMenuBlocks: () => ICustomContextMenuBlock[];
    getHeaderRowContextMenuOptions: (params?: IParamsItemProvider<any, any>, context?: IComposition<any, any, TableCompositions.HeaderRow>) => ICustomContextMenuOption[];
    getCellContextMenuOptions: (params?: IParamsItemProvider<any, any>, context?: TableCompositions.Cell<$Grouping & $ListView>) => ICustomContextMenuOption[];
    getContextMenuItemProviders: (params?: IParamsItemProvider<any, any>) => IDataItemProvider[];
    onSearchRequest(): Promise<void>;
    onReloadWithNewSettings(): Promise<void>;
}
