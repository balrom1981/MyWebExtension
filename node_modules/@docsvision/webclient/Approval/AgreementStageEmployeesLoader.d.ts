import { $StaffDirectoryItemsController, GenControllers } from "@docsvision/webclient/Generated/DocsVision.WebClient.Controllers";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { RequestOptions } from "@docsvision/webclient/Legacy/Utils";
/** @internal */
export declare class AgreementStageEmployeesLoader implements GenControllers.IStaffDirectoryItemsController {
    private employeesToFilter;
    protected loaderServices: $StaffDirectoryItemsController;
    constructor(employeesToFilter: string[], services: $StaffDirectoryItemsController);
    takeGroupsAndSetGroups(request: GenModels.TakeAndSetGroupsRequest, options?: RequestOptions): Promise<GenModels.TakeAndSetGroupsResult>;
    moveUnit(model: GenModels.StaffDirectoryItemsMoveModel, options?: RequestOptions): Promise<any>;
    copyUnit(model: GenModels.StaffDirectoryItemsMoveModel, options?: RequestOptions): Promise<any>;
    moveGroup(model: GenModels.StaffDirectoryItemsMoveModel, options?: RequestOptions): Promise<any>;
    copyGroup(model: GenModels.StaffDirectoryItemsMoveModel, options?: RequestOptions): Promise<any>;
    moveEmployee(model: GenModels.EmployeeMoveModel, options?: RequestOptions): Promise<any>;
    loadStaffData(query: GenModels.StaffQuery, options?: RequestOptions): Promise<GenModels.StaffLoadResponse>;
    addToFavorites(query: GenModels.AddToFavoritesQuery, options?: RequestOptions): Promise<void>;
    checkAccountName(accountName: string, options?: RequestOptions): Promise<any>;
    getEmployeeGroups(employeeId: string, options?: RequestOptions): Promise<any>;
    setEmployeeGroups(employeeGroupsQuery: GenModels.SetEmployeeGroupsQuery, options?: RequestOptions): Promise<any>;
    removeEmployeeFromGroup(groupId: string, employeeId: string, options?: RequestOptions): Promise<void>;
    addToGroup(model: GenModels.AddToGroupRequestModel, options?: RequestOptions): Promise<void>;
    getUnitManagerForEmployee(employeeId: string, options?: RequestOptions): Promise<any>;
    getStaffData(requestModel: GenModels.EmployeeListRequestModel, options?: RequestOptions): Promise<any>;
    deleteEmployee(employeeId: string, options?: RequestOptions): Promise<any>;
    deleteUnit(unitId: string, options?: RequestOptions): Promise<any>;
    deleteGroup(groupId: string, options?: RequestOptions): Promise<any>;
}
