import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { ILayout } from "@docsvision/webclient/System/$Layout";
import { ShowLayoutParams } from "@docsvision/webclient/System/ShowLayoutParams";
import { ServiceContainer } from "@docsvision/web/core/services";
export interface ILayoutManager {
    showCard(model: GenModels.LayoutCardViewModel, name?: string, owner?: string, services?: ServiceContainer): Promise<ILayout>;
    showRow(model: GenModels.LayoutRowViewModel, name?: string, owner?: string, services?: ServiceContainer): Promise<ILayout>;
    showLayout(params: ShowLayoutParams): Promise<ILayout>;
    getLayout(name: string): ILayout | undefined;
    /**
     * Возвращает разметку по id экземпляра.
     * @internal
     */
    getLayoutById(id: string): ILayout | undefined;
    /**
     * Возвращает разметку по HTML элементу.
     * @internal
     */
    getLayoutByHtmlElement(element: HTMLElement): ILayout | undefined;
    getCurrentLayoutName(): string | undefined;
    getLayoutModel(name: string): GenModels.LayoutViewModel | GenModels.LayoutCardViewModel | GenModels.LayoutRowViewModel | undefined;
    destroy(name?: string): Promise<any>;
}
export declare type $LayoutManager = {
    layoutManager: ILayoutManager;
};
export declare const $LayoutManager: string | ((model?: $LayoutManager) => ILayoutManager);
