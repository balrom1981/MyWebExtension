import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { Event, Store } from 'effector';
export interface ILastSearchResponse {
    readonly $instanceId: Store<string>;
    readonly $searchText: Store<string>;
    readonly $searchContextOption: Store<GenModels.SearchContextOption>;
    readonly $lastSearchText: Store<string>;
    readonly $viewId: Store<string>;
    readonly $sortedColumn: Store<string>;
    readonly $isDescending: Store<boolean>;
    readonly $columns: Store<GenModels.GridUserSettingsColumn[]>;
    readonly $listColumns: Store<GenModels.GridUserSettingsColumn[]>;
    readonly $tablePresentation: Store<GenModels.TablePresentation>;
    setInstenceId: Event<string>;
    setSearchText: Event<string>;
    setSearchContextOption: Event<GenModels.SearchContextOption>;
    setViewId: Event<string>;
    setSortedColumn: Event<string>;
    setColumns: Event<GenModels.GridUserSettingsColumn[]>;
    setListColumns: Event<GenModels.GridUserSettingsColumn[]>;
    setIsDescending: Event<boolean>;
    setTablePresentation: Event<GenModels.TablePresentation>;
}
export declare type $LastSearchResponse = {
    lastSearchResponse: ILastSearchResponse;
};
export declare const $LastSearchResponse: string | ((model?: $LastSearchResponse) => ILastSearchResponse);
