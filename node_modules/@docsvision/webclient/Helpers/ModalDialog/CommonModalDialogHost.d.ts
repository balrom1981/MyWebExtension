import { $RootCssClass } from '@docsvision/webclient/Helpers/$RootCssClass';
import { $DialogManagement } from '@docsvision/webclient/Helpers/ModalDialog/$DialogManagement';
import { CommonModalDialogProps } from '@docsvision/webclient/Helpers/ModalDialog/CommonModalDialog';
import { $DeviceType } from '@docsvision/webclient/StandardServices';
import { Optional } from '@docsvision/web/core/services';
import React from 'react';
/** Вспомогательный класс для отрисовки {@link CommonModalDialog} в {@link ModalHost}. */
export declare class CommonModalDialogHost {
    dialogProps: Partial<CommonModalDialogProps> | (() => Partial<CommonModalDialogProps>);
    renderCallback: () => React.ReactNode;
    onAcceptCallback?: () => Promise<void>;
    onCancelCallback?: () => Promise<void>;
    private modalHost;
    private resolve;
    private reject;
    private _service;
    private contentDiv;
    private isCancelled;
    constructor(className: string, services: $DeviceType & Optional<$RootCssClass>, dialogProps?: Partial<CommonModalDialogProps> | (() => Partial<CommonModalDialogProps>), renderCallback?: () => React.ReactNode, onAcceptCallback?: () => Promise<void>, onCancelCallback?: () => Promise<void>);
    forceUpdate(callback?: Function): Promise<void>;
    isMounted(): boolean;
    get service(): $DialogManagement & $DeviceType;
    cancel: () => Promise<void>;
    accept: () => Promise<void>;
    showDialog(): Promise<unknown>;
    mount(): Promise<void>;
    fixateHeight(): void;
    unfixateHeight(): void;
    private render;
}
