/// <reference types="react" />
import { BaseControl } from '@docsvision/webclient/System/BaseControl';
import { ControlImpl } from '@docsvision/webclient/System/ControlImpl';
import { BaseControlImplState } from '@docsvision/webclient/System/BaseControlImpl';
import { SignatureButtonLogic } from '@docsvision/webclient/BackOffice/SignatureButtonLogic';
import { SignatureButtonParams } from '@docsvision/webclient/BackOffice/SignatureButtonOptions';
import { SignatureButtonView } from '@docsvision/webclient/BackOffice/SignatureButtonView';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { ISignatureLabel } from '@docsvision/webclient/Legacy/ISignatureLabel';
export interface SignatureButtonState extends BaseControlImplState, SignatureButtonParams {
    logic: SignatureButtonLogic;
    view: SignatureButtonView;
}
/**
 * Класс элемента управления SignatureButton.
 */
export declare class SignatureButton extends BaseControl<SignatureButtonParams, SignatureButtonState> {
    construct(): void;
    protected createParams(): SignatureButtonParams;
    protected createImpl(): ControlImpl;
    private set editOperationForSignatureMethods(value);
    private set signatureBinding(value);
    /** Открыть диалог подписания */
    openSignDialog(): void;
    /**
     * Выполнить подписание без открытия диалога.
     *
     * Если параметры не переданы, то используется метод по умолчанию без метки.
     *
     * Для получения доступных методов подписания и меток используйте {@link $SignatureController.getSignature}.
     */
    sign(method?: GenModels.SignatureMethod, label?: ISignatureLabel): Promise<void>;
    /** Открыть диалог журнала подписи. */
    openSignListDialog(): void;
    renderControl(): JSX.Element;
}
