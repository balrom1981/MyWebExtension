/// <reference types="react" />
import { DirectoryTabInfo } from "@docsvision/webclient/BackOffice/DirectoryTabInfo";
import { DirectoryFrame } from "@docsvision/webclient/BackOffice/DirectoryFrame";
import { StaffDirectoryHead } from "@docsvision/webclient/BackOffice/StaffDirectoryHead";
import { StaffDirectoryInfo } from "@docsvision/webclient/BackOffice/StaffDirectoryInfo";
import { SliderCheckBox } from "@docsvision/webclient/Helpers/SliderCheckBox/SliderCheckBox";
import { $MessageBox } from "@docsvision/webclient/System/$MessageBox";
import { showSecurityDescriptorDialog } from "@docsvision/webclient/Platform/SecurityDescriptorDialog";
import { IDirectoryTreeRow } from "@docsvision/webclient/BackOffice/IDirectoryTreeRow";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { EmployeesTabFrame } from "@docsvision/webclient/BackOffice/EmployeesTabFrame";
import { DirectoryValuesIcon } from "@docsvision/webclient/BackOffice/DirectoryValuesIcon";
import { StaffDirectoryTreeAddButton } from "@docsvision/webclient/BackOffice/StaffDirectoryTreeAddButton";
export declare const ORGANIZATION_TAB_ID = "organization";
export declare const POSITION_TAB_ID = "position";
export declare const GROUP_TAB_ID = "group";
export declare const INFO_TAB_ID = "info";
export declare const EMPLOYEES_TAB_ID = "employee";
export declare const EMPLOYEES_ICON_CLASSES = "dv-ico dv-ico-staff-user";
export declare const EMPLOYEES_REMOVE_FROM_GROUP_ICON_CLASSES = "dv-ico dv-ico-close-circle";
export declare const CREATE_SECTION_HEADERS: {
    32: string;
    16: string;
    2: string;
    4: string;
};
export declare const CREATE_ROOT_SECTION_HEADERS: {
    [x: number]: string;
    2: string;
    4: string;
};
export declare class StaffDirectoryView {
    leftTabs: DirectoryTabInfo[];
    rightTabs: DirectoryTabInfo[];
    frame: typeof DirectoryFrame;
    head: typeof StaffDirectoryHead;
    tabs: (props: 
import("@docsvision/webclient/DirectoryEdit/DirectoryTabs").DirectoryTabsProps) => JSX.Element;
    tree: (props: 
import("@docsvision/webclient/DirectoryEdit/DirectoryTree").DirectoryTreeProps) => JSX.Element;
    employees: (props: 
import("@docsvision/webclient/DirectoryEdit/DirectoryValues").DirectoryValuesProps) => JSX.Element;
    entryModal: (props: 
import("@docsvision/webclient/DirectoryEdit/DirectoryEntryModal").IDirectoryEntryModalProps<any, any>) => JSX.Element;
    sectionInfo: typeof StaffDirectoryInfo;
    showAllButton: typeof SliderCheckBox;
    employeesTabFrame: typeof EmployeesTabFrame;
    removeIcon: typeof DirectoryValuesIcon;
    treeAddButton: typeof StaffDirectoryTreeAddButton;
    staffContextMenuItemNames: {
        createSection: string;
        accessRights: string;
        info: string;
        edit: string;
        create: string;
        createOrganization: string;
        createDepartment: string;
        createEmployee: string;
        createGroup: string;
        createPosition: string;
        delete: string;
        copySection: string;
        cutSection: string;
        pasteSection: string;
        cancel: string;
    };
    employeesContextMenuItemNames: {
        info: string;
        edit: string;
        delete: string;
    };
    getConfirmationDialogText: (entityName: string, isSection: boolean, dataType: GenModels.DirectoryDataType) => any;
    showDeleteConfirmationDialog: (entityName: string, services: $MessageBox, isSection: boolean, dataType: GenModels.DirectoryDataType) => Promise<void>;
    showSecurityDescriptorDialog: typeof showSecurityDescriptorDialog;
    getSectionInfoDialogHeader: (params: {
        section: IDirectoryTreeRow;
    }) => string;
    getSectionEditDialogHeader: (params: {
        section: IDirectoryTreeRow;
    }) => string;
    getSectionCreateDialogHeader: (params: {
        parentSection: IDirectoryTreeRow;
        type: GenModels.DirectoryDataType;
    }) => string;
    getEmployeeInfoDialogHeader: (params: {
        employeeId: string;
    }) => string;
    getEmployeeEditDialogHeader: (params: {
        employeeId: string;
    }) => string;
    getEmployeeCreateDialogHeader: (params: {
        parentSection: IDirectoryTreeRow;
    }) => string;
    showInsufficientAccessRightsMessage: (services: $MessageBox) => Promise<void>;
    searchResult: (props: 
import("@docsvision/webclient/DirectoryEdit/DirectorySearchResult").IDirectorySearchResultProps) => JSX.Element;
    getSearchInfoIconClass: (item: GenModels.SearchItemModel) => any;
}
