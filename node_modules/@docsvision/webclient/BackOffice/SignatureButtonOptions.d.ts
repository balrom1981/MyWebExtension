import { SignatureButtonLogic } from "@docsvision/webclient/BackOffice/SignatureButtonLogic";
import { SignatureButtonView } from "@docsvision/webclient/BackOffice/SignatureButtonView";
import { $CloudSignature } from "@docsvision/webclient/BackOffice/$CloudSignature";
import { $DigitalSignature, IDigitalSignOptions, IEncryptedInfo } from "@docsvision/webclient/BackOffice/$DigitalSignature";
import { $LayoutDocumentController, $SignatureController } from "@docsvision/webclient/Generated/DocsVision.WebClient.Controllers";
import { BaseControlParams } from "@docsvision/webclient/System/BaseControl";
import { $CardId, $CardInfo, $CardTimestamp, $EditOperationStore } from "@docsvision/webclient/System/LayoutServices";
import { CancelableApiEvent, BasicApiEvent } from "@docsvision/webclient/System/ApiEvent";
import { IEventArgs } from "@docsvision/webclient/System/IEventArgs";
import { $RouterNavigation } from "@docsvision/webclient/System/$Router";
import { IControlOptions } from "@docsvision/webclient/System/IControlOptions";
import { $MessageWindow } from "@docsvision/web/components/modals/message-box";
import { Optional } from "@docsvision/web/core/services";
/**
 * Содержит публичные свойства элемента управления [SignatureButton]{@link SignatureButton}.
 */
export declare class SignatureButtonParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления */
    standardCssClass?: string;
    /** Скрывает выбор метки в диалоге подписания. */
    signWithoutLabel?: boolean;
    /** Доступна ли операция подписания. */
    canSign?: boolean;
    /** Доступен ли просмотр журнала подписей. */
    canViewSignatures?: boolean;
    /** Определяет внешний вид иконки, в зависимости от наличия подписей. */
    hasSignatures?: boolean;
    /** Доступна ли кнопка открытия диалога настроек. */
    canSetupSignatureMethods?: boolean;
    /** Событие, возникающее перед открытием диалога подписания. */
    signDialogOpening?: CancelableApiEvent<IEventArgs>;
    /** Событие, возникающее после открытия диалога подписания. */
    signDialogOpened?: BasicApiEvent<IEventArgs>;
    /** Событие, возникающее перед открытием диалога журнала подписи. */
    signListDialogOpening?: CancelableApiEvent<IEventArgs>;
    /** Событие, возникающее после октрытия диалога журнала подписи. */
    signListDialogOpened?: BasicApiEvent<IEventArgs>;
    /** Событие, возникающее после нажатия кнопки подписать и перед выполнением операции подписания. */
    creatingSignature?: CancelableApiEvent<IDigitalSignOptions>;
    /** Событие, возникающее после создания подписи, но перед прикреплением подписи к документу. */
    attachingSignature?: CancelableApiEvent<IEncryptedInfo>;
    /**
     * Событие, возникающее после создания подписи.
     * Отмена события предотвратит отображение диалога и перезагрузку странциы.
     */
    signingComplete?: CancelableApiEvent<IEncryptedInfo>;
    services?: Optional<$SignatureButtonOptions> & $DigitalSignature & $CardId & $MessageWindow & $RouterNavigation & $EditOperationStore & $SignatureController & $CardTimestamp & $CardInfo & $CloudSignature & $LayoutDocumentController;
}
export declare type $SignatureButtonOptions = {
    signatureButtonOptions: IControlOptions<SignatureButtonParams, SignatureButtonLogic, SignatureButtonView>;
};
export declare const $SignatureButtonOptions: string | ((model?: $SignatureButtonOptions) => IControlOptions<SignatureButtonParams, SignatureButtonLogic, SignatureButtonView>);
