import { Store } from 'effector';
import { ComponentLogic } from '@docsvision/web/core/component';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { ISignatureMethodsSetupProps } from '@docsvision/webclient/BackOffice/SignatureMethodsSetup';
import { ICryptoCertificate } from 'Libs/CryptoPro/Crypto';
import { IDssCertificateInfoEx } from '@docsvision/webclient/BackOffice/IDssCertificateInfoEx';
import { IGetCertificateResult } from '@docsvision/webclient/BackOffice/IGetCertificateResult';
export declare class SignatureMethodsSetupLogic extends ComponentLogic<ISignatureMethodsSetupProps> {
    domain: 
import("effector").Domain;
    $signatureMethods: Store<GenModels.SignatureMethod[]>;
    $visibleSignatureMethods: Store<GenModels.SignatureMethod[]>;
    initSignatureMethods: 
import("effector").Event<GenModels.SignatureMethod[]>;
    $selectedCertificatesIds: Store<string[]>;
    $defaultCertificatesIds: Store<string[]>;
    toggleCertificate: 
import("effector").Event<GenModels.SignatureMethod>;
    certificatesReorder: 
import("effector").Event<GenModels.SignatureMethod[]>;
    canToggleMethod: (method: GenModels.SignatureMethod) => boolean;
    methodCommentEdit: 
import("effector").Event<{
        method: GenModels.SignatureMethod;
        comment: string;
    }>;
    initSelectedCertificatesLogic(): void;
    $localCertificates: Store<GenModels.SavedCertificateInfo[]>;
    initLocalCertificates: 
import("effector").Event<{
        savedCertificates: GenModels.SavedCertificateInfo[];
        systemCertificates: ICryptoCertificate[];
    }>;
    savedLocalCertificatesLoaded: 
import("effector").Event<GenModels.SavedCertificateInfo[]>;
    loadSystemInstalledCertificatesFx: 
import("effector").Effect<void, ICryptoCertificate[], Error>;
    initLocalCertificatesLogic(options: ISignatureMethodsSetupProps): void;
    $pkiClientCertificates: Store<GenModels.SavedCertificateInfo[]>;
    initPkiClientCertificates: 
import("effector").Event<{
        savedCertificates: GenModels.SavedCertificateInfo[];
        pkiClientCertificates: ICryptoCertificate[];
    }>;
    resolvePkiClientCertificates: 
import("effector").Event<ICryptoCertificate[]>;
    savedPkiClientCertificatesLoaded: 
import("effector").Event<GenModels.SavedCertificateInfo[]>;
    loadPkiClientCertificatesFx: 
import("effector").Effect<void, ICryptoCertificate[], Error>;
    initPkiClientCertificatesLogic(options: ISignatureMethodsSetupProps): void;
    $cloudCertificates: Store<GenModels.SavedCertificateInfo[]>;
    initCloudCertificates: 
import("effector").Event<{
        savedCertificates: GenModels.SavedCertificateInfo[];
        cloudCertificates: IDssCertificateInfoEx[];
    }>;
    $cloudCertificatesLoaded: Store<boolean>;
    savedCloudCertificatesLoaded: 
import("effector").Event<GenModels.SavedCertificateInfo[]>;
    loadCertificatesFromDssFx: 
import("effector").Effect<void, IGetCertificateResult[], Error>;
    loadCertificatesThumberprintsFx: 
import("effector").Effect<IGetCertificateResult[], IDssCertificateInfoEx[], Error>;
    $showCloudCertificates: Store<boolean>;
    toggleShowCloudCertificates: 
import("effector").Event<boolean>;
    $showCloudCertificatesCheckboxVisible: Store<boolean>;
    initCloudCertificatesLogic(options: ISignatureMethodsSetupProps): void;
    $initialSettings: Store<GenModels.SignatureMethodSettings>;
    componentRender: 
import("effector").Event<GenModels.SignatureMethodSettings>;
    settingsChanged: 
import("effector").Event<GenModels.SignatureMethodSettings>;
    initSettingsModelProcessing(): void;
    $authorizedInCloud: Store<boolean>;
    $cloudAccountName: Store<any>;
    accountNameInput: 
import("effector").Event<string>;
    loginFx: 
import("effector").Effect<void, any, Error>;
    logoutFx: 
import("effector").Effect<void, any, Error>;
    authorized: 
import("effector").Event<void>;
    initCloudAuthorization(options: ISignatureMethodsSetupProps): void;
    initialized: 
import("effector").Event<ISignatureMethodsSetupProps>;
    init(options: ISignatureMethodsSetupProps): void;
}
