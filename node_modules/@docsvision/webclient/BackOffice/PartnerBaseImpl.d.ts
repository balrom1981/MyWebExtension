import { EmployeeVisualizer } from "@docsvision/webclient/BackOffice/EmployeeVisualizer";
import { IPartnerFilterChangeEventArgs } from "@docsvision/webclient/BackOffice/IPartnerFilterChangeEventArgs";
import { PartnerBase, PartnerBaseParams } from "@docsvision/webclient/BackOffice/PartnerBase";
import { PartnerDirectoryItemVisualiser } from "@docsvision/webclient/BackOffice/PartnerDirectoryItemVisualiser";
import { PartnerSelectDialog } from "@docsvision/webclient/BackOffice/PartnerSelectDialog";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { IEditPopoverProps } from "@docsvision/webclient/Helpers/PopoverHelpers/EditPopover/IEditPopoverProps";
import { ITypeaheadSearchQuery } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchQuery";
import { ITypeaheadSearchResult } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchResult";
import { ITypeaheadVariant } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadVariant";
import { Typeahead } from "@docsvision/webclient/Helpers/Typeahead/Typeahead";
import { InputBasedControlImpl, InputBasedControlState } from "@docsvision/webclient/System/InputBasedControlImpl";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import { RequestHelper } from "@docsvision/webclient/System/RequestHelper";
import React from "react";
/** @internal */
export interface PartnerBaseState<T> extends PartnerBaseParams<T>, InputBasedControlState<T> {
    binding: IBindingResult<T>;
    requestHelper: RequestHelper;
    directoryDialogSelectedValue: T;
    employeeVisualiser: EmployeeVisualizer;
    itemVisualiser: PartnerDirectoryItemVisualiser;
    typeahead: Typeahead;
    beforeModalSelectedFilterPath: GenModels.DepartmentModel[];
    /** Путь для элемента из поиска, отличается от selectedFilterPath тем, что применяется только при закрытии PartnerSelectDialog */
    searchFilterPath: GenModels.DepartmentModel[];
    maximized?: boolean;
    onMouseOverInfo: boolean;
}
/** @internal */
export declare abstract class PartnerBaseImpl<T extends GenModels.DepartmentModel | GenModels.EmployeeDataModel, ParamsT extends PartnerBaseParams<T> = PartnerBaseParams<T>, StateT extends PartnerBaseState<T> = PartnerBaseState<T>> extends InputBasedControlImpl<T, ParamsT, StateT> {
    static FirstPageSize: number;
    static NextPageSize: number;
    static SearchTimeout: number;
    private modalHost;
    private dictionaryHost;
    constructor(props: ParamsT, state: StateT);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    setValue(value: T, redraw: boolean): void;
    setValueInternal(value: T): void;
    private saveCard;
    private shouldSaveCardWithEditInPlaceValue;
    private isLayoutViewMode;
    protected get departmentMode(): number;
    protected getCssClass(): string;
    protected getInputTitle(): string;
    protected showEditPopover(popoverOptions?: IEditPopoverProps): Promise<PartnerBase<T, ParamsT, StateT>>;
    get currentFilterPath(): GenModels.DepartmentModel[];
    get currentFilter(): string | undefined;
    get currentFilterName(): string | undefined;
    protected attachTypeahead(typeahead: Typeahead): void;
    protected onItemEdited(item: GenModels.PartnerDirectorySearchItem): void;
    protected onSelectCreatedEntity(newValue: T): void;
    protected findItems(typeaheadQuery: ITypeaheadSearchQuery): Promise<ITypeaheadSearchResult>;
    protected onTypeaheadSelected(variant: ITypeaheadVariant): Promise<void>;
    protected onDropdownStateChanged(): void;
    attachDialogComponent: (dialog: PartnerSelectDialog) => void;
    showDictionary(): void;
    hideDictionary(): Promise<void>;
    protected cancelModal: () => void;
    protected onMaximize: () => void;
    protected onDirectoryDialogNodeSelected(node: T): void;
    protected onDirectoryDialogSelectButtonClick(): Promise<void>;
    protected onFilterSelected: (items: GenModels.DepartmentModel[], resetPreviousPath?: boolean) => Promise<void>;
    protected onSelectedFilterPathChange: (newSelected: GenModels.DepartmentModel[]) => void;
    protected onDialogSelectedFilterPathChange: (newSelected: GenModels.DepartmentModel[]) => void;
    setSelectedFilterPath(newValue: GenModels.DepartmentModel[]): Promise<unknown>;
    setSearchFilterPath: (newValue: GenModels.DepartmentModel[]) => void;
    setPredefinedFilter(newValue: GenModels.DepartmentModel): Promise<IPartnerFilterChangeEventArgs>;
    protected onInputChange(event: any): void;
    get isDictionaryShown(): boolean;
    set partnerTipMode(val: GenModels.PartnerTipModeItems);
    get partnerTipMode(): GenModels.PartnerTipModeItems;
    set partnerViewMode(val: GenModels.EmployeeViewMode);
    get partnerViewMode(): GenModels.EmployeeViewMode;
    protected renderFilter(): React.ReactNode;
    protected renderPlaceholder(): JSX.Element;
    protected getCurrentDepartment(): GenModels.DepartmentModel;
    protected onCreateOrganization: () => Promise<void>;
    protected onCreateDepartment: () => Promise<void>;
    protected onCreateEmployee: () => Promise<void>;
    private afterOpenCallback;
    protected closePopover(): void;
    protected getItemType(value: GenModels.DepartmentModel | GenModels.EmployeeDataModel): GenModels.PartnerItemType;
    protected renderCardInfo(): JSX.Element;
    protected onDocumentOver: (event: any) => void;
    protected onDocumentOut: (event: any) => void;
    protected onMouseEnter: () => void;
    protected onMouseLeave(): void;
    protected onDocumentMouseDown: (event: MouseEvent) => void;
    protected renderTypeaheadHeader(): JSX.Element;
    protected getIconLabel(): string;
    protected onMouseDownIcon(): void;
    protected getIconClassName(): string;
    protected onButtonBlur(event: React.FocusEvent<any>): void;
    protected renderInputWithPlaceholder(): React.ReactNode;
    protected editInPlaceModeRender(): JSX.Element;
    protected onIconClick(): void;
    protected renderWithText(): JSX.Element;
    protected getDepartmentIconClassName(item: GenModels.DepartmentModel): string;
    renderDictionary(): JSX.Element;
}
