import { AuthenticationKindsParams } from "@docsvision/webclient/BackOffice/AuthenticationKindsOptions";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
export declare class AuthenticationKindsLogic {
    options: AuthenticationKindsParams;
    constructor(options: AuthenticationKindsParams);
    domain: 
import("effector").Domain;
    $kinds: 
import("effector").Store<GenModels.AuthenticationKindsModel[]>;
    setKinds: 
import("effector").Event<GenModels.AuthenticationKindsModel[]>;
    useExtensionChange: 
import("effector").Event<{
        value: boolean;
        kind: GenModels.AuthenticationKindsModel;
    }>;
    $selectedKind: 
import("effector").Store<GenModels.AuthenticationKindsModel>;
    setSelectedKind: 
import("effector").Event<GenModels.AuthenticationKindsModel>;
    loginChangeKind: 
import("effector").Event<string>;
    loginChanged: 
import("effector").Event<{
        kinds: GenModels.AuthenticationKindsModel[];
        selectedKind: GenModels.AuthenticationKindsModel;
    }>;
    loginCheckExist: 
import("effector").Event<GenModels.AuthenticationKindsModel>;
    $isOpen: 
import("effector").Store<boolean>;
    setOpen: 
import("effector").Event<boolean>;
    $isExist: 
import("effector").Store<boolean>;
    $isValid: 
import("effector").Store<boolean>;
    setValid: 
import("effector").Event<boolean>;
    $binding: 
import("effector").Store<IBindingResult<GenModels.AuthenticationKindsModel[]>>;
    setBinding: 
import("effector").Event<IBindingResult<GenModels.AuthenticationKindsModel[]>>;
    saveFx: 
import("effector").Effect<GenModels.AuthenticationKindsModel[], GenModels.AuthenticationKindsModel[], void>;
    loginCheckExistFx: 
import("effector").Effect<GenModels.AuthenticationKindsModel, boolean, Error>;
    $isLoadingSave: 
import("effector").Store<boolean>;
    $isLoadingCheckExist: 
import("effector").Store<boolean>;
    $isAccess: 
import("effector").Store<boolean>;
    checkAccess: 
import("effector").Event<void>;
    checkAccessFx: 
import("effector").Effect<void, boolean, Error>;
    init(): void;
}
