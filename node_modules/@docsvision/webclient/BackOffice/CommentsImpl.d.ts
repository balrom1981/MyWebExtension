/// <reference types="react" />
import { CommentsParams, CommentsState } from "@docsvision/webclient/BackOffice/Comments";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { BaseControlImpl } from "@docsvision/webclient/System/BaseControlImpl";
import { IDataChangedEventArgsEx } from "@docsvision/webclient/System/IDataChangedEventArgs";
export declare class CommentsImpl extends BaseControlImpl<CommentsParams, CommentsState> {
    private deletedComments;
    private addCommentOnce;
    private updateCommentOnce;
    private deleteCommentOnce;
    private restoreCommentOnce;
    private editInPlaceLoader;
    private editInPlaceLoaderEdit;
    private input;
    private editInput;
    private htmlEditorHeight;
    private commentBlockWidth;
    private maxImageSize;
    private popoverImageDisplay;
    constructor(props: CommentsParams, state: CommentsState);
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected init: (input: HTMLElement, loader: HTMLElement, editMode?: boolean) => Promise<void>;
    checkImageClick: (we: JQuery.Event, event: MouseEvent) => void;
    private removeElements;
    protected onSummernoteImageUpload(files: FileList): void;
    refresh(): Promise<any>;
    addComment(text: string): Promise<any>;
    updateComment(commentId: string, text: string): Promise<any>;
    deleteComment(commentId: string): Promise<any>;
    restoreComment(commentId: string): Promise<any>;
    private checkTextForEmptiness;
    private onAddComment;
    private onUpdateComment;
    private onCancelEditComment;
    private onCancelAddComment;
    componentDidUpdate(prevProps: any, prevState: any): Promise<void>;
    private onEditComment;
    private onDeleteComment;
    private onRestoreComment;
    private onAddingCommentTextChange;
    private onAddingCommentWithMention;
    private onEditingCommentTextChange;
    private onEditingCommentWithMention;
    private onShowAllCommentsButtonClick;
    protected onDataChanged(eventArgs: IDataChangedEventArgsEx<GenModels.Comment[]>): void;
    private onDocumentMouseDown;
    protected attachEditInPlaceLoader: (elem: any) => void;
    protected attachEditInPlaceLoaderEdit: (elem: any) => void;
    private onCancelEditHandler;
    resetText: () => void;
    renderControl(): JSX.Element;
}
