/// <reference types="react" />
import { IComponentProps } from '@docsvision/web/core/component';
import { SignatureMethodsSetupLogic } from '@docsvision/webclient/BackOffice/SignatureMethodsSetupLogic';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { SignatureMethodsSetupCertificateRow } from '@docsvision/webclient/BackOffice/SignatureMethodsSetupCertificateRow';
import { $CryptoPro } from '@docsvision/webclient/BackOffice/$CryptoPro';
import { $ApplicationSettings, $DeviceType, $WebViewIOSEnabled } from '@docsvision/webclient/StandardServices';
import { $CloudSignature } from '@docsvision/webclient/BackOffice/$CloudSignature';
import { SignatureMethodsSetupCertificatesTableLoader } from '@docsvision/webclient/BackOffice/SignatureMethodsSetupCertificatesTableLoader';
import { SignatureMethodsSetupSelectedMethodsLoader } from '@docsvision/webclient/BackOffice/SignatureMethodsSetupSelectedMethodsLoader';
import { getSignatureMethodName } from '@docsvision/webclient/BackOffice/GetSignatureMethodName';
import { $SignatureController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { $MessageBox } from '@docsvision/webclient/System/$MessageBox';
import { SignatureMethodsSetupNoPluginMessage } from '@docsvision/webclient/BackOffice/SignatureMethodsSetupNoPluginMessage';
export interface ISignatureMethodsSetupProps extends IComponentProps<SignatureMethodsSetupLogic, SignatureMethodsSetupView> {
    /** Загруженный с сервера объект настроек */
    settings: GenModels.SignatureMethodSettings;
    /**
     * Колбэк для получения текущего состояния настроек, с целью сохранения его на сервере.
     *
     * @warning Не следует передавать полученный объект в
     * качестве пропса settings - возможно зацикливание.
     */
    onSettingsUpdate: (settings: GenModels.SignatureMethodSettings) => void;
    services: $CryptoPro & $ApplicationSettings & $CloudSignature & $SignatureController & $MessageBox & $WebViewIOSEnabled & $DeviceType;
}
export declare class SignatureMethodsSetupView {
    frame: (props: 
import("./Components/SignatureMethodsSetupFrame").ISignatureMethodsSetupFrameProps) => JSX.Element;
    certificateTable: (props: 
import("./Components/SignatureMethodsSetupCertificateTable").ISignatureMethodsSetupCertificateTableProps) => JSX.Element;
    certificateRow: typeof SignatureMethodsSetupCertificateRow;
    getSignatureMethodName: typeof getSignatureMethodName;
    selectedListLoader: typeof SignatureMethodsSetupSelectedMethodsLoader;
    certificatesTableLoader: typeof SignatureMethodsSetupCertificatesTableLoader;
    cloudLogin: (props: 
import("./Components/SignatureMethodsSetupCloudLogin").ISignatureMethodsSetupCloudLoginProps) => JSX.Element;
    noPluginMessage: typeof SignatureMethodsSetupNoPluginMessage;
}
export declare const SignatureMethodsSetup: (props: ISignatureMethodsSetupProps) => JSX.Element;
