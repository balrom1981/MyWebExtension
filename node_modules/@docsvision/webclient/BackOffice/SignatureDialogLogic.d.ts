import { ComponentLogic } from '@docsvision/web/core/component';
import { ISignatureDialogProps } from '@docsvision/webclient/BackOffice/SignatureDialog';
import { ISignatureLabel } from '@docsvision/webclient/Legacy/ISignatureLabel';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { ISignOptions } from '@docsvision/webclient/BackOffice/ISignOptions';
import { IComboBoxElement } from '@docsvision/webclient/Helpers/ComboBox/Data/ClientModels/IComboBoxElement';
import { IDigitalSignOptions } from '@docsvision/webclient/BackOffice/$DigitalSignature';
export declare enum ISigningStatus {
    Default = 0,
    Offline = 1,
    Online = 2
}
export declare class SignatureDialogLogic extends ComponentLogic<ISignatureDialogProps> {
    domain: 
import("effector").Domain;
    $initLoading: 
import("effector").Store<boolean>;
    $visible: 
import("effector").Store<boolean>;
    toggleVisibility: 
import("effector").Event<boolean>;
    $signLabels: 
import("effector").Store<ISignatureLabel[]>;
    $signLabelComboBoxItems: 
import("effector").Store<IComboBoxElement[]>;
    $selectedLabel: 
import("effector").Store<ISignatureLabel>;
    selectLabel: 
import("effector").Event<ISignatureLabel>;
    $selectedMethod: 
import("effector").Store<GenModels.SignatureMethod>;
    selectMethod: 
import("effector").Event<GenModels.SignatureMethod>;
    $settings: 
import("effector").Store<GenModels.SignatureMethodSettings>;
    $signMethodComboBoxItems: 
import("effector").Store<IComboBoxElement[]>;
    $signOptions: 
import("effector").Store<ISignOptions>;
    loadSettingsFx: 
import("effector").Effect<{
        documentId: string;
    }, GenModels.SignatureModel, Error>;
    signFx: 
import("effector").Effect<IDigitalSignOptions, void, Error>;
    $signing: 
import("effector").Store<boolean>;
    $files: 
import("effector").Store<GenModels.SignatureFileInfo[]>;
    $settingsDialogShown: 
import("effector").Store<boolean>;
    showSettingsDialog: 
import("effector").Event<void>;
    cancelSettingsDialog: 
import("effector").Event<void>;
    currentDialogSettingsUpdated: 
import("effector").Event<GenModels.SignatureMethodSettings>;
    saveSettingsDialog: 
import("effector").Event<void>;
    saveSettingsFx: 
import("effector").Effect<GenModels.SignatureMethodSettings, void, Error>;
    actualizeProfileCertificateSourceFx: 
import("effector").Effect<GenModels.SignatureMethodSettings, GenModels.SignatureMethodSettings, Error>;
    init(options: ISignatureDialogProps): void;
}
