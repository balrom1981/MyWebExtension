/// <reference types="react" />
import { StateButtonsParams } from "@docsvision/webclient/BackOffice/StateButtons";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { RightSidebar } from "@docsvision/webclient/Legacy/RightSidebar";
import { BaseControlState } from "@docsvision/webclient/System/BaseControl";
import { BaseControlImpl } from "@docsvision/webclient/System/BaseControlImpl";
import { IOperationParametersPanelService, ChangeStateFunction } from '@docsvision/webclient/BackOffice/$OperationParametersPanel';
import { PerformOnce } from '@docsvision/webclient/Legacy/Utils';
import { ILayout } from '@docsvision/webclient/System/$Layout';
/** @internal */
export interface StateButtonsState extends StateButtonsParams, BaseControlState {
    addEmptyClass: boolean;
    /** Изменяется ли в данный момент состояние. */
    isChanging: boolean;
}
/** @internal */
export declare class StateButtonsImpl extends BaseControlImpl<StateButtonsParams, StateButtonsState> {
    protected sidebar: RightSidebar;
    protected sidebarRoot: HTMLElement;
    protected parametersSidebar: RightSidebar;
    protected locationParametersDialogBase: string;
    protected currentParametersDialogService: IOperationParametersPanelService | undefined;
    protected performClickOnce: PerformOnce;
    private emptyClass;
    constructor(props: StateButtonsParams, state: StateButtonsState);
    protected initSidebar(): void;
    protected renderSidebar(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    showMenu(): void;
    hideMenu(): void;
    hideParametersDialog(): void;
    hasContent(): boolean;
    performClick(operation: string | GenModels.OperationDataModel): void;
    performOperation(operationData: GenModels.OperationDataModel): Promise<void>;
    onStateChanged(): Promise<void>;
    add(operationData: GenModels.OperationDataModel): void;
    remove(operation: string | GenModels.OperationDataModel): void;
    private changeStateFunctionDefault;
    protected saveCard(): Promise<void>;
    protected getStateButtons(): JSX.Element | JSX.Element[];
    protected getStateButtonsItems(): JSX.Element[];
    protected getMoreStateButton(): JSX.Element;
    protected getSidebarButtons(): JSX.Element[];
    protected processOperationLayout(operationData: GenModels.OperationDataModel, onAccept: (panel: RightSidebar, changeStateFunction: ChangeStateFunction, layout: ILayout) => Promise<void>, onClosed: () => void): Promise<void>;
    private getParametersDialogLayout;
    private requestParametersDialogLayout;
    private layoutIsEmpty;
    protected showConfirmationDialog(operationData: GenModels.OperationDataModel): Promise<void>;
    private getConfirmationDialogMsg;
    private set generatingConfirmationTextFunction(value);
    protected getCssClass(): string;
    protected getMenuButtonClassName(): string;
    private includeHiddenOperations;
    private includeOnlyHiddenOperations;
    private isHiddenOperation;
    renderControl(): JSX.Element;
}
