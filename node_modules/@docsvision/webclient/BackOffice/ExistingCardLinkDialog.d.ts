import { $LayoutController } from "@docsvision/webclient/Generated/DocsVision.WebClient.Controllers";
import { ILayout } from "@docsvision/webclient/System/$Layout";
import { LoadingState } from "@docsvision/webclient/System/LoadingState";
import { $LayoutManager } from "@docsvision/webclient/System/$LayoutManager";
import React from 'react';
import { IDialog } from "@docsvision/webclient/System/$CurrentDialog";
import { $LinksSearchCards } from '@docsvision/webclient/BackOffice/$LinksSearchCardsService';
import { Optional } from '@docsvision/web/core/services';
import { BasicApiEvent, CancelableApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { IEventArgs } from '@docsvision/webclient/System/IEventArgs';
import { $DeviceType } from "@docsvision/webclient/StandardServices";
export interface Props {
    onClose: Function;
    onAddExistingCardLink: Function;
    onAddedExistingCardLink: Function;
    services: $LayoutController & $LayoutManager & Optional<$LinksSearchCards> & $DeviceType;
    linkTypeEditable?: boolean;
    /** Существует ли кнопка развертывания */
    maximizeButtonEnabled?: boolean;
    /** Вызывается при попытке развернуть окно */
    onMaximize?: () => void;
    setLastMaximized?: Function;
    lastMaximized?: boolean;
}
interface State {
    layout: ILayout;
    savingState: LoadingState;
    services: $LinksSearchCards & $DeviceType;
    /** При смене значения на true модальное окно развернётся, при смене в false - свернётся. */
    maximized: boolean;
}
export declare class ExistingCardLinkDialog extends React.Component<Props, State> implements IDialog {
    static ExistingCardLinkSearchLayout: string;
    private layoutRoot;
    constructor(props: any);
    static show(services: $LayoutController & $LayoutManager & Optional<$LinksSearchCards> & $DeviceType, onAddExistingCardLink: Function, onAddedExistingCardLink: Function, lastMaximized?: boolean, setLastMaximize?: Function, windowOpeningEvent?: CancelableApiEvent<IEventArgs>, windowOpenedEvent?: BasicApiEvent<IEventArgs>, windowClosingEvent?: CancelableApiEvent<IEventArgs>, windowClosedEvent?: BasicApiEvent<IEventArgs>, linkTypeEditable?: boolean): Promise<void>;
    componentDidMount(): void;
    loadLayout(): Promise<void>;
    private onCancel;
    private attachRoot;
    DialogBox: 
import("styled-components").StyledComponent<(props: 
import("C:/Dev/WebCDev/Bin/Helpers/ModalDialog/ModalDialogBox").IModalDialogBoxProps) => JSX.Element, any, {}, never>;
    close(): void;
    onMaximize: () => void;
    onModalKeyDown: (ev: React.KeyboardEvent) => void;
    render(): JSX.Element;
}
export {};
