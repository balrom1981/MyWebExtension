/// <reference types="react" />
import { GroupTaskCardSelectPerformersParams } from "@docsvision/webclient/BackOffice/GroupTaskCardSelectPerformers";
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { BaseControlState } from '@docsvision/webclient/System/BaseControl';
import { BaseControlImpl } from '@docsvision/webclient/System/BaseControlImpl';
import { StateAccessor } from '@docsvision/webclient/System/StateAccessor';
import { EditTaskDescription } from '@docsvision/webclient/BackOffice/EditTaskDescription';
import { EditTaskDuration } from '@docsvision/webclient/BackOffice/EditTaskDuration';
import { $TaskGroupPerformersController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { GroupTaskPerformersIntervalManager } from '@docsvision/webclient/BackOffice/GroupTaskPerformersIntervalManager';
import { $ApplicationSettings } from '@docsvision/webclient/StandardServices';
import { IBindingResult } from '@docsvision/webclient/System/IBindingResult';
import { IValidationParams } from '@docsvision/webclient/System/IValidationParams';
import { IValidationResult } from '@docsvision/webclient/System/IValidationResult';
import { ProcessIndication } from '@docsvision/webclient/BackOffice/ProcessIndication';
import { TaskGroupInterval, TaskGroupIntervalModel } from '@docsvision/webclient/BackOffice/TaskGroupIntervalModel';
import { StaffDirectoryItems } from '@docsvision/webclient/BackOffice/StaffDirectoryItems';
import { ICancelableEventArgs } from '@docsvision/webclient/System/ICancelableEventArgs';
import { IStaffDataLoadingEventArgs } from '@docsvision/webclient/BackOffice/IStaffDataLoadingEventArgs';
import { RequestHelper } from '@docsvision/webclient/System/RequestHelper';
import { StaffDirectoryDataVisualiser } from '@docsvision/webclient/BackOffice/StaffDirectoryDataVisualiser';
/** @internal */
export interface GroupTaskCardSelectPerformersState extends GroupTaskCardSelectPerformersParams, BaseControlState {
    binding: IBindingResult<GenModels.TaskGroupPerformersModel>;
    requiredMessage: string;
    isTransparent: boolean;
    withLoadingIcon: boolean;
}
/** @internal */
export declare class GroupTaskCardSelectPerformersImpl extends BaseControlImpl<GroupTaskCardSelectPerformersParams, GroupTaskCardSelectPerformersState> {
    executionTypeState: StateAccessor<GenModels.ExecutionType, any>;
    editTaskDescription: EditTaskDescription;
    editTaskDuration: EditTaskDuration;
    intervalManager: GroupTaskPerformersIntervalManager;
    processIndicator: ProcessIndication;
    requestHelper: RequestHelper;
    performersTableTableHelperRow: HTMLElement;
    dataVisualiser: StaffDirectoryDataVisualiser;
    constructor(props: GroupTaskCardSelectPerformersParams, state: GroupTaskCardSelectPerformersState);
    setValue(value: TaskGroupIntervalModel, redraw?: boolean, updateIntervalsManager?: boolean, triggerEvent?: boolean): void;
    getValueAsString(value: TaskGroupIntervalModel): string;
    set value(value: TaskGroupIntervalModel);
    get value(): TaskGroupIntervalModel;
    getIntervalManagerServices(): $TaskGroupPerformersController & $ApplicationSettings;
    wrapOperation<T>(checkTaskExists: boolean, operation: T): T;
    setTaskGroupInterval: (startDate: Date, endDate: Date, duration: number) => Promise<void>;
    validate(params: IValidationParams): IValidationResult[];
    calculateIntervalDates(): Promise<void>;
    set defaultCalendarIdHandler(val: string);
    get defaultCalendarIdHandler(): string;
    set useBusinessCalendarHandler(val: boolean);
    get useBusinessCalendarHandler(): boolean;
    set autoDurationsRecalculationHandler(val: boolean);
    get autoDurationsRecalculationHandler(): boolean;
    onIntervalsChanged: () => void;
    getBusinessCalendarSources: (task: TaskGroupInterval) => GenModels.BusinessCalendarSource[];
    onNewPerformersSelected: (items: GenModels.IDirectoryItemData[]) => Promise<void>;
    onDescriptionChanged: (task: TaskGroupInterval, newText: string) => Promise<void>;
    onDurationChanged: (task: TaskGroupInterval, startDate: Date, endDate: Date, duration: number) => Promise<void>;
    onPerformerChanged: (task: TaskGroupInterval, newPerformer: GenModels.IDirectoryItemData) => Promise<void>;
    onPerformerChangedNonEmpty: (task: TaskGroupInterval, newPerformer: GenModels.IDirectoryItemData) => Promise<void>;
    onToggleResponsibleClick: (task: TaskGroupInterval) => Promise<void>;
    onDeleteClick: (task: TaskGroupInterval) => Promise<void>;
    onReorder: (items: TaskGroupInterval[]) => Promise<void>;
    onMoveUpClick: (index: number) => Promise<void>;
    onMoveDownClick: (index: number) => Promise<void>;
    onChangeExecutionType: (executionType: GenModels.ExecutionType) => Promise<void>;
    onChangeDurationClick: (task: TaskGroupInterval) => Promise<
import("./Data/ITaskDurationDialogManagement").ITaskDurationDialogManagement>;
    onChangeDescriptionClick: (task: TaskGroupInterval) => Promise<
import("./Data/ITaskDescriptionDialogManagement").ITaskDescriptionDialogManagement>;
    onToggleDistributionClick: (task: TaskGroupInterval, value?: GenModels.TaskGroupPerformerMode) => Promise<void>;
    onStaffItemsLoading: (sender: StaffDirectoryItems, args: ICancelableEventArgs<IStaffDataLoadingEventArgs>, task?: TaskGroupInterval) => void;
    protected onInputClick: () => void;
    protected outsideInputClick: () => void;
    private taskExists;
    private getTaskDistribution;
    checkValidationMessages(): {
        showRequired: boolean;
        showOverflow: boolean;
    };
    getFavoritesKey(): string;
    setPerformersTableTableHelperRow: (element: HTMLElement) => void;
    getCssClass(): string;
    renderControl(): JSX.Element;
}
