import { $SignatureController, $SignatureMethodsController } from "@docsvision/webclient/Generated/DocsVision.WebClient.Controllers";
import { IFileSignInteractionModel } from './IFileSignInteractionModel';
import { IDataIOSSign } from '@docsvision/webclient/BackOffice/utils';
import { $ApplicationSettings, $WebViewIOSEnabled } from "@docsvision/webclient/StandardServices";
import { $CloudSignature } from "@docsvision/webclient/BackOffice/$CloudSignature";
import { $CryptoPro } from "@docsvision/webclient/BackOffice/$CryptoPro";
import { $LocalStorage } from "@docsvision/webclient/System/$LocalStorage";
import { $MessageBox } from "@docsvision/webclient/System/$MessageBox";
import { $DigitalSignature } from "@docsvision/webclient/BackOffice/$DigitalSignature";
import { $CardInfo } from "@docsvision/webclient/System/LayoutServices";
import { ISignatureLabel } from "@docsvision/webclient/Legacy/ISignatureLabel";
import { EncryptedInfo } from "@docsvision/webclient/Legacy/EncryptedInfo";
import { $RequestManager } from "@docsvision/webclient/System/$RequestManager";
export declare class FileSign {
    protected services: $SignatureController & $WebViewIOSEnabled & $CloudSignature & $SignatureController & $ApplicationSettings & $DigitalSignature & $MessageBox & $CryptoPro & $LocalStorage & $SignatureMethodsController & $CardInfo & $RequestManager;
    protected interactionModel: IFileSignInteractionModel;
    constructor(interactionModel: IFileSignInteractionModel, services?: $SignatureController & $WebViewIOSEnabled & $CloudSignature & $SignatureController & $ApplicationSettings & $DigitalSignature & $MessageBox & $CryptoPro & $LocalStorage & $SignatureMethodsController & $CardInfo & $RequestManager);
    /** Инициализация. */
    protected initialize(): void;
    /** Открыть диалог для создания подписи. */
    protected openCreateDialog: () => Promise<void>;
    /** @deprecated */
    ShowSignDialog: () => Promise<void>;
    /** Закрыть диалог для создания подписи. */
    protected closeCreateDialog: () => void;
    /** Сохраняет файлы, подписанные на ios-устройстве. Вызывается из WebView */
    protected saveSignedDoc: (filesData: IDataIOSSign[]) => Promise<void>;
    protected cancelDocumentsSign(): void;
    /** Открывает диалог для просмотра списка подписей. */
    protected openViewListDialog: () => Promise<void>;
    /** Показывает предупреждение при замене версии файла на другую. */
    static showSignWarningDialog(successCb?: Function, cancelCb?: Function): void;
    /** @deprecated Uses {@link showSignWarningDialog} */
    static ShowSignWarningDialog(okFunction: Function): void;
    private signOperationHelper;
    /**
     * Подписать сертификатом с указанным отпечатком и идентификатором метки из старого диалога подписания
     * @param selectedThumbprint Отпечаток
     * @param selectedLabelId Идентификатор метки
     */
    sign(selectedThumbprint: string, selectedLabel: ISignatureLabel, timestamp: number, signFields?: boolean, signAttachments?: boolean): Promise<{}>;
    /** Присоединить указанную подпись. */
    protected attachSign(encryptedInfo: EncryptedInfo, selectedLabelId: string, timestamp: number): Promise<void>;
}
