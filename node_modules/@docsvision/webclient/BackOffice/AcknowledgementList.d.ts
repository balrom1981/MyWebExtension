/// <reference types="react" />
import { AcknowledgementListLogic } from '@docsvision/webclient/BackOffice/AcknowledgementListLogic';
import { AcknowledgementListView } from '@docsvision/webclient/BackOffice/AcknowledgementListView';
import { $LayoutDocumentController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { $SiteUrl } from '@docsvision/webclient/StandardServices';
import { BaseControl, BaseControlParams } from '@docsvision/webclient/System/BaseControl';
import { BaseControlImplState } from '@docsvision/webclient/System/BaseControlImpl';
import { ControlImpl } from '@docsvision/webclient/System/ControlImpl';
import { $CardId } from '@docsvision/webclient/System/LayoutServices';
import { IBindingResult } from '@docsvision/webclient/System/IBindingResult';
import { Optional } from "@docsvision/web/core/services";
import { $RoutingService } from '@docsvision/web/core/routing';
export declare class AcknowledgementListParams extends BaseControlParams {
    /** Стандартный CSS класс со стилями элемента управления */
    standardCssClass?: string;
    /** Текст, отображаемый на кнопке открытия листа ознакомления. */
    buttonText?: string;
    /** Идентификатор текущей карточки. */
    cardId?: string;
    /** Текст всплывающей подсказки */
    tip?: string;
    /** Шаблон печати. */
    transformation?: string;
    /** Видимость подчинённых заданий. */
    includeSubTasks?: boolean;
    /** Список подчинённых заданий. */
    viewKinds?: Array<string>;
    /** Сервисы */
    services?: $LayoutDocumentController & $CardId & Optional<$AcknowledgementListOptions> & $SiteUrl & $RoutingService;
}
export interface AcknowledgementListState extends BaseControlImplState, AcknowledgementListParams {
    logic: AcknowledgementListLogic;
    view: AcknowledgementListView;
}
/** Сервис для переопределения реализации AcknowledgementList */
export interface IAcknowledgementListOptions {
    getAcknowledgementListView(params: AcknowledgementListParams): AcknowledgementListView;
    getAcknowledgementListLogic(params: AcknowledgementListParams): AcknowledgementListLogic;
}
export declare type $AcknowledgementListOptions = {
    acknowledgementListOptions: IAcknowledgementListOptions;
};
export declare const $AcknowledgementListOptions: string | ((model?: $AcknowledgementListOptions) => IAcknowledgementListOptions);
/**
 * Класс элемента управления AcknowledgementList.
 */
export declare class AcknowledgementList extends BaseControl<AcknowledgementListParams, AcknowledgementListState> {
    construct(): void;
    /** @internal */
    protected set transformationLoader(binding: IBindingResult<string>);
    set transformationChanged(val: any);
    private set viewKindsBinding(value);
    /** @notest @internal */
    protected createParams(): AcknowledgementListParams;
    protected createImpl(): ControlImpl;
    renderControl(): JSX.Element;
}
