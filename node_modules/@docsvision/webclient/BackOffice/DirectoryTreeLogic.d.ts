import { DirectoryTreeProps } from "@docsvision/webclient/BackOffice/DirectoryTree";
import { IDirectoryTreeRow } from "@docsvision/webclient/BackOffice/IDirectoryTreeRow";
import { ComponentLogic } from "@docsvision/web/core/component";
import { KeyCodes } from "@docsvision/web/utils/common";
/** @internal */
export declare class DirectoryTreeLogic extends ComponentLogic<DirectoryTreeProps> {
    protected domain: 
import("effector").Domain;
    /** Дерево, развернутое в плоский список. */
    $flatTree: 
import("effector").Store<IDirectoryTreeRow<any>[]>;
    /** Исходное дерево в виде иерархической модели. */
    $tree: 
import("effector").Store<IDirectoryTreeRow<any>[]>;
    /** Вызывается при каждом рендере, с передачей модели дерева из props. */
    componentReceivedTree: 
import("effector").Event<IDirectoryTreeRow<any>[]>;
    $shouldResetSelectedRow: 
import("effector").Store<boolean>;
    shouldResetSelectedRowReset: 
import("effector").Event<void>;
    toggleRow: 
import("effector").Event<IDirectoryTreeRow<any>>;
    toggleRowInTree: 
import("effector").Event<IDirectoryTreeRow<any>>;
    $loadingRows: 
import("effector").Store<IDirectoryTreeRow<any>[]>;
    $loadingChildrenRows: 
import("effector").Store<IDirectoryTreeRow<any>[]>;
    loadingRowsReceived: 
import("effector").Event<IDirectoryTreeRow<any>[]>;
    $receivedLoadingRows: 
import("effector").Store<IDirectoryTreeRow<any>[]>;
    loadChildren: 
import("effector").Effect<{
        parentRow: IDirectoryTreeRow;
    }, IDirectoryTreeRow<any>[], Error>;
    isChildOfNode: 
import("effector").Event<IDirectoryTreeRow<any>>;
    initToggle(options: DirectoryTreeProps): void;
    toggleRowWithPath: (path: IDirectoryTreeRow[]) => Promise<IDirectoryTreeRow>;
    $selectedRow: 
import("effector").Store<IDirectoryTreeRow<any>>;
    $copiedRowIndex: 
import("effector").Store<string>;
    $copiedRowChildList: 
import("effector").Store<string[]>;
    copiedRowChildListUpdate: 
import("effector").Event<string>;
    copiedRowChildListClear: 
import("effector").Event<void>;
    $cutCondition: 
import("effector").Store<boolean>;
    $copyCondition: 
import("effector").Store<boolean>;
    $selectedRowIndex: 
import("effector").Store<number>;
    selectRow: 
import("effector").Event<IDirectoryTreeRow<any>>;
    selectNextRow: 
import("effector").Event<IDirectoryTreeRow<any>>;
    selectPrevRow: 
import("effector").Event<IDirectoryTreeRow<any>>;
    unsetCopy: 
import("effector").Event<IDirectoryTreeRow<any>>;
    initSelection(options: DirectoryTreeProps): void;
    rowKeyDown: 
import("effector").Event<{
        row: IDirectoryTreeRow;
        key: KeyCodes;
    }>;
    initKeyboard(): void;
    init(options: DirectoryTreeProps): void;
}
