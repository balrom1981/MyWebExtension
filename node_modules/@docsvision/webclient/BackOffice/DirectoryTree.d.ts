/// <reference types="react" />
import { HtmlProps, IComponentProps } from '@docsvision/web/core/component';
import { DirectoryTreeLogic } from "@docsvision/webclient/BackOffice/DirectoryTreeLogic";
import { DirectoryTreeList } from "@docsvision/webclient/BackOffice/DirectoryTreeList";
import { IDirectoryTreeRow } from "@docsvision/webclient/BackOffice/IDirectoryTreeRow";
import { DirectoryTreeContainer } from "@docsvision/webclient/BackOffice/DirectoryTreeContainer";
import { DirectoryTreeWrapper } from "@docsvision/webclient/BackOffice/DirectoryTreeWrapper";
import { DirectoryTreeRow } from "@docsvision/webclient/BackOffice/DirectoryTreeRow";
import { DirectoryTreeToggle } from "@docsvision/webclient/BackOffice/DirectoryTreeToggle";
import { DirectoryTreeIcon } from "@docsvision/webclient/BackOffice/DirectoryTreeIcon";
import { DirectoryTreeRowName } from "@docsvision/webclient/BackOffice/DirectoryTreeRowName";
import { DirectoryTreeAddButton } from "@docsvision/webclient/BackOffice/DirectoryTreeAddButton";
import { $LocalStorage } from "@docsvision/webclient/System/$LocalStorage";
import { $ContextMenuOptions } from "@docsvision/webclient/Platform/$ContextMenuOptions";
import { Optional } from "@docsvision/web/core/services";
import { $ApplicationSettings, $IsIE } from "@docsvision/webclient/StandardServices";
import { $EditOperationStore, $LayoutInfo } from "@docsvision/webclient/System/LayoutServices";
import { Store } from "effector";
import { DirectoryTreeRowCancelButton } from "@docsvision/webclient/BackOffice/DirectoryTreeRowCancelButton";
import { DirectoryTreeHScrollContainer } from "@docsvision/webclient/BackOffice/DirectoryTreeHScrollContainer";
/** @internal */
export interface DirectoryTreeProps extends HtmlProps.div, IComponentProps<DirectoryTreeLogic, DirectoryTreeView> {
    tree: IDirectoryTreeRow[];
    loadingRows?: IDirectoryTreeRow[];
    selectedPath?: IDirectoryTreeRow[];
    onRowSelected?: (row: IDirectoryTreeRow) => void;
    cancelCopy?: () => void;
    className?: string;
    rowCopied?: Store<string>;
    cutCondition?: Store<boolean>;
    copyCondition?: Store<boolean>;
    addSection?: () => void;
    addButtonTitle?: string;
    loadChildren?: (parentRow: IDirectoryTreeRow) => Promise<IDirectoryTreeRow[]>;
    treeAddButtonFn?: (props: DirectoryTreeProps) => JSX.Element;
    services: Optional<$ContextMenuOptions> & $LocalStorage & $ApplicationSettings & $LayoutInfo & $EditOperationStore & $IsIE;
}
/** @internal */
export declare class DirectoryTreeView {
    treeList: typeof DirectoryTreeList;
    treeContainer: typeof DirectoryTreeContainer;
    hscrollContainer: typeof DirectoryTreeHScrollContainer;
    treeAddButton: typeof DirectoryTreeAddButton;
    wrapper: typeof DirectoryTreeWrapper;
    row: typeof DirectoryTreeRow;
    rowIdent: 
import("styled-components").StyledComponent<"div", any, {
        ident: number;
    }, never>;
    rowToggle: typeof DirectoryTreeToggle;
    rowIcon: typeof DirectoryTreeIcon;
    rowName: typeof DirectoryTreeRowName;
    rowCancelButton: typeof DirectoryTreeRowCancelButton;
}
/** @internal */
export declare const DirectoryTree: (props: DirectoryTreeProps) => JSX.Element;
