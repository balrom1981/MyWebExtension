import { EmployeeLoader } from "@docsvision/webclient/BackOffice/EmployeeLoader";
import { EmployeeVisualizer } from "@docsvision/webclient/BackOffice/EmployeeVisualizer";
import { FavoriteEmployeesStorage } from "@docsvision/webclient/BackOffice/FavoriteEmployeesStorage";
import { MultipleEmployeesParams } from "@docsvision/webclient/BackOffice/MultipleEmployees";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { IEditPopoverProps } from "@docsvision/webclient/Helpers/PopoverHelpers/EditPopover/IEditPopoverProps";
import { ITypeaheadSearchQuery } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchQuery";
import { ITypeaheadSearchResult } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchResult";
import { ITypeaheadVariant } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadVariant";
import { Typeahead } from "@docsvision/webclient/Helpers/Typeahead/Typeahead";
import { InputBasedControlImpl, InputBasedControlState } from "@docsvision/webclient/System/InputBasedControlImpl";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import React from "react";
/** @internal */
export interface MultipleEmployeesState extends MultipleEmployeesParams, InputBasedControlState<GenModels.EmployeeDataModel[]> {
    binding: IBindingResult<GenModels.MultipleEmployeesDataModel>;
    lastEmployees: GenModels.EmployeeDataModel[];
    favoritesStorage: FavoriteEmployeesStorage;
    employeeVisualizer: EmployeeVisualizer;
    employeeLoader: EmployeeLoader;
    onMouseDownEvent: boolean;
}
/** @internal */
export declare type MultipleEmployeesImplState = MultipleEmployeesState;
/** @internal */
export declare class MultipleEmployeesImpl extends InputBasedControlImpl<GenModels.EmployeeDataModel[], MultipleEmployeesParams, MultipleEmployeesState> {
    private typeahead;
    constructor(props: MultipleEmployeesParams, state: MultipleEmployeesState);
    setValue(value: GenModels.EmployeeDataModel[], redraw: boolean): void;
    initHelpers(props: MultipleEmployeesParams): void;
    getValueAsString(value: GenModels.EmployeeDataModel[]): string;
    protected getTextValue(): string;
    hasValue(): boolean;
    protected renderInto(props: MultipleEmployeesParams, container: HTMLElement): void;
    protected showEditPopover(popoverOptions?: IEditPopoverProps): Promise<any>;
    protected getFavoritesStorageName(props: MultipleEmployeesParams): string;
    protected onSelected(typeaheadVariant: ITypeaheadVariant): void;
    protected onMouseDown(): void;
    protected onInputBlur(event: React.FocusEvent<any>): void;
    protected onRemoveEmployeeClick(employee: GenModels.EmployeeDataModel, ev: React.MouseEvent<any> | React.TouchEvent<any>): void;
    protected findItems(query: ITypeaheadSearchQuery): Promise<ITypeaheadSearchResult>;
    protected getEmployeeTooltip(employee: GenModels.EmployeeDataModel): string;
    protected attachTypeahead(t: Typeahead): void;
    get restrictUnitId(): string;
    set restrictUnitId(id: string);
    set tipMode(val: GenModels.PartnerTipModeItems);
    get tipMode(): GenModels.PartnerTipModeItems;
    set supportFavorites(val: boolean);
    get supportFavorites(): boolean;
    get favoriteEmployees(): GenModels.EmployeeDataModel[];
    set favoriteEmployees(val: GenModels.EmployeeDataModel[]);
    protected renderViewEmployeeList(): JSX.Element;
    protected renderSimpleViewValue(): JSX.Element;
    protected renderWithText(): JSX.Element;
    protected renderEditEmployeeList(): JSX.Element;
    protected renderInputWithPlaceholder(): JSX.Element;
    addToFavorite(item: GenModels.EmployeeDataModel): void;
}
