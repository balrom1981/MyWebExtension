/// <reference types="react" />
import { TasksTableIcon } from '@docsvision/webclient/BackOffice/TasksTableIcon';
import { TasksTableCurrentPerformerView } from '@docsvision/webclient/BackOffice/TasksTableCurrentPerformerView';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { TasksTableHeaderCell } from '@docsvision/webclient/BackOffice/TasksTableHeaderCell';
import { TasksTableBody } from '@docsvision/webclient/BackOffice/TasksTableBody';
import { TasksTableCell } from '@docsvision/webclient/BackOffice/TasksTableCell';
import { TasksTableRow } from '@docsvision/webclient/BackOffice/TasksTableRow';
import { TasksTableMessage } from '@docsvision/webclient/BackOffice/TasksTableMessage';
import { TasksTableHeaderRow } from '@docsvision/webclient/BackOffice/TasksTableHeaderRow';
import { TasksTableRibbonButton } from '@docsvision/webclient/BackOffice/TasksTableRibbonButton';
import { TasksTableFilterButton } from '@docsvision/webclient/BackOffice/TasksTableFilterButton';
import { TasksTableHelpBox } from '@docsvision/webclient/BackOffice/TasksTableHelpBox';
import { TasksTableLink } from '@docsvision/webclient/BackOffice/TasksTableLink';
import { TasksTableControlWrapper } from '@docsvision/webclient/BackOffice/TasksTableControlWrapper';
import { TasksTableRibbon } from '@docsvision/webclient/BackOffice/TasksTableRibbon';
import { TasksTableTable } from '@docsvision/webclient/BackOffice/TasksTableTable';
import { TasksTableRibbonContainer } from '@docsvision/webclient/BackOffice/TasksTableRibbonContainer';
import { TasksTableIconButton } from '@docsvision/webclient/BackOffice/TasksTableIconButton';
import { StaffDirectoryItems } from '@docsvision/webclient/BackOffice/StaffDirectoryItems';
export declare class TasksTableView {
    mainButton: (props: 
import("C:/Dev/WebCDev/Bin/TypeScriptDefinitions/Helpers/Button").IButtonProperties) => JSX.Element;
    dialog: (props: 
import("C:/Dev/WebCDev/Bin/TypeScriptDefinitions/Helpers/ModalDialog/CommonModalDialog").CommonModalDialogProps) => JSX.Element;
    controlWrapper: typeof TasksTableControlWrapper;
    ribbon: typeof TasksTableRibbon;
    ribbonGroup: 
import("styled-components").StyledComponent<"div", any, {
        className: string;
    } & 
import("C:/Dev/WebCDev/Bin/TypeScriptDefinitions/Helpers/Ribbon/RibbonGroup").IRibbonGroupProps, "className">;
    ribbonButton: typeof TasksTableRibbonButton;
    ribbonContainer: typeof TasksTableRibbonContainer;
    ribbonFilterButton: typeof TasksTableFilterButton;
    tableBody: typeof TasksTableBody;
    table: typeof TasksTableTable;
    tableHeaderRow: typeof TasksTableHeaderRow;
    tableHeaderCell: typeof TasksTableHeaderCell;
    tableRow: typeof TasksTableRow;
    tableCell: typeof TasksTableCell;
    taskIcon: typeof TasksTableIcon;
    taskLink: typeof TasksTableLink;
    tableMessage: typeof TasksTableMessage;
    tableIconButton: typeof TasksTableIconButton;
    currentPerformer: typeof TasksTableCurrentPerformerView;
    helpBox: typeof TasksTableHelpBox;
    tableStaffDirectoryControl: typeof StaffDirectoryItems;
    rowHeight: number;
    levelIdent: number;
    columnNames: {
        [key: number]: string;
    };
    columnWeights: {
        [key: number]: number;
    };
    dateColumns: {
        3: boolean;
        4: boolean;
        9: boolean;
    };
    buttonNames: {
        tasksTree: string;
        showOverdue: string;
        showUnfinished: string;
        showFinished: string;
        loadFullTree: string;
        loadCurrentTaskTree: string;
        collapseAll: string;
        expandAll: string;
        refresh: string;
    };
    inputNames: {
        performer: string;
    };
    iconNames: {
        search: string;
        clear: string;
        refresh: string;
        collapseAll: string;
        expandAll: string;
        loadFullTree: string;
        loadCurrentTaskTree: string;
    };
    staffDirectoryControlClasses: {
        taskTable: string;
    };
    getIconColumnWidth: (maxLevelIdent: number) => number;
}
