import { DirectoryDesignerRowNodeType, DirectoryDesignerRowParams, DirectoryDesignerRowValueType } from "@docsvision/webclient/BackOffice/DirectoryDesignerRow";
import { DirectoryDesignerRowItemVisualiser } from "@docsvision/webclient/BackOffice/DirectoryDesignerRowItemVisualiser";
import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { IEditPopoverProps } from "@docsvision/webclient/Helpers/PopoverHelpers/EditPopover/IEditPopoverProps";
import { ITypeaheadSearchQuery } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchQuery";
import { ITypeaheadSearchResult } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadSearchResult";
import { DirectorySelectingMode } from "@docsvision/webclient/System/DirectorySelectingMode";
import { DirectoryBaseImpl, DirectoryBaseState } from "@docsvision/webclient/System/DirectoryBaseImpl";
import { IDirectorySelectDialogProps } from "@docsvision/webclient/System/DirectorySelectDialog";
import { RequestHelper } from "@docsvision/webclient/System/RequestHelper";
import React from "react";
import { ITypeaheadVariant } from "@docsvision/webclient/Helpers/Typeahead/Models/ITypeaheadVariant";
/** @internal */
export interface DirectoryDesignerRowState<ValueT extends DirectoryDesignerRowValueType = DirectoryDesignerRowValueType> extends DirectoryDesignerRowParams<ValueT>, DirectoryBaseState<ValueT, DirectoryDesignerRowNodeType, ItemT> {
    itemVisualiser: DirectoryDesignerRowItemVisualiser;
    requestHelper: RequestHelper;
    onMouseOverInfo: boolean;
    /** Backward compatibility data source */
    dataSource?: string;
    /** Backward compatibility data field */
    dataField?: string;
}
/** @internal */
export declare type DirectoryDesignerRowImplState = DirectoryDesignerRowState;
declare type ItemT = GenModels.DirectoryDesignerItem;
/** @internal */
export declare class DirectoryDesignerRowImpl extends DirectoryBaseImpl<DirectoryDesignerRowValueType, DirectoryDesignerRowNodeType, ItemT, DirectoryDesignerRowParams, DirectoryDesignerRowState> {
    private initialSetValue;
    constructor(props: DirectoryDesignerRowParams, state: DirectoryDesignerRowState);
    protected renderSelectDialog(props: IDirectorySelectDialogProps<DirectoryDesignerRowValueType, DirectoryDesignerRowNodeType, GenModels.IDirectoryItemData> & {
        ref: any;
    }): JSX.Element;
    private getDataSource;
    protected getCssClass(): string;
    protected getValuePath(value: GenModels.DirectoryDesignerItem): GenModels.DirectoryDesignerItem[];
    private saveValueOnChange;
    protected getSelectingMode(): DirectorySelectingMode;
    componentWillUnmount(): void;
    componentDidMount(): void;
    static FirstPageSize: number;
    static NextPageSize: number;
    protected onDocumentMouseDown: (event: any) => void;
    protected getTextValue(): string;
    protected renderInto(props: DirectoryDesignerRowParams, container: HTMLElement): void;
    protected showEditPopover(popoverOptions?: IEditPopoverProps): Promise<
import("C:/Dev/WebCDev/Bin/TypeScriptDefinitions/System/Controls/DirectoryBase/DirectoryBase").DirectoryBase<GenModels.DirectoryDesignerItem, GenModels.DirectoryDesignerItem, GenModels.DirectoryDesignerItem, DirectoryDesignerRowParams<GenModels.DirectoryDesignerItem>, DirectoryDesignerRowState<GenModels.DirectoryDesignerItem>>>;
    protected findItems(typeaheadQuery: ITypeaheadSearchQuery): Promise<ITypeaheadSearchResult>;
    canShowDictionary(): boolean;
    protected onInputKeyDown(ev: React.KeyboardEvent<HTMLInputElement>): void;
    getValueAsString(value: ItemT | ItemT[]): string;
    protected onInputChange(event: any): void;
    setValue(value: GenModels.DirectoryDesignerItem, redraw: boolean): void;
    private saveCard;
    private shouldSaveCardWithEditInPlaceValue;
    private isLayoutViewMode;
    protected onCreateNewItem: (itemType: any) => Promise<void>;
    protected getCurrentNode(): GenModels.DirectoryDesignerItem;
    protected renderDirectoryDesignerInputWithPlaceholder(): React.ReactNode;
    protected editInPlaceModeRender(): JSX.Element;
    protected getIconClassName(): string;
    protected onIconClick(): void;
    protected getTypeaheadProps(): 
import("C:/Dev/WebCDev/Bin/TypeScriptDefinitions/Helpers/Typeahead/ITypeaheadProps").ITypeaheadProps & {
        ref: any;
    };
    protected focusInput: () => void;
    protected onMouseDownIcon(): void;
    protected renderWithText(): JSX.Element;
    protected processTypeaheadSelected(variant: ITypeaheadVariant): Promise<void>;
}
export {};
