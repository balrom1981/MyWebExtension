/// <reference types="react" />
import { BaseControlImpl } from '@docsvision/webclient/System/BaseControlImpl';
import { UniquenessCheckParams } from '@docsvision/webclient/BackOffice/UniquenessCheck';
import { BaseControlState } from '@docsvision/webclient/System/BaseControl';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { ICancelableEventArgs } from '@docsvision/webclient/System/ICancelableEventArgs';
export interface UniquenessCheckState extends UniquenessCheckParams, BaseControlState {
    controls: Array<UniqueAttributeList>;
    attributesList: GenModels.UniqueAttributesValuesList;
    notUniqueAttributesList: Array<GenModels.UniqueAttributeCard>;
    cardInfoOpened: Array<CardInfoOpened>;
}
export declare class UniqueAttributeList {
    controlName: string;
    value: string;
    fieldAlias: string;
    fieldDisplayName: string;
    sectionId: string;
    sectionName: string;
    type: number;
}
export declare class CardInfoOpened {
    cardId: string;
    opened: boolean;
}
declare enum UniquenessCheckContext {
    None = 0,
    CardCreate = 1,
    CardSave = 2,
    ChangeState = 3
}
export declare class UniquenessCheckImpl extends BaseControlImpl<UniquenessCheckParams, UniquenessCheckState> {
    private modalHost;
    private lastUniquenessCheck;
    constructor(props: UniquenessCheckParams, state: UniquenessCheckState);
    protected showModal(showButtons: boolean, showAcceptButton: boolean, context: UniquenessCheckContext): Promise<void>;
    protected renderUniquenessContentTable(): JSX.Element;
    protected renderHeader(): JSX.Element;
    protected renderRow(columns: GenModels.UniqueAttributeCard[]): JSX.Element;
    clickOutside(): void;
    isInfoPopoverOpen(cardId: string): boolean;
    infoClick(cardId: string): void;
    getLinkUrl(cardId: string): string;
    getAttributesString(attributes: GenModels.UniqueAttributeValue[]): string;
    protected onCardSaving(sender: any, args: ICancelableEventArgs<any>): Promise<void>;
    protected onCardStateChanging(sender: any, args: ICancelableEventArgs<any>): Promise<void>;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private checkUniqueAttributes;
    private checkUniqueAttributesValue;
    private getLayoutModel;
    private checkChildControlsAttributesValues;
    protected renderModal(showButtons: boolean, context: UniquenessCheckContext, onAccept: () => void, onCancel: () => void): JSX.Element;
    protected renderControl(): JSX.Element;
}
export {};
