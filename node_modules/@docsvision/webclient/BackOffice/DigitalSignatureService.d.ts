import { ISignatureDialogProps } from '@docsvision/webclient/BackOffice/SignatureDialog';
import { AfterSignatureDialogShowEventArgs, BeforeSignatureDialogShowEventArgs, IDigitalSignatureService, IDigitalSignOptions, IEncryptedInfo, ISignatureDialogOptions, ITaskEncryptedInfo } from '@docsvision/webclient/BackOffice/$DigitalSignature';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { ModalHost } from '@docsvision/webclient/Helpers/ModalHost';
import { $ApplicationSettings, $DeviceType, $WebViewIOSEnabled } from '@docsvision/webclient/StandardServices';
import { $MessageWindow } from '@docsvision/web/components/modals/message-box';
import { $CloudSignature } from '@docsvision/webclient/BackOffice/$CloudSignature';
import { $LayoutDocumentController, $SignatureController, $SignatureMethodsController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { $DocumentCardController } from '@docsvision/webclient/Legacy/DocumentCard';
import { $RequestManager } from '@docsvision/webclient/System/$RequestManager';
import { $MessageBox } from '@docsvision/webclient/System/$MessageBox';
import { $CryptoPro } from '@docsvision/webclient/BackOffice/$CryptoPro';
import { $LocalStorage } from '@docsvision/webclient/System/$LocalStorage';
import { $Resources } from '@docsvision/web/core/localization/$Resources';
import { ITaskSignInfo } from '@docsvision/webclient/BackOffice/ApprovalTaskComplete';
import { SignatureDialogLogic } from '@docsvision/webclient/BackOffice/SignatureDialogLogic';
import { IDigitalSignatureDialogManagement } from '@docsvision/webclient/BackOffice/IDigitalSignatureDialogManagement';
import { Event } from 'effector';
import { $Domain } from '@docsvision/web/core/state-management';
/** @internal */
export declare class DigitalSignatureService implements IDigitalSignatureService {
    private services;
    cancelCurrentSign: () => void;
    currentDialogLogic: SignatureDialogLogic;
    currentDialogProps: ISignatureDialogProps;
    updateCurrentDialog: () => void;
    beforeSignatureDialogShown: Event<BeforeSignatureDialogShowEventArgs>;
    afterSignatureDialogShown: Event<AfterSignatureDialogShowEventArgs>;
    constructor(services: $ApplicationSettings & $MessageWindow & $CloudSignature & $WebViewIOSEnabled & $SignatureController & $DocumentCardController & $LayoutDocumentController & $RequestManager & $MessageBox & $CryptoPro & $LocalStorage & $SignatureMethodsController & $Resources & $DeviceType & $Domain);
    showDocumentSignDialog(documentId: string, optionsArg?: ISignatureDialogOptions): Promise<void>;
    getCurrentDialogManagement(): IDigitalSignatureDialogManagement;
    createDocumentSignature(options: IDigitalSignOptions): Promise<IEncryptedInfo>;
    createTaskSignature(options: IDigitalSignOptions): Promise<ITaskEncryptedInfo>;
    attachDocumentSignature(encryptedInfo: IEncryptedInfo): Promise<GenModels.AttachSignatureResponse>;
    showDocumentSignatureListDialog(documentId: string): Promise<ModalHost>;
    localSign(params: IDigitalSignOptions): Promise<IEncryptedInfo>;
    pkiClientSign(params: IDigitalSignOptions): Promise<IEncryptedInfo>;
    localTaskSign(params: IDigitalSignOptions): Promise<ITaskEncryptedInfo>;
    pkiClientTaskSign(params: IDigitalSignOptions): Promise<ITaskSignInfo>;
    showSignatureMethodsSetupDialog(): Promise<void>;
    private getEncryptedInfo;
    private getLocalSignData;
    private pkiClientSignWithWebview;
    cloudSign(params: IDigitalSignOptions): Promise<IEncryptedInfo>;
    cloudTaskSign(params: IDigitalSignOptions): Promise<ITaskEncryptedInfo>;
    private getCloudSignData;
}
