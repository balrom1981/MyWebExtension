import { IStaffDataLoadingEventArgs } from '@docsvision/webclient/BackOffice/IStaffDataLoadingEventArgs';
import { StaffDirectoryItemsImpl, StaffDirectoryItemsState } from '@docsvision/webclient/BackOffice/StaffDirectoryItemsImpl';
import { $LayoutRowController, $LayoutStaffController, $StaffDirectoryItemsController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { GenModels } from '@docsvision/webclient/Generated/DocsVision.WebClient.Models';
import { DirectoryBase, DirectoryBaseParams } from '@docsvision/webclient/System/DirectoryBase';
import { $CardInfo, $EditOperationStore, $LayoutInfo } from '@docsvision/webclient/System/LayoutServices';
import { IBindingResult } from '@docsvision/webclient/System/IBindingResult';
import { BasicApiEvent, CancelableApiEvent } from '@docsvision/webclient/System/ApiEvent';
import { IStaffDirectoryItemsDialog } from '@docsvision/webclient/BackOffice/IStaffDirectoryItemsDialog';
import { Optional } from '@docsvision/web/core/services';
import { $LabelWidth } from '@docsvision/webclient/System/$LabelWidth';
import { DirectorySelectingMode } from '@docsvision/webclient/System/DirectorySelectingMode';
import { $LocalStorage } from '@docsvision/webclient/System/$LocalStorage';
import { $LocationContainerControlServices } from '@docsvision/webclient/System/LocationContainerControl';
export declare type $StaffDirectoryItemsServices = $LayoutInfo & $EditOperationStore & $LayoutRowController & $LocationContainerControlServices & $StaffDirectoryItemsController & $CardInfo & Optional<$LabelWidth> & Optional<$LocalStorage> & $LayoutStaffController;
export declare type StaffValueType = GenModels.IDirectoryItemData | GenModels.IDirectoryItemData[];
export declare type StaffNodeType = GenModels.IDirectoryItemData;
declare type ItemT = GenModels.IDirectoryItemData;
export declare class StaffDirectoryItemsParams<ValueT extends StaffValueType = StaffValueType> extends DirectoryBaseParams<ValueT, StaffNodeType, ItemT> {
    standardCssClass?: string;
    /** Формат отображения информации о выбранном сотруднике в контроле. */
    /** @covered */
    employeeViewMode?: GenModels.EmployeeViewMode;
    /** Формат отображения информации о выбранном сотруднике во всплывающей подсказке. */
    employeeTipMode?: GenModels.PartnerTipModeItems;
    /** Виды элементов справочника, доступные для выбора. */
    itemTypes?: GenModels.DirectoryDataType;
    enabledAreas?: GenModels.DirectoryDataType;
    /** Доступен ли выбор нескольких значений. */
    /** @covered */
    multipleSelection?: boolean;
    /** Доступен ли выбор из списка последних. */
    enableFavorites?: boolean;
    /** Ключ для хранения последних выбранных. Если не задан, то как ключ используется структура привязки к данным. */
    favoritesKey?: string;
    /** Отображать ли пиктограммы типа строки исполнителя. */
    /** @covered */
    showIcons?: boolean;
    /** Доступность узлов и элементов для выбора из справочника. */
    selectingNodesMode?: DirectorySelectingMode;
    onInputClick?: () => void;
    outsideInputClick?: () => void;
    displayIcon?: boolean;
    popoverOpen?: boolean;
    /** Сохранять разметку при изменении значения */
    saveOnChangeValue?: boolean;
    selectedItem?: ItemT;
    /**
     * Событие, возникающее перед выполнением поиска записей на сервере. В обработчике события можно изменить параметры запроса.
     * Если в обработчике задать значение result, то запрос на сервер выполнен не будет.
     */
    searchResultsLoading?: CancelableApiEvent<IStaffDataLoadingEventArgs>;
    /** Событие, возникающее после выполнения поиска записей на сервере. В обработчике события можно изменить возвращенные данные. */
    searchResultsLoaded?: BasicApiEvent<IStaffDataLoadingEventArgs>;
    /** События возникает при добавлении сотрудника. */
    /** @covered */
    itemAdding?: CancelableApiEvent<ValueT>;
    /** События возникает после добавления сотрудника. */
    /** @covered */
    itemAdded?: BasicApiEvent<ValueT>;
    /** События возникает при удалении сотрудника из списка. */
    /** @covered */
    itemRemoving?: CancelableApiEvent<ValueT>;
    /** События возникает после удаления сотрудника из списка. */
    /** @covered */
    itemRemoved?: BasicApiEvent<ValueT>;
    services?: $StaffDirectoryItemsServices;
}
export declare type StaffDirectoryItemsSingle = StaffDirectoryItems<ItemT>;
export declare type StaffDirectoryItemsMultiple = StaffDirectoryItems<ItemT[]>;
export declare class StaffDirectoryItems<ValueT extends StaffValueType = StaffValueType> extends DirectoryBase<ValueT, StaffNodeType, ItemT, StaffDirectoryItemsParams<ValueT>, StaffDirectoryItemsState<ValueT>> {
    /** @internal */
    protected createParams(): StaffDirectoryItemsParams<ValueT>;
    /** @internal */
    protected createImpl(): StaffDirectoryItemsImpl;
    static ControlTypeName: string;
    protected getServices(): $StaffDirectoryItemsServices;
    /** Сохраняет выбранные значения в списке избранных. */
    updateFavorites(): Promise<void>;
    private set staffDataSource(value);
    private set predefinedFilterBinding(value);
    private set binding(value);
    private set defaultEmployeeBinding(value);
    get inputChanged(): 
import("C:/Dev/WebCDev/Bin/TypeScriptDefinitions/System/Events/SimpleEvent").SimpleEvent<string>;
    /** @covered */
    get inputText(): string;
    /** @covered */
    set inputText(val: string);
    /** Удаляет выбранное значение. */
    /** @covered */
    removeItem(item?: ItemT): Promise<void>;
    /** Добавляет значение. */
    /** @covered */
    addItem(item: ItemT): Promise<void>;
    setParamValue(paramName: string, value: any, initial: boolean): void;
    /** Показывает окно справочника. */
    /** @covered */
    showDictionary(): Promise<IStaffDirectoryItemsDialog>;
    /** Скрывает окно справочника. */
    /** @covered */
    hideDictionary(): Promise<void>;
    protected shouldSaveEditInPlaceValue(): boolean;
    onSaved(): Promise<void>;
    /** @internal */
    protected getBindings(): IBindingResult<any>[];
}
export {};
