import { BaseRazorControl, BaseRazorControlParams, BaseRazorControlState } from "@docsvision/webclient/Legacy/BaseRazorControl";
import { TaskGroupCardCreatePerformers } from "@docsvision/webclient/Legacy/TaskGroupCardCreatePerformers";
import { IBindingResult } from "@docsvision/webclient/System/IBindingResult";
import { IValidationParams } from '@docsvision/webclient/System/IValidationParams';
import { IValidationResult } from '@docsvision/webclient/System/IValidationResult';
import { $BusinessCalendarController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { $DeviceType } from "@docsvision/webclient/StandardServices";
/** @internal */
export declare class GroupTaskCardPerformersPanelParams extends BaseRazorControlParams {
    /** Является ли обязательным заполнение данного поля. */
    required?: boolean;
    defaultCalendarId?: string;
    useBusinessCalendar?: boolean;
    autoDurationsRecalculation?: boolean;
    services?: $BusinessCalendarController & $DeviceType;
}
/** @internal */
export interface GroupTaskCardPerformersPanelState extends BaseRazorControlState, GroupTaskCardPerformersPanelParams {
    performersLogic: TaskGroupCardCreatePerformers;
}
/** @internal */
export declare class GroupTaskCardPerformersPanelRazorControl extends BaseRazorControl<GroupTaskCardPerformersPanelParams, GroupTaskCardPerformersPanelState> {
    protected createParams(): GroupTaskCardPerformersPanelParams;
    /** @internal */
    protected set useBusinessCalendarBinding(biding: IBindingResult<boolean>);
    /** @internal */
    protected set autoDurationsRecalculation(val: boolean);
    setTaskGroupInterval(startDate: Date, endDate: Date, duration: number): void;
    mountRazorContent(razorContainer: HTMLElement): void;
    validate(params: IValidationParams): IValidationResult[];
    protected getBindings(): IBindingResult<any>[];
}
