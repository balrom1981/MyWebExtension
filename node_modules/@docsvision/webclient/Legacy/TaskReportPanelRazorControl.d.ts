/// <reference types="react" />
import { TaskReportPanel } from "@docsvision/webclient/Legacy/TaskCardView";
import { BaseRazorControl, BaseRazorControlParams } from "@docsvision/webclient/Legacy/BaseRazorControl";
import { BaseControlState } from "@docsvision/webclient/System/BaseControl";
import { $Layout } from "@docsvision/webclient/System/$Layout";
import { RequestHelper } from '@docsvision/webclient/System/RequestHelper';
import { $LayoutCardController, $LayoutController, $LayoutFileApiController } from '@docsvision/webclient/Generated/DocsVision.WebClient.Controllers';
import { $CardId, $LayoutInfo } from '@docsvision/webclient/System/LayoutServices';
import { BasicApiEvent } from "@docsvision/webclient/System/ApiEvent";
import { IEventArgs } from "@docsvision/webclient/System/IEventArgs";
import { $RealtimeCommunicationService } from "@docsvision/webclient/System/$RealtimeCommunicationService";
import { ICardOpenedByWebDavMessage } from "@docsvision/webclient/BackOffice/FileListControlImpl";
import { IRealTimeCommunicationMessage } from "@docsvision/webclient/System/IRealTimeCommunicationMessage";
/** @internal */
export interface TaskReportPanelRazorControlState extends TaskReportPanelRazorControlParams, BaseControlState {
    loading: boolean;
    reportPanel: TaskReportPanel;
    requestHelper: RequestHelper;
    test: boolean;
    shadowClass: boolean;
}
export declare class TaskReportPanelRazorControlParams extends BaseRazorControlParams {
    shadowClass?: boolean;
    /** Событие возникает при сохранении файла в WebDAV. */
    fileSaveByWebDAV?: BasicApiEvent<IEventArgs>;
    services?: $LayoutCardController & $Layout & $LayoutController & $LayoutInfo & $CardId & $LayoutFileApiController & $RealtimeCommunicationService;
}
/** @internal */
export declare class TaskReportPanelRazorControl extends BaseRazorControl<TaskReportPanelRazorControlParams, TaskReportPanelRazorControlState> {
    addShadowClass: boolean;
    addHandlerToTaskCardReportPanel: boolean;
    constructor(props: TaskReportPanelRazorControlParams);
    protected createParams(): BaseRazorControlParams;
    loadReportsAsync(razorContainer: HTMLElement): Promise<void>;
    addHandlerToDisclosure: (control: HTMLElement, addOnlyShadowClass?: boolean) => void;
    findControlsForUpdateDisclosure: (addOnlyShadowClass?: boolean) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    protected onDocumentChangedAndSavedByWebdav: (msg: IRealTimeCommunicationMessage<ICardOpenedByWebDavMessage>) => void;
    componentDidUpdate(prevProps: any): void;
    mountRazorContent(razorContainer: HTMLElement): void;
    getDisclosureHeader(): string;
    renderControl(): JSX.Element;
}
