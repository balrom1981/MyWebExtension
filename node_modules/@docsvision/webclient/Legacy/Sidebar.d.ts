import { GenModels } from "@docsvision/webclient/Generated/DocsVision.WebClient.Models";
import { ISidebar } from "@docsvision/webclient/Legacy/$Sidebar";
import { $DeviceType } from "@docsvision/webclient/StandardServices";
import { BasicApiEvent } from "@docsvision/webclient/System/ApiEvent";
import { $LocalStorage } from "@docsvision/webclient/System/$LocalStorage";
import { $ContentElementProvider } from '@docsvision/webclient/Platform/$ContentElementProvider';
import { WebFrameMainMenuContainer } from '@docsvision/webclient/Platform/WebFrameMainMenuContainer';
import "../../Polyfills/ie-polyfill";
/** @internal */
export declare class Sidebar implements ISidebar {
    private services;
    private mainMenuLayoutPosition;
    private mainMenuElementId;
    private WebFrameMainMenuContainer;
    private get content();
    private get model();
    private isPinned;
    private maxResizeWidth;
    private minResizeWidth;
    private deviceType;
    private isBusy;
    private forceCloseAfterTimeout;
    private traceProvider;
    private layoutPreloading;
    toggle?: BasicApiEvent<boolean>;
    switchPin?: BasicApiEvent<boolean>;
    constructor(services: $DeviceType & $LocalStorage & $ContentElementProvider, control?: WebFrameMainMenuContainer);
    get IsClosed(): boolean;
    get CanResize(): boolean;
    get IsPinned(): boolean;
    set IsPinned(value: boolean);
    get DeviceType(): GenModels.DeviceType;
    set DeviceType(value: GenModels.DeviceType);
    get Model(): HTMLElement;
    get MinResizeWidth(): number;
    get MaxResizeWidth(): number;
    close(showOnRightSide?: boolean): void;
    open(showOnRightSide?: boolean): void;
    SaveSettings(): void;
    LoadSettings(): void;
    ResetSettings(): void;
    PreloadLayout(): Promise<GenModels.LayoutViewModel>;
    LoadLayout(): Promise<any>;
}
