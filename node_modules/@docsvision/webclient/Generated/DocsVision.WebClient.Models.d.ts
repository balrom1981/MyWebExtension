export declare namespace GenModels {
    interface ContractInfoModel {
        /**
         * Partner organization
         */
        partnerOrganization: GenModels.DepartmentModel;
        /**
         * Contact employee info
         */
        partnerContactPerson: GenModels.EmployeeDataModel;
        /**
         * Our organization
         */
        organization: GenModels.DepartmentModel;
        /**
         * Our responsible person
         */
        responsible: GenModels.EmployeeModel;
    }
}
export declare namespace GenModels {
    interface IDirectoryItemData {
        /**
         * Entity identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface DepartmentModel extends GenModels.IDirectoryItemData {
        /**
         * Department id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Department name
         */
        name: string;
        /**
         * Department full name
         */
        fullName: string;
        /**
         * Department type
         */
        departmentType: GenModels.DepartmentType;
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface EmployeeDataModel extends GenModels.IDirectoryItemData {
        id: string;
        isCurrent: boolean;
        displayName: string;
        firstName: string;
        lastName: string;
        middleName: string;
        position: string;
        fieldPath: string;
        unitId: string;
        pathInDirectory: Array<GenModels.DepartmentExtendedModel>;
        dataType: GenModels.DirectoryDataType;
        status: GenModels.StaffEmployeeStatus;
    }
}
export declare namespace GenModels {
    interface DepartmentExtendedModel extends GenModels.DepartmentModel {
        /**
         * Department email
         */
        email: string;
        /**
         * Department phone
         */
        phone: string;
    }
}
export declare namespace GenModels {
    interface EmployeeModel extends GenModels.IDirectoryItemData {
        /**
         * Unique identificator of employee
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Define if user is current
         */
        isCurrent: boolean;
        /**
         * Employee account name
         */
        accountName: string;
        /**
         * Employee display name
         */
        displayName: string;
        /**
         * Employee first name
         */
        firstName: string;
        /**
         * Employee last name
         */
        lastName: string;
        /**
         * Employee middle name
         */
        middleName: string;
        /**
         * Employee position
         */
        position: string;
        /**
         * Gets or sets security identifier
         *
         * @format datatype.uuid
         */
        sdid?: string;
        /**
         * Represents value indicating whether employee is favourite performer
         */
        isFavoritePerformer: boolean;
        /**
         * Gets or sets unit identifier
         *
         * @format datatype.uuid
         */
        unitId: string;
        /**
         * Email
         */
        email: string;
        /**
         * Gets or sets employee status
         */
        status: GenModels.StaffEmployeeStatus;
        /**
         * Name of department of employee
         */
        departmentName: string;
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface ContractDatesModel {
        /**
         * Date of contract begin
         *
         * @format datatype.datetime
         */
        dateFrom?: string;
        /**
         * Date of contract end
         *
         * @format datatype.datetime
         */
        dateTo?: string;
        /**
         * Contract card
         *
         * @format datatype.uuid
         */
        cardId: string;
    }
}
export declare namespace GenModels {
    interface ProlongateContractRequestModel {
        /**
         * Date of contract begin
         *
         * @format datatype.datetime
         */
        dateFrom: string;
        /**
         * Date of contract end
         *
         * @format datatype.datetime
         */
        dateTo: string;
        /**
         * Contract card id
         *
         * @format datatype.uuid
         */
        contractId: string;
        /**
         * Contract card id
         *
         * @format datatype.uuid
         */
        amendmentId: string;
    }
}
export declare namespace GenModels {
    interface ContractAgreementFillDatesModel {
        /**
         * Date of contract agreement
         *
         * @format datatype.datetime
         */
        reconciliationDate: string;
        /**
         * Date of contract signing
         *
         * @format datatype.datetime
         */
        signingDate: string;
        /**
         * Contract card id
         *
         * @format datatype.uuid
         */
        contractId: string;
        /**
         * Semantic of decision
         */
        decisionSemantics: GenModels.DecisionSemantics;
    }
}
export declare namespace GenModels {
    interface ContractFillDateModel {
        /**
         * Date of contract
         *
         * @format datatype.datetime
         */
        dateOfContract: string;
        /**
         * Contract card id
         *
         * @format datatype.uuid
         */
        contractId: string;
    }
}
export declare namespace GenModels {
    interface ContractFillSumInRubModel {
        /**
         * Sum in rub
         */
        sumInRub: number;
        /**
         * Contract card id
         *
         * @format datatype.uuid
         */
        contractId: string;
    }
}
export declare namespace GenModels {
    interface SettingsGraph {
        stageNodes: Array<GenModels.StageNode>;
        arrows: Array<GenModels.Arrow>;
    }
}
export declare namespace GenModels {
    interface StageNode {
        id: string;
        name: string;
        first: boolean;
        taskSendingMode: GenModels.StageTaskSendingMode;
        repeatMode: GenModels.StageRepeatMode;
        startConditionType: GenModels.ConditionType;
    }
}
export declare namespace GenModels {
    interface Arrow {
        decisionSemantics: GenModels.DecisionSemantics;
        sourceNode: GenModels.NodeReference;
        targetNode: GenModels.NodeReference;
    }
}
export declare namespace GenModels {
    interface NodeReference {
        id: string;
        nodeType: GenModels.NodeType;
    }
}
export declare namespace GenModels {
    interface BarcodeSearchRequestModel {
        /**
         * String value of Barcode
         */
        barcode: string;
    }
}
export declare namespace GenModels {
    interface BarcodeSearchResponseModel {
        /**
         * Card id to get info
         *
         * @format datatype.uuid
         */
        cardId?: string;
    }
}
export declare namespace GenModels {
    interface CalendarRequestModel {
        /**
         * Restrict result with specified year only
         */
        year?: number;
        /**
         * Restrict result with specified day only
         */
        day?: number;
    }
}
export declare namespace GenModels {
    interface CalendarYearSettings {
        /**
         * Year
         */
        year: number;
        /**
         * Value of business calendar EndTime
         */
        days: Array<GenModels.CalendarDaySettings>;
    }
}
export declare namespace GenModels {
    interface CalendarDaySettings {
        /**
         * Day number from beginning of the year
         */
        day: number;
        /**
         * Value of business calendar WorkTime
         */
        workTime: GenModels.CalendarWorkTime;
    }
}
export declare namespace GenModels {
    interface CalendarWorkTime {
        /**
         * Value of business calendar StartTime in milliseconds from 0:00
         */
        begin: number;
        /**
         * Value of business calendar EndTime in milliseconds from 0:00
         */
        end: number;
    }
}
export declare namespace GenModels {
    interface CalendarDurationRequestModel {
        /**
         * What calendar use to calculate value
         */
        calendarSources: Array<GenModels.BusinessCalendarSource>;
        /**
         * Date of the start of the period
         *
         * @format datatype.datetime
         */
        startDate: string;
        /**
         * Date of the end of the period
         *
         * @format datatype.datetime
         */
        endDate: string;
    }
}
export declare namespace GenModels {
    interface BusinessCalendarSource {
        /**
         * Employee or unit identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Type of {@link GenModels}
         */
        type: GenModels.BusinessCalendarSourceType;
    }
}
export declare namespace GenModels {
    interface CalendarStartDateRequestModel {
        /**
         * What calendar use to calculate value
         */
        calendarSources: Array<GenModels.BusinessCalendarSource>;
        /**
         * Date of the end of the period
         *
         * @format datatype.datetime
         */
        endDate: string;
        /**
         * Duration of the period
         */
        duration: number;
    }
}
export declare namespace GenModels {
    interface CalendarEndDateRequestModel {
        /**
         * What calendar use to calculate value
         */
        calendarSources: Array<GenModels.BusinessCalendarSource>;
        /**
         * Date of the start of the period
         *
         * @format datatype.datetime
         */
        startDate: string;
        /**
         * Duration of the period
         */
        duration: number;
    }
}
export declare namespace GenModels {
    interface IntervalsCalculationRequestModel {
        /**
         * Start date for entry task group
         *
         * @format datatype.datetime
         */
        totalStartDate: string;
        /**
         * End date for entry task group
         *
         * @format datatype.datetime
         */
        totalEndDate: string;
        /**
         * Duration for entry task group.
         */
        totalDuration: number;
        /**
         * Default calendar id to calculate intervals (will be used if employee has no calendar configured). Empty guid to use system calendar.
         *
         * @format datatype.uuid
         */
        defaultCalendarId: string;
        /**
         * Execution type
         */
        executionType: GenModels.ExecutionType;
        /**
         * Existing intervals with specified durations, but without start/end dates.
         */
        intervals: Array<GenModels.TaskGroupInterval>;
    }
}
export declare namespace GenModels {
    interface TaskGroupInterval {
        /**
         * Display name of the performer employee.
         */
        performerName: string;
        /**
         * Performer id
         *
         * @format datatype.uuid
         */
        performerId: string;
        /**
         * Task description
         */
        description: string;
        /**
         * Does performer is responsible for entry task group.
         */
        isResponsible: boolean;
        /**
         * Task start date
         *
         * @format datatype.datetime
         */
        startDate?: string;
        /**
         * Task end date.
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Task duration
         */
        duration?: number;
        /**
         * Task order in task group.
         */
        order: number;
    }
}
export declare namespace GenModels {
    interface GetFieldValueRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Section id
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Field alias
         */
        fieldAlias: string;
        /**
         * Remove dangerous code from HTML value.
         */
        sanitizeHtml?: boolean;
    }
}
export declare namespace GenModels {
    interface CardKindModel {
        /**
         * Gets card kind name
         */
        cardKindName: string;
        /**
         * Gets card kind name with parent kinds
         */
        cardKindFullName: string;
        /**
         * Gets card kind identifier
         *
         * @format datatype.uuid
         */
        cardKindId?: string;
        /**
         * Gets loading error
         */
        loadingError: string;
    }
}
export declare namespace GenModels {
    interface CollectionRequestModelOf<T> {
        /**
         * Collection of entities
         */
        collection: Array<T>;
    }
}
export declare namespace GenModels {
    interface SearchRequestModel {
        /**
         * Search query to execute
         *
         * @format datatype.uuid
         */
        searchQueryId: string;
        /**
         * Search query parameters values
         */
        parameters: Array<GenModels.SearchParameter>;
        /**
         * Use paging
         */
        usePaging: boolean;
        /**
         * Zero-based page index
         */
        page: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Identifier of the previous page response, when iterating over pages
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Card types to load.
         */
        allowedCardTypes: Array<string>;
    }
}
export declare namespace GenModels {
    interface SearchParameter {
        /**
         * Gets or sets parameter name
         */
        name: string;
        /**
         * Gets or sets parameter value
         */
        value: string;
        /**
         * Does parameter included in search
         */
        enabled: boolean;
    }
}
export declare namespace GenModels {
    interface SearchResponseModel {
        /**
         * Identifier of the search session for performing pagination.
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Found cards
         */
        cards: Array<GenModels.DigestRow>;
    }
}
export declare namespace GenModels {
    interface DigestRow {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Card type id
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Card description
         */
        description: string;
        /**
         * Card was read by user
         */
        wasRead: boolean;
        /**
         * Time of card creation
         *
         * @format datatype.datetime
         */
        creationDateTime: string;
        /**
         * Time of the last card change
         *
         * @format datatype.datetime
         */
        changeDateTime: string;
    }
}
export declare namespace GenModels {
    interface SearchRequestModelDiagram extends GenModels.SearchRequestModel {
        /**
         * ViewId for search
         */
        viewId: string;
        /**
         * Primary Column that we try to find in cards
         */
        columnPrimary: string;
        /**
         * Secondary Column that we try to find in cards
         */
        columnSecondary: string;
    }
}
export declare namespace GenModels {
    interface SearchResponseModelDiagram {
        /**
         * Identifier of the search session for performing pagination.
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Found cards
         */
        cards: Array<GenModels.DiagramRow>;
    }
}
export declare namespace GenModels {
    interface DiagramRow {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * First column value
         */
        columnPrimary: any;
        /**
         * Second column value
         */
        columnSecondary: any;
    }
}
export declare namespace GenModels {
    interface GetFolderCardsRequest {
        queryViewRequest: GenModels.QueryViewRequest;
        allowedCardTypes: Array<string>;
    }
}
export declare namespace GenModels {
    interface QueryViewRequest {
        /**
         * Gets or sets grid user settings data
         */
        gridUserSettings: GenModels.GridUserSettingsData;
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Gets or sets a view identifier
         *
         * @format datatype.uuid
         */
        viewId?: string;
        /**
         * Gets or sets whether save grid user settings data
         */
        saveGridUserSettings: boolean;
        /**
         * Folder setting - seconds to auto refresh. Zero value indicates, that autorefresh disabled.
         */
        folderRefreshTimeout: number;
        /**
         * Data for unread counters calculation (or not only unread counters?)
         */
        forceVirtualFolderSearch: boolean;
        /**
         * Gets or sets search identifier
         *
         * @format datatype.uuid
         */
        searchId: string;
        /**
         * Gets or sets whether view should get cached data or refreshed
         */
        refreshView: boolean;
        /**
         * Gets or sets old search results store identifier
         *
         * @format datatype.uuid
         */
        oldStoreId: string;
        /**
         * Custom page size for this specific query.
         */
        pageSize?: number;
        /**
         * Page number (if no GridUserSettings provided)
         */
        pageNumber?: number;
        /**
         * Location name, representing folder content. Default value is "DV.Folder".
         */
        locationName: string;
        /**
         * Gets or sets base cursor ID
         *
         * @format datatype.uuid
         */
        baseCursorId: string;
    }
}
export declare namespace GenModels {
    interface GridUserSettingsData {
        /**
         * Gets or sets a list with user settings of each column in folder view for Grid Presentation
         */
        columns: Array<GenModels.GridUserSettingsColumn>;
        /**
         * Gets or sets a list with user setting of each column in folder view for List Presentation
         */
        listColumns: Array<GenModels.GridUserSettingsColumn>;
        /**
         * Gets or sets grid view filters
         */
        filters: Array<GenModels.QueryFilterItem>;
        /**
         * Gets or sets grid view grouping
         */
        grouping: Array<GenModels.GridUserSettingsGroupColumn>;
        /**
         * Gets or sets a view mode
         */
        viewMode: GenModels.GridViewMode;
        /**
         * Gets or sets an attribute text filter
         */
        searchText: string;
        /**
         * Gets or sets search context option
         */
        searchContextOption: GenModels.SearchContextOption;
        /**
         * Gets or sets a page number
         */
        pageNumber: number;
        /**
         * Gets or sets sorted column name
         */
        sortedColumnName: string;
        /**
         * Gets or sets value indicated whether is descending sort order
         */
        isDescending: boolean;
        /**
         * User requested view without sorting.
         */
        disableSorting: boolean;
        /**
         * Grid aggregate search value
         */
        aggregates: Array<GenModels.AggregateFilterItem>;
        /**
         * Gets or sets whether used default grouping
         */
        useDefaultGrouping: boolean;
        /**
         * Gets or sets table presentation mode
         */
        tablePresentation: GenModels.TablePresentation;
        /**
         * Gets or sets column width mode
         */
        columnWidthMode: GenModels.ColumnWidthMode;
    }
}
export declare namespace GenModels {
    interface GridUserSettingsColumn {
        /**
         * Gets or sets column name
         */
        name: string;
        /**
         * Gets or sets width of a column in pixels
         */
        width: number;
        /**
         * Gets or sets visibility of a column
         */
        visible?: boolean;
        /**
         * Gets or sets order of a column
         */
        order: number;
    }
}
export declare namespace GenModels {
    interface QueryFilterItem {
        /**
         * Gets or sets filtered column name
         */
        name: string;
        /**
         * Gets or sets values
         */
        values: Array<string>;
        /**
         * Gets or sets operation
         */
        operation: GenModels.FilterOperation;
        /**
         * Gets or sets mode
         */
        mode: GenModels.FilterMode;
    }
}
export declare namespace GenModels {
    interface GridUserSettingsGroupColumn {
        /**
         * Column name
         */
        name: string;
        /**
         * Grouping level
         */
        level: number;
        /**
         * Sorting by descending
         */
        isDescending: boolean;
        /**
         * Active value
         */
        activeValue: string;
    }
}
export declare namespace GenModels {
    interface AggregateFilterItem {
        /**
         * Gets or sets aggregation alias
         */
        aggregationAlias: string;
        /**
         * Gets or sets selected value
         */
        stringValue: string;
        /**
         * Gets or sets range values
         */
        rangeValues: GenModels.AggregateRangeValues;
        /**
         * Gets or sets values count
         */
        count: number;
    }
}
export declare namespace GenModels {
    interface AggregateRangeValues {
        /**
         * From value
         */
        from: string;
        /**
         * To value
         */
        to: string;
    }
}
export declare namespace GenModels {
    interface SearchPresentationRequestModel {
        /**
         * Card list found be search
         */
        cards: Array<GenModels.DigestRow>;
        /**
         * Use paging
         */
        extensionName: string;
        /**
         * Args for Layout presentation extension.
         */
        layoutExtensionArgs: GenModels.LayoutCardsPresentationExtensionArgs;
        /**
         * Report id for Report presentation extension.
         *
         * @format datatype.uuid
         */
        reportId: string;
    }
}
export declare namespace GenModels {
    interface LayoutCardsPresentationExtensionArgs {
        deviceType: GenModels.DeviceType;
        parentLayoutIds: Array<string>;
    }
}
export declare namespace GenModels {
    interface CardPresentation {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Card description string
         */
        description: string;
        /**
         * Card type, if known.
         *
         * @format datatype.uuid
         */
        typeId?: string;
        /**
         * Card kind, if known.
         *
         * @format datatype.uuid
         */
        kindId?: string;
        /**
         * String, indicating the type of the card data and the type of {@link GenModels} object.
         */
        presentationType: string;
        /**
         * Additional card data, such as card layout.
         */
        additionalInfo: any;
    }
}
export declare namespace GenModels {
    interface CommentsRequestModel {
        dataSourceInfo: GenModels.CommentsDataSourceInfoModel;
        maxCount: number;
    }
}
export declare namespace GenModels {
    interface CommentsDataSourceInfoModel {
        /**
         * Gets or sets card identifier
         *
         * @format datatype.uuid
         */
        dataSourceCardId: string;
        /**
         * Gets or sets section identifier
         *
         * @format datatype.uuid
         */
        dataSourceSectionId?: string;
        /**
         * Gets or sets row identifier
         *
         * @format datatype.uuid
         */
        dataSourceRowId?: string;
        /**
         * Gets or sets comments section
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Gets or sets author field alias
         */
        authorFieldAlias: string;
        /**
         * Gets or sets date field alias
         */
        dateFieldAlias: string;
        /**
         * Gets or sets text field alias
         */
        textFieldAlias: string;
        /**
         * Comment operation
         *
         * @format datatype.uuid
         */
        commentEditOperation: string;
        /**
         * Comment edit operation
         *
         * @format datatype.uuid
         */
        editAnyCommentEditOperation: string;
        /**
         * Comment edit operation
         *
         * @format datatype.uuid
         */
        editOwnCommentEditOperation: string;
    }
}
export declare namespace GenModels {
    interface CommentsModel {
        /**
         * Gets or sets comments list
         */
        comments: Array<GenModels.Comment>;
        /**
         * Gets or sets comments data source
         */
        dataSourceInfo: GenModels.CommentsDataSourceInfoModel;
        /**
         * Gets or sets all comments count
         */
        allCommentsCount: number;
    }
}
export declare namespace GenModels {
    interface Comment {
        /**
         * Gets or sets identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets employee identifier
         *
         * @format datatype.uuid
         */
        employeeId?: string;
        /**
         * Gets or sets employee display name
         */
        employeeDisplayName: string;
        /**
         * Gets or sets date
         *
         * @format datatype.datetime
         */
        date?: string;
        /**
         * Gets or sets text
         */
        text: string;
    }
}
export declare namespace GenModels {
    interface AddCommentRequestModel {
        dataSourceInfo: GenModels.CommentsDataSourceInfoModel;
        cardId: string;
        text: string;
    }
}
export declare namespace GenModels {
    interface RestoreCommentModel {
        dataSourceInfo: GenModels.CommentsDataSourceInfoModel;
        cardId: string;
        text: string;
        employeeId: string;
        date?: string;
    }
}
export declare namespace GenModels {
    interface UpdateCommentRequestModel {
        dataSourceInfo: GenModels.CommentsDataSourceInfoModel;
        cardId: string;
        commentId: string;
        text: string;
    }
}
export declare namespace GenModels {
    interface DeleteCommentRequestModel {
        dataSourceInfo: GenModels.CommentsDataSourceInfoModel;
        cardId: string;
        commentId: string;
    }
}
export declare namespace GenModels {
    interface UploadToDssRequest {
        url: string;
        authorization: string;
        /**
         * Parent document card id
         *
         * @format datatype.uuid
         */
        documentId: string;
        /**
         * Signature parts
         */
        parts: Array<GenModels.DocumentSignaturePartInfo>;
    }
}
export declare namespace GenModels {
    interface DocumentSignaturePartInfo {
        /**
         * What upload to DSS
         */
        partType: GenModels.SignatureItemType;
        /**
         * FileManager file id to upload
         *
         * @format datatype.uuid
         */
        fileId?: string;
    }
}
export declare namespace GenModels {
    interface DssRequestBody {
        url: string;
        authorization: string;
        body: string;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerRowModel {
        /**
         * Row id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Row name
         */
        name: string;
        /**
         * Row description
         */
        description: string;
        /**
         * Row parent id
         *
         * @format datatype.uuid
         */
        parentId: string;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerNodeModel {
        /**
         * Node id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Node name
         */
        name: string;
        /**
         * Node description
         */
        description: string;
        /**
         * Node parent id
         *
         * @format datatype.uuid
         */
        parentId: string;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerQuery {
        /**
         * Search Area
         */
        searchArea: GenModels.DirectoryDesignerSearchArea;
        /**
         * Search Text
         */
        searchText: string;
        /**
         * Node Id
         *
         * @format datatype.uuid
         */
        nodeId: string;
        /**
         * Pagination
         */
        pagination: GenModels.Pagination;
        /**
         * Need return build path flag
         */
        needBuildPath: boolean;
    }
}
export declare namespace GenModels {
    interface Pagination {
        /**
         * How many records client already have
         */
        skip?: number;
        /**
         * How many records client want to receive
         */
        maxCount?: number;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerLoadResponse {
        /**
         * Items
         */
        items: Array<GenModels.DirectoryDesignerItem>;
        /**
         * Has more
         */
        hasMore: boolean;
        /**
         * Directory timestamp
         */
        directoryTimestamp: number;
        /**
         * Total count of items
         */
        totalItemsCount?: number;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerItem extends GenModels.IDirectoryItemData {
        /**
         * Node Type
         */
        type: GenModels.DirectoryDesignerTreeNodeType;
        /**
         * Has Children
         */
        hasChildren: boolean;
        /**
         * Id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Parent Id
         *
         * @format datatype.uuid
         */
        parentId: string;
        /**
         * Name
         */
        name: string;
        /**
         * Description
         */
        description: string;
        data: any;
        dataType: GenModels.DirectoryDataType;
        path: Array<GenModels.DirectoryDesignerItem>;
        /**
         * Partner search info
         */
        searchInfo: GenModels.SearchInfo;
    }
}
export declare namespace GenModels {
    interface SearchInfo {
        /**
         * Is matched
         */
        matched: boolean;
        /**
         * Matched field name
         */
        matchedFieldName: string;
        /**
         * Matched field value
         */
        matchedFieldValue: string;
    }
}
export declare namespace GenModels {
    interface DisableCardExRequestModel {
        /**
         * Disabled card ID
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Disabled card reasons
         */
        reason: GenModels.Reason;
    }
}
export declare namespace GenModels {
    interface EmployeeStatusModel extends GenModels.EmployeeDataModel {
        /**
         * Return true whether user participate in Security Group for aggregates
         */
        isAggregationUser: boolean;
    }
}
export declare namespace GenModels {
    interface ExcelReportRequest {
        /**
         * Параметры папки
         */
        parameters: string;
        /**
         * ID экземпляра в кэше
         *
         * @format datatype.uuid
         */
        instanceId?: string;
        /**
         * ID папки
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Название папки
         */
        folderName: string;
        /**
         * ID поиска
         *
         * @format datatype.uuid
         */
        searchId: string;
        /**
         * ID представления
         *
         * @format datatype.uuid
         */
        viewId: string;
        /**
         * Сортировочная колонка
         */
        sortedColumnName: string;
        /**
         * В обратно поряке
         */
        isDescending: boolean;
        /**
         * Опции поиска
         */
        searchContextOption: GenModels.SearchContextOption;
        /**
         * @format datatype.uuid
         */
        oldStoreId: string;
    }
}
export declare namespace GenModels {
    interface FolderTypeInfo {
        /**
         * Gets or sets folder type identifier
         *
         * @format datatype.uuid
         */
        folderTypeId: string;
        /**
         * Gets or sets parent folder identifier
         *
         * @format datatype.uuid
         */
        parentFolderTypeId: string;
        /**
         * Gets or sets default view identifier
         *
         * @format datatype.uuid
         */
        defaultViewId: string;
        /**
         * Gets or sets folder type name
         */
        name: string;
        /**
         * Gets or sets whether to highlight unread cards
         */
        highlightUnreadCards: boolean;
        /**
         * Gets or sets child folder types
         */
        children: Array<GenModels.FolderTypeInfo>;
    }
}
export declare namespace GenModels {
    interface CardListRequestModel {
        /**
         * Request model for folder view
         */
        folderViewRequest: GenModels.QueryViewRequest;
        /**
         * Search params
         */
        parameters: Array<GenModels.SearchParameter>;
        /**
         * Instance id
         *
         * @format datatype.uuid
         */
        instanceId?: string;
        /**
         * Device type
         */
        deviceType: GenModels.DeviceType;
        /**
         * Need use old grid.
         */
        useOldGrid?: boolean;
    }
}
export declare namespace GenModels {
    interface CardListViewModel {
        /**
         * Card list header text
         */
        headerText: string;
        /**
         * Card list parent header text
         */
        parentHeaderText: string;
        /**
         * Current view name
         */
        currentViewName: string;
        /**
         * Default folder view style
         */
        defaultStyle: GenModels.DvFolderStyles;
        /**
         * Url for DefaultStyle.FolderURL, when folder displayed as web page.
         */
        folderUrl: string;
        /**
         * Grid model
         */
        gridModel: GenModels.GridViewModel;
        /**
         * Are some batch operations available for the folder.
         */
        hasBatchOperations: boolean;
        /**
         * Gets or sets grid layout
         */
        gridLayout: GenModels.LayoutViewModel;
        /**
         * Gets or sets search parameters layout
         */
        searchParametersLayout: GenModels.LayoutViewModel;
        /**
         * Current session id.
         *
         * @format datatype.uuid
         */
        fullTextSearchSessionId: string;
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Gets or sets view identifier
         *
         * @format datatype.uuid
         */
        viewId: string;
        /**
         * Gets or sets search identifier
         *
         * @format datatype.uuid
         */
        searchId: string;
        /**
         * Gets or sets instanceId
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Gets or sets grid user settings data
         */
        gridUserSettings: GenModels.GridUserSettingsData;
    }
}
export declare namespace GenModels {
    interface GridViewModel {
        instanceId: string;
        cursorId: string;
        pageSize: number;
        modelSize: number;
        isAllPagesLoaded: boolean;
        isUnknownModelSize: boolean;
        isFilterAllowed: boolean;
        isPagingMode: boolean;
        isLastPage: boolean;
        markUnread: boolean;
        checkCardAccess: boolean;
        allowRowResize: boolean;
        sortingKey: string;
        columns: Array<GenModels.GridColumn>;
        rows: Array<GenModels.GridRow>;
        request: GenModels.QueryViewRequest;
        fullTextSearchSessionId: string;
        gridUserSettings: GenModels.GridUserSettingsData;
        isGroupingAllowed: boolean;
        showGroupingColumns: boolean;
        baseCursorRowCount: number;
        hasDefaultGrouping: boolean;
        keyColumnName: string;
        sortingColumns: Array<GenModels.GridSorting>;
        groupingColumnNames: Array<GenModels.GridGrouping>;
    }
}
export declare namespace GenModels {
    interface GridColumn {
        displayName: string;
        sorting: boolean;
        cssClassName: string;
        type: GenModels.ColumnType;
        sortDirection?: GenModels.SortDirection;
        dateFormat: string;
        isDefaultSort: boolean;
        name: string;
        isSystemColumn: boolean;
        isHiddenColumn: boolean;
        displayAsHTML: boolean;
        unresizable: boolean;
        width: string;
        order: number;
        isFilteringAllowed: boolean;
        isGroupingAllowed: boolean;
        evalRow: any;
        getGridFieldData: any;
    }
}
export declare namespace GenModels {
    interface GridRow {
        params: Array<GenModels.GridRowParam>;
        backColor: string;
        foreColor: string;
        wasRead: boolean;
        isArchived: boolean;
    }
}
export declare namespace GenModels {
    interface GridRowParam {
        columnName: string;
        value: any;
        rawValue: any;
    }
}
export declare namespace GenModels {
    interface GridSorting {
        columnName: string;
        order: number;
        ascending: boolean;
    }
}
export declare namespace GenModels {
    interface GridGrouping {
        columnName: string;
        ascending: boolean;
        showExpanded: boolean;
    }
}
export declare namespace GenModels {
    interface ILayoutViewModel {
        /**
         * Gets or sets a layout model
         */
        layoutModel: GenModels.LayoutModel;
    }
}
export declare namespace GenModels {
    interface ControlModel {
        /**
         * Gets or sets control type name
         */
        controlTypeName: string;
        /**
         * Gets or sets whether control will be loaded later by special request
         */
        isAsync?: boolean;
        /**
         * Gets control properties
         */
        properties: {
            [name: string]: any;
        };
        /**
         * Gets control children
         */
        children: Array<GenModels.ControlModel>;
    }
}
export declare namespace GenModels {
    interface LayoutModel extends GenModels.ControlModel {
        /**
         * Gets or sets layout info model
         */
        layoutInfo: GenModels.LayoutInfoModel;
        /**
         * Gets or creates extended layouts info
         */
        extendedDataSourceInfos: Array<GenModels.ExtendedDataSourceInfoModel>;
    }
}
export declare namespace GenModels {
    interface LayoutInfoModel {
        /**
         * Gets or sets layout type
         */
        type: GenModels.LayoutType;
        /**
         * Gets or sets action
         */
        action: GenModels.LayoutAction;
        /**
         * Gets or sets layout mode
         *
         * @format datatype.uuid
         */
        layoutMode?: string;
        /**
         * Gets or sets device type
         */
        deviceType: GenModels.DeviceType;
        /**
         * Gets or sets locale identifier
         */
        localeId: number;
        /**
         * Gets or sets layout name
         */
        name: string;
        /**
         * Gets or sets layout identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets layout instance identifier
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Gets operation
         */
        operations: Array<GenModels.OperationModel>;
        /**
         * Layout load options
         */
        layoutParams: Array<GenModels.LayoutParamModel>;
    }
}
export declare namespace GenModels {
    interface OperationModel {
        /**
         * Gets operation identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets operation identifier
         *
         * @format datatype.uuid
         */
        builtInId?: string;
        /**
         * Gets operation caption
         */
        caption: string;
        /**
         * Gets value indicating whether operation is available
         */
        available: boolean;
        /**
         * Gets alias
         */
        alias: string;
    }
}
export declare namespace GenModels {
    interface LayoutParamModel {
        /**
         * key
         */
        key: string;
        /**
         * value
         */
        value: string;
    }
}
export declare namespace GenModels {
    interface ExtendedDataSourceInfoModel {
        /**
         * Gets or sets extended layouts info identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets timestamp card identifier
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Gets or sets timestamp
         */
        timestamp: number;
    }
}
export declare namespace GenModels {
    interface LayoutViewModel extends GenModels.ILayoutViewModel {
        layoutModel: GenModels.LayoutModel;
    }
}
export declare namespace GenModels {
    interface FolderIdentityModel {
        /**
         * Folder id
         *
         * @format datatype.uuid
         */
        folderId?: string;
        /**
         * System folder identification.
         */
        systemFolder?: GenModels.SystemFolders;
    }
}
export declare namespace GenModels {
    interface FolderViewInfosModel {
        /**
         * Infos
         */
        views: Array<GenModels.FolderViewInfo>;
    }
}
export declare namespace GenModels {
    interface FolderViewInfo {
        /**
         * Gets or sets view name
         */
        name: string;
        /**
         * Gets or sets view identifier
         *
         * @format datatype.uuid
         */
        viewId: string;
        /**
         * Is view configured as folder default view
         */
        isDefaultFolderView: boolean;
    }
}
export declare namespace GenModels {
    interface ViewColumnModel {
        /**
         * Column name
         */
        columnName: string;
        /**
         * Column date format
         */
        dateFormat: string;
        /**
         * Column order
         */
        order: number;
        /**
         * Is column hidden
         */
        hidden: boolean;
        /**
         * Is column system
         */
        system: boolean;
        /**
         * Gets or sets column caption
         */
        caption: string;
        /**
         * Is column need save HTML content to show
         */
        displayAsHTML: boolean;
    }
}
export declare namespace GenModels {
    interface GridFilterRequestModel {
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Gets or sets view identifier
         *
         * @format datatype.uuid
         */
        viewId: string;
    }
}
export declare namespace GenModels {
    interface GridViewModelEx extends GenModels.GridViewModel {
        searchParametersLayout?: GenModels.ILayoutViewModel;
    }
}
export declare namespace GenModels {
    interface SaveGridUserSettingsDataRequestModel {
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Get or sets view identifier
         *
         * @format datatype.uuid
         */
        viewId: string;
        /**
         * Get or sets instance id
         *
         * @format datatype.uuid
         */
        instanceId?: string;
        /**
         * Gets or sets grid user settings data
         */
        gridUserSettings: GenModels.GridUserSettingsData;
    }
}
export declare namespace GenModels {
    interface SaveGridUserSettingsFolderDataRequestModel {
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Gets or sets grid user settings folder data
         */
        gridUserSettingsFolder: GenModels.GridUserSettingsFolderData;
    }
}
export declare namespace GenModels {
    interface GridUserSettingsFolderData {
        /**
         * Gets or sets view id
         *
         * @format datatype.uuid
         */
        viewId: string;
    }
}
export declare namespace GenModels {
    interface SaveAllCardsReadStatusRequestModel {
        /**
         * Request model
         */
        requestModel: GenModels.CardListRequestModel;
        /**
         * Gets or sets card was read
         */
        wasRead: boolean;
    }
}
export declare namespace GenModels {
    interface DistinctValuesRequestWithPagination {
        /**
         * Gets or sets Cursor ID
         *
         * @format datatype.uuid
         */
        cursorId: string;
        /**
         * Gets or sets page number
         */
        pageNumber: number;
        /**
         * Gets or sets page size
         */
        pageSize: number;
    }
}
export declare namespace GenModels {
    interface DistinctValuesRequestModel extends GenModels.DistinctValuesRequestWithPagination {
        /**
         * Gets or sets
         */
        grouping: Array<GenModels.GridUserSettingsGroupColumn>;
    }
}
export declare namespace GenModels {
    interface DistinctValuesModel {
        /**
         * Gets or sets page count
         */
        pageCount: number;
        /**
         * Gets or sets current page
         */
        currentPage: number;
        /**
         * Gets or sets distinct values
         */
        distinctValues: Array<GenModels.ViewDistinctValue>;
    }
}
export declare namespace GenModels {
    interface ViewDistinctValue {
        /**
         * Gets or sets column name
         */
        columnName: string;
        /**
         * Gets or sets whether sorting by descending
         */
        isDescending: boolean;
        /**
         * Gets or sets value
         */
        value: string;
        /**
         * Gets or sets raw value
         */
        rawValue: any;
        /**
         * Gets or sets count
         */
        count: number;
        /**
         * Gets or sets whether last level
         */
        isLastLevel: boolean;
    }
}
export declare namespace GenModels {
    interface FilterDistinctValuesRequestModel extends GenModels.DistinctValuesRequestModel {
        /**
         * Column name
         */
        filterColumnName: string;
        /**
         * Search text
         */
        filterSearchText: string;
        /**
         * Instace ID
         *
         * @format datatype.uuid
         */
        instanceId: string;
    }
}
export declare namespace GenModels {
    interface GridAggregateRequest {
        /**
         * Gets or sets folder ID
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Gets or sets query ID
         *
         * @format datatype.uuid
         */
        queryId: string;
        /**
         * Gets or sets instance ID
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Gets or sets filters
         */
        filters: Array<GenModels.AggregateFilterItem>;
    }
}
export declare namespace GenModels {
    interface GridAggregateModel {
        /**
         * Grid aggregate name
         */
        name: string;
        /**
         * Grid aggregate alias
         */
        alias: string;
        /**
         * Is Grid aggregate main?
         */
        isMain: boolean;
        /**
         * List of grid aggregate value
         */
        aggregateValues: Array<GenModels.GridAggregateValue>;
    }
}
export declare namespace GenModels {
    interface GridAggregateValue {
        /**
         * Aggregate value name
         */
        name: string;
        /**
         * Aggregate value alias
         */
        alias: string;
        /**
         * Aggregate value count
         */
        count: number;
        /**
         * Aggregate value count
         */
        checked?: boolean;
    }
}
export declare namespace GenModels {
    interface DistinctValuesDiagramRequestModel extends GenModels.DistinctValuesRequestModel {
        /**
         * Gets or sets Folder ID
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Gets or sets View ID
         *
         * @format datatype.uuid
         */
        viewId: string;
        /**
         * Gets or sets Diagram type
         */
        diagramType: GenModels.DiagramType;
    }
}
export declare namespace GenModels {
    interface DistinctDiagramValuesModel {
        /**
         * Gets or sets columns
         */
        columns: Array<GenModels.GridUserSettingsGroupDiagramColumn>;
        /**
         * Gets or sets distinct values
         */
        distinctValues: Array<GenModels.ViewDiagramDistinctValue>;
    }
}
export declare namespace GenModels {
    interface GridUserSettingsGroupDiagramColumn extends GenModels.GridUserSettingsGroupColumn {
        /**
         * Is filtering allowed
         */
        isFilteringAllowed: boolean;
        /**
         * Column display name
         */
        columnDisplayName: string;
    }
}
export declare namespace GenModels {
    interface ViewDiagramDistinctValue extends GenModels.ViewDistinctValue {
        /**
         * Children
         */
        children: Array<GenModels.ViewDistinctValue>;
    }
}
export declare namespace GenModels {
    interface RefreshUnreadCounterRequest {
        /**
         * @format datatype.uuid
         */
        folderId: string;
        folderRefreshTimeout: number;
        forceVirtualFolderSearch: boolean;
    }
}
export declare namespace GenModels {
    interface GetRequestModel {
        locationName?: string;
        /**
         * @format datatype.uuid
         */
        cardId?: string;
        /**
         * Gets or sets layout selection mode (view, edit, create...)
         *
         * @format datatype.uuid
         */
        layoutMode?: string;
        layoutParams?: Array<GenModels.ParamModel>;
        /**
         * Gets or sets whether return empty layout if no any layouts was found
         */
        useEmptyLayoutAsDefault?: boolean;
        /**
         * Layouts, where current layout loading.
         */
        parentLayoutIds?: Array<string>;
    }
}
export declare namespace GenModels {
    interface ParamModel {
        key: string;
        value: string;
    }
}
export declare namespace GenModels {
    interface GetPartRequestModel extends GenModels.GetRequestModel {
        controlName?: string;
        /**
         * Include in response control itself, or only its children.
         */
        loadOnlyChildren?: boolean;
    }
}
export declare namespace GenModels {
    interface GetPartRequestModelEx extends GenModels.GetRequestModel {
        /**
         * Control names
         */
        controlNames: Array<string>;
        /**
         * Load async extended data sources
         */
        loadAsyncExtendedDataSources: boolean;
    }
}
export declare namespace GenModels {
    interface SaveRequestModel {
        locationName?: string;
        /**
         * @format datatype.uuid
         */
        cardId?: string;
        /**
         * Gets or sets layout selection mode (view, edit, create...)
         *
         * @format datatype.uuid
         */
        layoutMode?: string;
        layoutParams: Array<GenModels.ParamModel>;
        /**
         * Gets or sets control data
         */
        bindings: Array<GenModels.BindingsWriteRequest>;
        /**
         * Gets or sets control data
         */
        extendedDataSourceInfos: Array<GenModels.ExtendedDataSourceInfoModel>;
    }
}
export declare namespace GenModels {
    interface BindingsWriteRequest {
        /**
         * Gets or sets control name
         */
        controlName: string;
        /**
         * Gets or sets control type name
         */
        controlTypeName: string;
        /**
         * Gets control bindings results
         */
        bindingResults: Array<GenModels.BindingResult>;
    }
}
export declare namespace GenModels {
    interface BindingResult {
        /**
         * Gets or sets binding property name
         */
        name: string;
        /**
         * Extra information about binding itself.
         */
        metadata: Array<GenModels.BindingMetadata>;
        /**
         * Gets items collection
         */
        values: Array<string>;
        /**
         * Binding value
         */
        value: any;
        /**
         * Gets or sets edit operation
         */
        editOperation: string;
        /**
         * Gets or sets data source card id
         *
         * @format datatype.uuid
         */
        extendedDataSourceCardId?: string;
        /**
         * Gets or sets data source section id
         *
         * @format datatype.uuid
         */
        extendedDataSourceSectionId?: string;
        /**
         * Gets or sets data source row id
         *
         * @format datatype.uuid
         */
        extendedDataSourceRowId?: string;
    }
}
export declare namespace GenModels {
    interface BindingMetadata {
        /**
         * Metadata key
         */
        key: string;
        /**
         * Metadata value
         */
        value: string;
    }
}
export declare namespace GenModels {
    interface HistorySearchQuery {
        cardId: string;
        employeeName: string;
        date?: string;
        eventSearch: string;
        operationsToHide: Array<string>;
        cacheId: string;
        skip?: number;
        maxCount?: number;
        editOperation: string;
    }
}
export declare namespace GenModels {
    interface HistorySearchResult {
        /**
         * History records
         */
        records: Array<GenModels.HistoryRecord>;
        /**
         * Show if result has more records (for pagination)
         */
        hasMore: boolean;
        /**
         * Cache id
         *
         * @format datatype.uuid
         */
        cacheId: string;
        /**
         * Replace (if true) or concat (if false) to existing history records (for pagination).
         */
        renew: boolean;
    }
}
export declare namespace GenModels {
    interface HistoryRecord {
        /**
         * Record id
         *
         * @format datatype.uuid
         */
        logNewId: string;
        /**
         * Record item id
         */
        id: number;
        /**
         * Record date
         *
         * @format datatype.datetime
         */
        date: string;
        /**
         * Record user-readable event description
         */
        event: string;
        /**
         * Author of history record
         */
        author: GenModels.HistoryEmployee;
    }
}
export declare namespace GenModels {
    interface HistoryEmployee {
        /**
         * Name to display
         */
        displayName: string;
    }
}
export declare namespace GenModels {
    interface PartnerQuickSearchQuery {
        searchMode: GenModels.PartnerSearchMode;
        searchText: string;
        departmentId?: string;
        skip?: number;
        skipDepartments?: number;
        maxCount?: number;
    }
}
export declare namespace GenModels {
    interface PartnerQuickSearchResponse {
        items: Array<GenModels.PartnerDirectoryItem>;
        hasMore: boolean;
    }
}
export declare namespace GenModels {
    interface PartnerDirectoryItem {
        itemType: GenModels.PartnerItemType;
        data: any;
        hasChildren: boolean;
    }
}
export declare namespace GenModels {
    interface PartnerLoadQuery {
        searchMode: GenModels.PartnerSearchMode;
        departmentId?: string;
        skip?: number;
        skipDepartments?: number;
        maxCount?: number;
        refreshToken?: number;
    }
}
export declare namespace GenModels {
    interface PartnerTreeLoadResponse {
        items: Array<GenModels.PartnerDirectoryItem>;
        totalItemsCount: number;
        directoryTimestamp: number;
    }
}
export declare namespace GenModels {
    interface PartnerSearchResponse {
        items: Array<GenModels.PartnerDirectorySearchItem>;
        hasMore: boolean;
        directoryTimestamp: number;
    }
}
export declare namespace GenModels {
    interface PartnerDirectorySearchItem extends GenModels.PartnerDirectoryItem {
        searchInfo: GenModels.PartnerSearchInfo;
        path: Array<GenModels.DepartmentModel>;
    }
}
export declare namespace GenModels {
    interface PartnerSearchInfo extends GenModels.SearchInfo {
    }
}
export declare namespace GenModels {
    interface MainMenuSettings {
        items: Array<GenModels.MainMenuItemSetting>;
    }
}
export declare namespace GenModels {
    interface MainMenuItemSetting {
        id: string;
        hidden: boolean;
    }
}
export declare namespace GenModels {
    interface SetCertificateRequest {
        /**
         * Certificate's name
         */
        name: string;
        /**
         * Certificate's content
         */
        content: string;
        /**
         * Certificate user id
         *
         * @format datatype.uuid
         */
        employeeId: string;
    }
}
export declare namespace GenModels {
    interface FileCardModel {
        /**
         * Gets name
         */
        name: string;
        /**
         * Gets file extension
         */
        fileExtension: string;
        /**
         * Gets file identifier
         *
         * @format datatype.uuid
         */
        fileId: string;
        /**
         * Gets is file locked
         */
        isLocked: boolean;
        /**
         * Gets child versions of the file
         */
        childVersions: Array<GenModels.FileCardVersionModel>;
        /**
         * Gets current version of the file
         */
        currentVersion: GenModels.FileCardVersionModel;
        /**
         * Gets file size
         */
        size: number;
        /**
         * Gets or sets versions count
         */
        versionsCount: number;
        /**
         * Link to open file with webdav
         */
        webDavLink: string;
        /**
         * Link to open file with webdav readonly
         */
        webDavReadonlyLink: string;
        /**
         * Do WebClient supports preview of the file.
         */
        isFilePreviewSupported: boolean;
    }
}
export declare namespace GenModels {
    interface FileCardVersionModel {
        /**
         * Gets or sets file identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or set version id
         *
         * @format datatype.uuid
         */
        versionId: string;
        /**
         * Gets or set version path
         */
        versionPath: string;
        /**
         * Gets or set version number
         */
        versionNumber: number;
        /**
         * Gets or set version author
         */
        author: string;
        /**
         * Gets or sets creation date
         *
         * @format datatype.datetime
         */
        creationDate: string;
        /**
         * Gets or sets file version comments
         */
        comments: Array<GenModels.FileCardCommentModel>;
    }
}
export declare namespace GenModels {
    interface FileCardCommentModel {
        /**
         * Gets or sets identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets date
         *
         * @format datatype.datetime
         */
        date: string;
        /**
         * Gets or sets comment
         */
        comment: string;
        /**
         * Gets or sets author
         */
        author: string;
        /**
         * Gets or sets author
         *
         * @format datatype.uuid
         */
        authorId: string;
    }
}
export declare namespace GenModels {
    interface RecentCardsRequest {
        requestModel: GenModels.CardListRequestModel;
        /**
         * Need use old grid.
         */
        useOldGrid?: boolean;
    }
}
export declare namespace GenModels {
    interface CollectionRequestModel {
        /**
         * Collection of entities
         */
        collection: Array<string>;
    }
}
export declare namespace GenModels {
    interface DataGridControlParams {
        pluginName: string;
        parameters: Array<GenModels.ParamModel>;
        sourceId?: string;
    }
}
export declare namespace GenModels {
    interface TableModel {
        id: string;
        sourceId: string;
        columns: Array<GenModels.ColumnModel>;
        rows: Array<GenModels.RowModel>;
    }
}
export declare namespace GenModels {
    interface ColumnModel {
        id: string;
        name: string;
        hidden?: boolean;
        order?: number;
        type?: GenModels.ColumnType;
    }
}
export declare namespace GenModels {
    interface RowModel {
        id: string;
        entityId: string;
        cells: Array<GenModels.CellModel>;
    }
}
export declare namespace GenModels {
    interface CellModel {
        columnId: string;
        value: any;
    }
}
export declare namespace GenModels {
    interface ScanedFilesRequestModel {
        /**
         * List of scaned file urls
         */
        fileUrls: Array<GenModels.ScanFileInfo>;
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Main file flag
         */
        isMain: boolean;
        /**
         * Card timestamp
         */
        timestamp: number;
    }
}
export declare namespace GenModels {
    interface ScanFileInfo {
        /**
         * Scaned file name
         */
        fileName: string;
        /**
         * Scaned file path
         */
        filePath: string;
    }
}
export declare namespace GenModels {
    interface FileListDataModelBase {
        timestamp: number;
        files: Array<GenModels.LayoutFileModel>;
        hasAnySignature: boolean;
        totalCount: number;
    }
}
export declare namespace GenModels {
    interface LayoutFileModel {
        name: string;
        fileCardId: string;
        fileId: string;
        isLocked: boolean;
        isFilePreviewSupported: boolean;
        isESExportAllowed: boolean;
        fileExtension: string;
        childVersions: Array<GenModels.VersionedFileModel>;
        currentVersion: GenModels.VersionedFileModel;
        hasFileSignature: boolean;
        hasFileCertificatedSignature: boolean;
        isMain: boolean;
        webDavLink: string;
        webDavReadonlyLink: string;
        versionsCount: number;
        size: number;
    }
}
export declare namespace GenModels {
    interface VersionedFileModel {
        /**
         * Gets or sets file identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or set version id
         *
         * @format datatype.uuid
         */
        versionId: string;
        /**
         * Gets or set version path
         */
        versionPath: string;
        /**
         * Gets or set version number
         */
        versionNumber: number;
        /**
         * Gets or set version author
         */
        author: string;
        /**
         * Gets or sets creation date
         *
         * @format datatype.datetime
         */
        creationDate: string;
        /**
         * Gets or sets file version comments
         */
        comments: Array<GenModels.VersionedFileCommentModel>;
    }
}
export declare namespace GenModels {
    interface VersionedFileCommentModel {
        /**
         * Gets or sets identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets date
         *
         * @format datatype.datetime
         */
        date: string;
        /**
         * Gets or sets comment
         */
        comment: string;
        /**
         * Gets or sets author
         */
        author: string;
        /**
         * Gets or sets author
         *
         * @format datatype.uuid
         */
        authorId: string;
    }
}
export declare namespace GenModels {
    interface FileListDataModel extends GenModels.FileListDataModelBase {
    }
}
export declare namespace GenModels {
    interface SecurityTarget {
        /**
         * Object type
         */
        type: GenModels.DescriptorTargetType;
        /**
         * Subtype of the TargetType. For StaffDirectory is value of {@link GenModels}
         */
        subtype?: number;
        /**
         * Identifier of object in the system
         *
         * @format datatype.uuid
         */
        id?: string;
        /**
         * Identifier of the parent object for the AccessManager. Should be specified if DescriptorTargetType is Custom.
         *
         * @format datatype.uuid
         */
        parentId?: string;
        /**
         * Object security identifier (SID)
         */
        securityId: string;
        /**
         * Display name
         */
        name: string;
        /**
         * Target object type for the AccessManager. Should be specified if DescriptorTargetType is Custom.
         */
        objectType?: GenModels.SecureObjectType;
    }
}
export declare namespace GenModels {
    interface SecurityDescriptor {
        /**
         * Security object.
         */
        target: GenModels.SecurityTarget;
        /**
         * Set of the operations in the access mask with display names.
         */
        accessMaskScheme: GenModels.AccessMaskScheme;
        /**
         * Access control for the target object.
         */
        accessList: Array<GenModels.AccessControlEntry>;
        /**
         * Does inheritance enabled for the descriptor.
         */
        inheritanceEnabled: boolean;
        /**
         * User has rights to edit security.
         */
        editAllowed: boolean;
        /**
         * User has rights to edit security.
         */
        viewAllowed: boolean;
    }
}
export declare namespace GenModels {
    interface AccessMaskScheme {
        /**
         * Scheme type.
         */
        type: GenModels.AccessMaskSchemeType;
        /**
         * Mask access flags.
         */
        flags: Array<GenModels.AccessMaskFlagInfo>;
    }
}
export declare namespace GenModels {
    interface AccessMaskFlagInfo {
        /**
         * Display name of the access type
         */
        displayName: string;
        /**
         * Flag code. {@link GenModels}
         */
        flag: GenModels.StandardAccessMaskFlags;
    }
}
export declare namespace GenModels {
    interface AccessControlEntry {
        /**
         * A trustee is the staff directory or Active Directory entity to which an access control entry applies
         */
        trustee: GenModels.AccessControlTrustee;
        /**
         * Access flags. {@link GenModels}
         *
         * @examples [983359, 131097, 38, 65536, 917504]
         */
        operationsMask: number;
        /**
         * Allow or deny operation
         */
        accessQualifier: GenModels.AceQualifier;
        /**
         * Entry inherited from parent.
         */
        inherited: boolean;
        /**
         * Inheritance mode and some other flags.
         */
        aceFlags: GenModels.AceFlags;
    }
}
export declare namespace GenModels {
    interface AccessControlTrustee {
        /**
         * Directory entity
         */
        directoryItem?: GenModels.IDirectoryItemData;
        /**
         * Security identifier
         */
        securityIdentifier: string;
        /**
         * Display name
         *
         * @format internet.userName
         */
        accountName?: string;
    }
}
export declare namespace GenModels {
    interface EnableInheritanceOptions {
        /**
         * Target
         */
        target: GenModels.SecurityTarget;
        /**
         * Enable inheritance
         */
        enableInheritance: boolean;
        /**
         * true to preserve inherited access rules; false to remove inherited access rules.
         */
        preserveInheritedRules?: boolean;
    }
}
export declare namespace GenModels {
    interface CheckAccessRightsRequestModel {
        /**
         * Gets or sets secure object type
         */
        secureObjectType: GenModels.SecureObjectType;
        /**
         * Gets or sets card data rights
         */
        cardDataRights: GenModels.CardDataRights;
        /**
         * Gets or sets object id
         *
         * @format datatype.uuid
         */
        objectId: string;
        /**
         * Gets or sets parent id
         *
         * @format datatype.uuid
         */
        parentId: string;
    }
}
export declare namespace GenModels {
    interface SignatureKindSelectionModel {
        /**
         * available signature kind
         */
        availableKind?: GenModels.DigitalSignatureKind;
        /**
         * warning message
         */
        warning: string;
        /**
         * time-stamp protocol server address
         */
        tspAddress: string;
        certificateThumberprint: string;
    }
}
export declare namespace GenModels {
    interface CertificateThumberprintRequest {
        /**
         * Certificates
         */
        certificates: Array<GenModels.CertificateThumberprintRequestItem>;
    }
}
export declare namespace GenModels {
    interface CertificateThumberprintRequestItem {
        /**
         * Id of the certificate
         */
        id: string;
        /**
         * Certificate content
         */
        certificateBase64: string;
    }
}
export declare namespace GenModels {
    interface CertificateThumberprintResponse {
        /**
         * Certificates info
         */
        certificates: Array<GenModels.CertificateThumberprintResponseItem>;
    }
}
export declare namespace GenModels {
    interface CertificateThumberprintResponseItem {
        /**
         * Id of the certificate
         */
        id: string;
        /**
         * Certificate thumberprint
         */
        certificateThumberprint: string;
        /**
         * Organisation, that issued certificate.
         */
        issuer: string;
        /**
         * Person, who can use certificate
         */
        subject: string;
        /**
         * Error processing certificate
         */
        error: string;
    }
}
export declare namespace GenModels {
    interface SignDataRequestWrapper {
        /**
         * SignDataRequest
         */
        request: GenModels.SignDataRequest;
    }
}
export declare namespace GenModels {
    interface SignDataRequest {
        /**
         * Get or sets document identifier
         *
         * @format datatype.uuid
         */
        documentId: string;
        /**
         * Gets or sets timestamp
         */
        timestamp: number;
        /**
         * Gets or sets label id
         *
         * @format datatype.uuid
         */
        labelId: string;
        /**
         * Gets or sets value whether indicate use simple sign, if CSP not supported
         */
        isSimpleSign: boolean;
        /**
         * Get or sets signature data
         */
        signatureData: GenModels.SignatureData;
    }
}
export declare namespace GenModels {
    interface SignatureData {
        /**
         * Gets or sets certificate thumbprint
         */
        certificateThumbprint: string;
        /**
         * Gets signature items
         */
        items: Array<GenModels.SignatureItemData>;
    }
}
export declare namespace GenModels {
    interface SignatureItemData {
        /**
         * Gets or sets signed content
         */
        data: Array<number>;
        /**
         * Gets or sets file version identifier
         *
         * @format datatype.uuid
         */
        fileVersionId: string;
        /**
         * Gets or sets file card identifier
         *
         * @format datatype.uuid
         */
        fileCardId: string;
        /**
         * Gets or sets signature item type
         */
        itemType: GenModels.SignatureItemType;
    }
}
export declare namespace GenModels {
    interface AttachSignatureResponse {
        /**
         * Successful signed
         */
        success: boolean;
        /**
         * Reason for signature invalidity
         */
        reason: string;
        /**
         * Attached signature identifier
         *
         * @format datatype.uuid
         */
        signatureId: string;
    }
}
export declare namespace GenModels {
    interface CreateSignDialogParams {
        /**
         * Gets or sets document id
         *
         * @format datatype.uuid
         */
        documentId: string;
    }
}
export declare namespace GenModels {
    interface SignatureModel {
        /**
         * Gets or sets list of {@link GenModels}
         */
        labels: Array<GenModels.SignatureLabelModel>;
        /**
         * Get timestamp
         */
        timestamp: number;
        /**
         * Get card timestamp
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Gets or sets whether to sign fields
         */
        signFields: boolean;
        /**
         * Gets or sets whether to sign attachments
         */
        signAttachments: boolean;
        /**
         * Get user certificate thumbprint
         */
        thumbprint: string;
        /**
         * Returns true whether HideSelectCertificateDialog
         */
        hideSelectCertificateDialog: boolean;
        /**
         * Stage setting
         */
        simpleSignatureAllowed: boolean;
        /**
         * File to sign.
         */
        files: Array<GenModels.SignatureFileInfo>;
        /**
         * Stage setting
         */
        signatureMethods: GenModels.SignatureMethodSettings;
    }
}
export declare namespace GenModels {
    interface SignatureLabelModel {
        /**
         * Gets or sets label identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets label name
         */
        name: string;
        /**
         * Gets or sets encoded Id
         */
        encodedId: string;
    }
}
export declare namespace GenModels {
    interface SignatureFileInfo {
        /**
         * File name
         */
        fileName: string;
        /**
         * File id
         *
         * @format datatype.uuid
         */
        fileId: string;
        /**
         * File version id
         *
         * @format datatype.uuid
         */
        versionId: string;
        /**
         * Versioned file card id
         *
         * @format datatype.uuid
         */
        fileCardId: string;
    }
}
export declare namespace GenModels {
    interface SignatureMethodSettings {
        /**
         * User name in DSS service
         */
        cloudAccountName: string;
        /**
         * Whether cloud certificates should be shown.
         */
        showCloudCertificates: boolean;
        /**
         * Long live DSS access token stored in database.
         */
        accessTokenReceived: boolean;
        /**
         * List of known methods.
         */
        methods: Array<GenModels.SignatureMethod>;
        /**
         * List of all known certificates.
         */
        certificates: Array<GenModels.SavedCertificateInfo>;
    }
}
export declare namespace GenModels {
    interface SignatureMethod {
        /**
         * Identifier of certificate or
         */
        id: string;
        /**
         * Is simple signature (without certificate).
         */
        isSimple: boolean;
        /**
         * Is default certificate, configured in user profile.
         */
        isUserDefault: boolean;
        /**
         * Order in certificate list
         */
        order: number;
        /**
         * Show method in list
         */
        enabled: boolean;
        /**
         * Comment
         */
        comment: string;
        /**
         * Certificate info
         */
        certificateInfo: GenModels.SavedCertificateInfo;
    }
}
export declare namespace GenModels {
    interface SavedCertificateInfo {
        /**
         * Id in crypto system (in DSS or in local certificate storage).
         */
        externalId: string;
        /**
         * Issued to
         */
        signer: string;
        /**
         * Issued from
         */
        authority: string;
        /**
         * Time of the certification life
         *
         * @format datatype.datetime
         */
        validTo: string;
        /**
         * Comment
         */
        comment: string;
        /**
         * User defined name of the certificate.
         */
        friendlyName: string;
        /**
         * Requires pin code to access.
         */
        hasPinCode: boolean;
        /**
         * Where method received from.
         */
        source: GenModels.SignatureMethodSources;
        /**
         * Certificate thumberprint.
         */
        thumberprint: string;
    }
}
export declare namespace GenModels {
    interface DocumentSignatureListModel {
        /**
         * Gets or sets list of {@link GenModels}
         */
        signatures: Array<GenModels.DocumentSignatureModel>;
    }
}
export declare namespace GenModels {
    interface DocumentSignatureModel {
        /**
         * Gets or sets signature author
         */
        author: GenModels.EmployeeModel;
        /**
         * Signer name, extracted from certificate.
         */
        certificateSubject: string;
        /**
         * Gets or sets signature creation date
         *
         * @format datatype.datetime
         */
        creationDate: string;
        /**
         * Gets or sets label display name
         */
        labelDisplayName: string;
        /**
         * Gets or sets signature identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets certificate thumbprint
         */
        certificateThumbprint: string;
        /**
         * Get value indicate whether sign is simple
         */
        isSimpleSign: boolean;
        /**
         * Gets or sets has signed attribute in signature items
         */
        hasSignedAttributeItem: boolean;
    }
}
export declare namespace GenModels {
    interface SignatureVerificationModel {
        /**
         * Gets or sets signature status
         */
        signatureStatus: string;
        /**
         * Gets or sets signature validation status
         */
        validationState: GenModels.ValidationState;
        /**
         * Gets or sets kind of signature
         */
        signatureKind: string;
        /**
         * Gets or sets details of signature
         */
        signatureDetails: Array<GenModels.SignatureItemVerificationModel>;
    }
}
export declare namespace GenModels {
    interface SignatureItemVerificationModel {
        /**
         * Gets or sets status
         */
        status: string;
        /**
         * Gets or sets file version number
         */
        fileVersionNumber: string;
        /**
         * Gets or sets file name
         */
        fileName: string;
        /**
         * Gets or sets file card id
         *
         * @format datatype.uuid
         */
        fileId: string;
        /**
         * Gets or sets id of the file for FileManager
         *
         * @format datatype.uuid
         */
        fileHandleId: string;
        /**
         * Gets or sets item certificate thumbprint
         */
        certificateThumbprint: string;
        /**
         * Timestamp
         *
         * @format datatype.datetime
         */
        timestamp?: string;
        /**
         * Gets or sets client sign validated
         */
        isSignedWithCertificate: boolean;
        /**
         * Gets or sets validate error message
         */
        errorMessage: string;
        /**
         * Gets or sets verification status
         */
        verificationStatus: GenModels.SignatureVerificationStatus;
        /**
         * Signature Item Type
         */
        signatureItemType: GenModels.SignatureItemType;
        /**
         * description
         */
        description: string;
        /**
         * field names or additional files
         */
        partItems: Array<string>;
        /**
         * Gets or sets kind of signature
         */
        kind: string;
        /**
         * Gets or sets expire date
         *
         * @format datatype.datetime
         */
        expireDate?: string;
        canShowSignatureInfo: boolean;
        /**
         * Gets or sets signature part id
         *
         * @format datatype.uuid
         */
        signaturePartId: string;
        /**
         * Gets or sets signature id
         *
         * @format datatype.uuid
         */
        signatureId: string;
    }
}
export declare namespace GenModels {
    interface SignatureDetailsModel {
        /**
         * Gets or sets kind of signature
         */
        signatureKind: string;
        /**
         * List of document files for validation purposes
         */
        documentFiles: Array<GenModels.SignatureFileDetails>;
        /**
         * Gets or sets details of signature
         */
        signatureDetails: Array<GenModels.SignatureItemVerificationModel>;
    }
}
export declare namespace GenModels {
    interface SignatureFileDetails {
        /**
         * Row id of the document file
         *
         * @format datatype.uuid
         */
        documentFileId: string;
        /**
         * Versioned file card id
         *
         * @format datatype.uuid
         */
        fileCardId: string;
        /**
         * Current version id
         *
         * @format datatype.uuid
         */
        versionId: string;
        /**
         * Is main document file (not additional)
         */
        isMain: boolean;
    }
}
export declare namespace GenModels {
    interface OperationRequestModel {
        /**
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Where in the card stored the comment.
         *
         * @format datatype.uuid
         */
        operationId: string;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc {
    interface ControllerBase {
        httpContext: Microsoft.AspNetCore.Http.HttpContext;
        request: Microsoft.AspNetCore.Http.HttpRequest;
        response: Microsoft.AspNetCore.Http.HttpResponse;
        routeData: Microsoft.AspNetCore.Routing.RouteData;
        modelState: Array<Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry>;
        controllerContext: Microsoft.AspNetCore.Mvc.ControllerContext;
        metadataProvider: Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider;
        modelBinderFactory: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory;
        url: Microsoft.AspNetCore.Mvc.IUrlHelper;
        objectValidator: Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator;
        problemDetailsFactory: Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory;
        user: any;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface HttpContext {
        features: Array<any>;
        request: Microsoft.AspNetCore.Http.HttpRequest;
        response: Microsoft.AspNetCore.Http.HttpResponse;
        connection: Microsoft.AspNetCore.Http.ConnectionInfo;
        webSockets: Microsoft.AspNetCore.Http.WebSocketManager;
        user: any;
        items: Array<any>;
        requestServices: any;
        requestAborted: any;
        traceIdentifier: string;
        session: Microsoft.AspNetCore.Http.ISession;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface HttpRequest {
        httpContext: Microsoft.AspNetCore.Http.HttpContext;
        method: string;
        scheme: string;
        isHttps: boolean;
        host: Microsoft.AspNetCore.Http.HostString;
        pathBase: Microsoft.AspNetCore.Http.PathString;
        path: Microsoft.AspNetCore.Http.PathString;
        queryString: Microsoft.AspNetCore.Http.QueryString;
        query: Array<Array<string>>;
        protocol: string;
        headers: Array<Array<string>>;
        cookies: Array<string>;
        contentLength?: number;
        contentType: string;
        body: any;
        bodyReader: any;
        hasFormContentType: boolean;
        form: Array<Array<string>>;
        routeValues: Array<any>;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface HostString {
        value: string;
        hasValue: boolean;
        host: string;
        port?: number;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface PathString {
        value: string;
        hasValue: boolean;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface QueryString {
        value: string;
        hasValue: boolean;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface HttpResponse {
        httpContext: Microsoft.AspNetCore.Http.HttpContext;
        statusCode: number;
        headers: Array<Array<string>>;
        body: any;
        bodyWriter: any;
        contentLength?: number;
        contentType: string;
        cookies: Microsoft.AspNetCore.Http.IResponseCookies;
        hasStarted: boolean;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface IResponseCookies {
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface ConnectionInfo {
        id: string;
        remoteIpAddress: any;
        remotePort: number;
        localIpAddress: any;
        localPort: number;
        clientCertificate: any;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface WebSocketManager {
        isWebSocketRequest: boolean;
        webSocketRequestedProtocols: Array<string>;
    }
}
export declare namespace Microsoft.AspNetCore.Http {
    interface ISession {
        isAvailable: boolean;
        id: string;
        keys: Array<string>;
    }
}
export declare namespace Microsoft.AspNetCore.Routing {
    interface RouteData {
        dataTokens: Array<any>;
        routers: Array<Microsoft.AspNetCore.Routing.IRouter>;
        values: Array<any>;
    }
}
export declare namespace Microsoft.AspNetCore.Routing {
    interface IRouter {
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface ModelStateEntry {
        rawValue: any;
        attemptedValue: string;
        errors: Array<Microsoft.AspNetCore.Mvc.ModelBinding.ModelError>;
        validationState: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState;
        isContainerNode: boolean;
        children: Array<Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry>;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface ModelError {
        exception: any;
        errorMessage: string;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc {
    interface ActionContext {
        actionDescriptor: Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor;
        httpContext: Microsoft.AspNetCore.Http.HttpContext;
        modelState: Array<Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry>;
        routeData: Microsoft.AspNetCore.Routing.RouteData;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.Abstractions {
    interface ActionDescriptor {
        id: string;
        routeValues: Array<any>;
        attributeRouteInfo: Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo;
        actionConstraints: Array<Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata>;
        endpointMetadata: Array<any>;
        parameters: Array<Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor>;
        boundProperties: Array<Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor>;
        filterDescriptors: Array<Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor>;
        displayName: string;
        properties: Array<any>;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.Routing {
    interface AttributeRouteInfo {
        template: string;
        order: number;
        name: string;
        suppressLinkGeneration: boolean;
        suppressPathMatching: boolean;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ActionConstraints {
    interface IActionConstraintMetadata {
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.Abstractions {
    interface ParameterDescriptor {
        name: string;
        parameterType: any;
        bindingInfo: Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface BindingInfo {
        bindingSource: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource;
        binderModelName: string;
        binderType: any;
        propertyFilterProvider: Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider;
        requestPredicate: any;
        emptyBodyBehavior: Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface BindingSource {
        displayName: string;
        id: string;
        isGreedy: boolean;
        isFromRequest: boolean;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface IPropertyFilterProvider {
        propertyFilter: any;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.Filters {
    interface FilterDescriptor {
        filter: Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata;
        order: number;
        scope: number;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.Filters {
    interface IFilterMetadata {
    }
}
export declare namespace Microsoft.AspNetCore.Mvc {
    interface ControllerContext extends Microsoft.AspNetCore.Mvc.ActionContext {
        actionDescriptor: Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor;
        valueProviderFactories: Array<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory>;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.Controllers {
    interface ControllerActionDescriptor extends Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor {
        controllerName: string;
        actionName: string;
        methodInfo: any;
        controllerTypeInfo: any;
        displayName: string;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface IValueProviderFactory {
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface IModelMetadataProvider {
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    interface IModelBinderFactory {
    }
}
export declare namespace Microsoft.AspNetCore.Mvc {
    interface IUrlHelper {
        actionContext: Microsoft.AspNetCore.Mvc.ActionContext;
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding.Validation {
    interface IObjectModelValidator {
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.Infrastructure {
    interface ProblemDetailsFactory {
    }
}
export declare namespace GenControllers {
    interface FileUploadApiControllerBase extends Microsoft.AspNetCore.Mvc.ControllerBase {
    }
}
export declare namespace GenControllers {
    interface FileUploadApiController extends GenControllers.FileUploadApiControllerBase {
    }
}
export declare namespace GenModels {
    interface MergeGroupModel {
        versionedFileCardId: string;
        stageVersionId: string;
        stageVersionFileModel: GenModels.VersionFileModel;
        approverVersionFileModels: Array<GenModels.VersionFileModel>;
    }
}
export declare namespace GenModels {
    interface VersionFileModel {
        fileId: string;
        name: string;
    }
}
export declare namespace GenModels {
    interface TasksDataModel {
        tasks: Array<GenModels.TaskDataModel>;
        tasksLoaded: boolean;
        taskID: string;
        taskListId: string;
        taskKindName: string;
        availableKinds: Array<string>;
        totalTasksCount: number;
    }
}
export declare namespace GenModels {
    interface TaskDataModel {
        cardId: string;
        cardTypeId: string;
        kindId: string;
        taskName: string;
        viewRouteName: string;
        isGroupTask: boolean;
        stateDisplayName: string;
        stateClassName: string;
        stateType: number;
        performerDisplayName: string;
        startDate?: string;
        endDate?: string;
        endDateActual?: string;
    }
}
export declare namespace GenModels {
    interface TaskGroupIntervalsCalculationRequestModel {
        /**
         * Start date for entry task group
         *
         * @format datatype.datetime
         */
        totalStartDate: string;
        /**
         * End date for entry task group
         *
         * @format datatype.datetime
         */
        totalEndDate: string;
        /**
         * Duration for entry task group.
         */
        totalDuration: number;
        /**
         * Default calendar id to calculate intervals (will be used if employee has no calendar configured). Empty guid to use system calendar.
         *
         * @format datatype.uuid
         */
        defaultCalendarId: string;
        /**
         * Execution type
         */
        executionType: GenModels.ExecutionType;
        /**
         * Existing intervals with specified durations, but without start/end dates.
         */
        intervals: Array<GenModels.TaskGroupIntervalInfo>;
    }
}
export declare namespace GenModels {
    interface TaskGroupIntervalCommon {
        /**
         * Task description
         */
        description: string;
        /**
         * Does performer is responsible for entry task group.
         */
        isResponsible: boolean;
        /**
         * Task start date
         *
         * @format datatype.datetime
         */
        startDate?: string;
        /**
         * Task end date.
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Task duration
         */
        duration?: number;
        /**
         * Task order in task group.
         */
        order: number;
        /**
         * Hot to distribute tasks between group employees.
         */
        taskDistribution: GenModels.TaskGroupPerformerMode;
    }
}
export declare namespace GenModels {
    interface TaskGroupIntervalInfo extends GenModels.TaskGroupIntervalCommon {
        /**
         * Performer info
         */
        performer: GenModels.DirectoryItemData;
    }
}
export declare namespace GenModels {
    interface DirectoryItemData extends GenModels.IDirectoryItemData {
        /**
         * Entity Identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Entity type
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface TasksTreeRequestModel {
        /**
         * Gets or sets card identifier
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Gets or sets task list identifier
         *
         * @format datatype.uuid
         */
        taskListId: string;
        /**
         * Gets allowed kinds identifiers
         */
        kindIds: Array<string>;
        /**
         * Gets or sets whether not restrict tree to current card
         */
        fullTree: boolean;
    }
}
export declare namespace GenModels {
    interface TasksTreeModel {
        /**
         * Gets tree nodes
         *
         * @format datatype.uuid
         */
        parentCardId: string;
        /**
         * Gets tree nodes
         */
        nodes: Array<GenModels.TreeNodeModel>;
        /**
         * Gets edges
         */
        edges: Array<GenModels.TaskTreeEdge>;
    }
}
export declare namespace GenModels {
    interface TreeNodeModel {
        /**
         * Gets or sets node identifier
         *
         * @format datatype.uuid
         */
        nodeId: string;
        /**
         * Gets or sets parent node identifier
         *
         * @format datatype.uuid
         */
        parentId: string;
        /**
         * Gets or sets card type identifier
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Gets or sets kind identifier
         *
         * @format datatype.uuid
         */
        kindId: string;
        /**
         * Gets or sets tree node hint
         */
        hint: GenModels.TreeNodeHintModel;
    }
}
export declare namespace GenModels {
    interface TreeNodeHintModel {
        /**
         * Gets state name
         */
        stateDisplayName: string;
        /**
         * Gets task state type
         */
        stateType: number;
    }
}
export declare namespace GenModels {
    interface TaskTreeEdge {
        /**
         * Gets or sets from node identifier
         *
         * @format datatype.uuid
         */
        fromNode: string;
        /**
         * Gets or sets to node identifier
         *
         * @format datatype.uuid
         */
        toNode: string;
    }
}
export declare namespace GenModels {
    interface TasksTableLoadOptions {
        /**
         * Task list identifier, when loading document or custom card tasks
         *
         * @format datatype.uuid
         */
        taskListId?: string;
        /**
         * Task or task group identifiers
         */
        cardIds: Array<string>;
        /**
         * What level should have root nodes of the result.
         */
        startLevel?: number;
        /**
         * Load all tasks tree, starting from top most parent. CardIds should contains single identifier.
         */
        loadFullTree: boolean;
        /**
         * Load child tasks models.
         */
        loadChildren: boolean;
        /**
         * Gets allowed kinds identifiers
         */
        kindIds: Array<string>;
        /**
         * Columns to load
         */
        columns: Array<GenModels.TaskColumnType>;
    }
}
export declare namespace GenModels {
    interface TasksTableModel {
        /**
         * Table rows
         */
        rows: Array<GenModels.TasksTableRow>;
        /**
         * Does node has parent
         */
        canShowFullTree: boolean;
    }
}
export declare namespace GenModels {
    interface TasksTableRow {
        /**
         * Card identifier
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Zero-based level in the tasks tree
         */
        level: number;
        /**
         * Parent row identifier
         *
         * @format datatype.uuid
         */
        parentId?: string;
        /**
         * Task state type
         */
        stateCategory: number;
        /**
         * Task execution type
         */
        executionType: number;
        /**
         * Card type identifier
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Does task has subtasks
         */
        childrenIds: Array<string>;
        /**
         * Subtasks
         */
        children: Array<GenModels.TasksTableRow>;
        /**
         * Performer gender
         */
        gender: GenModels.PerformerGender;
        /**
         * Indicators
         */
        indicators: Array<GenModels.TasksIndicators>;
        /**
         * Row cells
         */
        attributes: {
            [name: number]: any;
        };
    }
}
export declare namespace GenModels {
    interface TasksTreeNodeHelpRequestModel {
        /**
         * Gets or sets card identifier
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Gets or sets card type identifier
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
    }
}
export declare namespace GenModels {
    interface TreeNodeHelpModel {
        /**
         * Gets or set creation date
         *
         * @format datatype.datetime
         */
        creationDate: string;
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Card state name
         */
        stateDisplayName: string;
        /**
         * Gets or sets value indicating whether task is overdue
         */
        isOverdue: boolean;
        /**
         * User has not access to the card
         */
        noAccess: boolean;
        /**
         * Does user has rights to delete the card
         */
        canDelete: boolean;
    }
}
export declare namespace GenModels {
    interface WasReadRequest {
        /**
         * Cards to read
         */
        cardIds: Array<string>;
        /**
         * Set read state
         */
        setRead: boolean;
    }
}
export declare namespace GenModels {
    interface ClientLogMessage {
        /**
         * Message text.
         */
        message: string;
        /**
         * Trace level
         */
        level: GenModels.ClientLogMessageLevel;
        /**
         * Callstack
         */
        stackTrace: string;
        /**
         * Time, when the message created.
         */
        time: string;
        /**
         * Employee id
         *
         * @format datatype.uuid
         */
        employeeId: string;
        /**
         * Browser url, when error occurred
         */
        currentRoute: string;
    }
}
export declare namespace GenModels {
    interface IsHasFileCertificateSignatureModel {
        /**
         * Indicates has the file a certificate signature
         */
        isHasFileCertificateSignature: boolean;
        /**
         * The name for downloading file
         */
        fileDownloadName: string;
    }
}
export declare namespace GenModels {
    interface DocumentFilesResponseModel {
        fileName: string;
        files: Array<GenModels.DowloadFilesOperationFileInfoModel>;
    }
}
export declare namespace GenModels {
    interface DowloadFilesOperationFileInfoModel {
        /**
         * File id
         *
         * @format datatype.uuid
         */
        fileId: string;
        /**
         * File name
         */
        fileName: string;
        /**
         * is main
         */
        isMain: boolean;
    }
}
export declare namespace GenModels {
    interface FilePickerRequestModel {
        /**
         * FileCard id
         *
         * @format datatype.uuid
         */
        fileCardId: string;
        /**
         * Additional information for writing records to system journal
         */
        logInfo: GenModels.LogInfo;
    }
}
export declare namespace GenModels {
    interface LogInfo {
        /**
         * The edit operation for the log record.
         *
         * @format datatype.uuid
         */
        operationId: string;
        /**
         * Card, to associate log record with.
         *
         * @format datatype.uuid
         */
        cardId: string;
    }
}
export declare namespace GenModels {
    interface FilePickerGetFileRequestModel extends GenModels.FilePickerRequestModel {
        /**
         * Should load file versions
         */
        loadVersions: boolean;
    }
}
export declare namespace GenModels {
    interface AgreementListModel {
        documentNumber: string;
        documentName: string;
        items: Array<GenModels.AgreementListItemModel>;
    }
}
export declare namespace GenModels {
    interface AgreementListItemModel {
        date: string;
        employeeDisplayText: string;
        departmentName: string;
        comment: string;
        decisionText: string;
    }
}
export declare namespace GenModels {
    interface AgreementManagementStartModel {
        agreementManagement: GenModels.AgreementManagementModel;
        templates: Array<GenModels.AgreementTemplateModel>;
    }
}
export declare namespace GenModels {
    interface AgreementManagementModel {
        reconciliationCardId: string;
        isMainFileExists: boolean;
        isNew: boolean;
        stateType: GenModels.AgreementStateType;
        reconciliationListHasRecords: boolean;
    }
}
export declare namespace GenModels {
    interface AgreementTemplateModel {
        creationSettingId: string;
        templateId: string;
        name: string;
        stages: Array<GenModels.StageModel>;
        startNoFiles: boolean;
        startNoEdit: boolean;
        loaded: boolean;
    }
}
export declare namespace GenModels {
    interface StageModel {
        stageId: string;
        name: string;
        allowEdit: boolean;
        duration: number;
        specificDuration: boolean;
        approvalType: GenModels.ApprovalType;
        hasBusinessProcess: boolean;
        excluded: boolean;
        order: number;
        orderSpecified: boolean;
        allowExcludeStage: boolean;
        stageInstanceInfo: GenModels.ActualStageData;
        approvers: Array<GenModels.ApproverModel>;
        allowEditApprovalType: boolean;
        templateId: string;
    }
}
export declare namespace GenModels {
    interface ActualStageData {
        stageSemantics: GenModels.StageSemantics;
        currentStage: boolean;
        pass: number;
    }
}
export declare namespace GenModels {
    interface ApproverModel {
        employee: GenModels.ApproverEmployeeModel;
        excluded: boolean;
    }
}
export declare namespace GenModels {
    interface ApproverEmployeeModel {
        id: string;
        isCurrent: boolean;
        displayName: string;
        firstName: string;
        lastName: string;
        middleName: string;
        position: string;
        isFavoritePerformer: boolean;
        unitId: string;
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface AgreementManagementEditModel {
        agreementManagement: GenModels.AgreementManagementModel;
        availableAgreementOperations: Array<GenModels.ApprovalOperationKind>;
        stages: Array<GenModels.StageModel>;
        canInterruptCurrentStages: boolean;
    }
}
export declare namespace GenModels {
    interface ReconcilationCreationModel {
        documentId: string;
        creationSettingId: string;
        clearReconciliationList: boolean;
        stages: Array<GenModels.StageChangeModel>;
    }
}
export declare namespace GenModels {
    interface StageChangeModel {
        stageId: string;
        order: number;
        excluded: boolean;
        duration: number;
        specificDuration: boolean;
        approvalType: GenModels.ApprovalType;
        approversChanged: boolean;
        approvers: Array<GenModels.ApproverModel>;
    }
}
export declare namespace GenModels {
    interface ReconcilationEditModel {
        documentId: string;
        reconcileCardId: string;
        stages: Array<GenModels.StageChangeModel>;
    }
}
export declare namespace GenModels {
    interface ApprovalHistoryViewModel {
        approvalReconcileCardId: string;
        approvalTaskCardId: string;
        currentCycle: GenModels.ApprovalHistoryCycleModel;
        cycles: Array<GenModels.ApprovalHistoryCycleModel>;
    }
}
export declare namespace GenModels {
    interface ApprovalHistoryCycleModel {
        number: number;
        isCurrent: boolean;
        stages: Array<GenModels.ApprovalHistoryStageModel>;
        ownerCardId: string;
    }
}
export declare namespace GenModels {
    interface ApprovalHistoryStageModel {
        name: string;
        id: string;
        approvalType?: GenModels.ApprovalType;
        beginDate: string;
        pass: number;
        stageItems: Array<GenModels.ApprovalHistoryStageItemModel>;
    }
}
export declare namespace GenModels {
    interface ApprovalHistoryStageItemModel {
        employeeText: string;
        employeeId: string;
        decisionDate: string;
        endDate?: string;
        endDateActual?: string;
        taskId: string;
        comment: string;
        hasComment: boolean;
        decisionName: string;
        decision?: GenModels.DecisionSemantics;
        stageDecision?: GenModels.StageSemantics;
        addedFileCardModels: Array<GenModels.ApprovalHistoryFileModel>;
        commentFileData: GenModels.ApprovalHistoryFileCommentModel;
    }
}
export declare namespace GenModels {
    interface ApprovalHistoryFileModel {
        fileCardId: string;
        name: string;
        fileExtension: string;
        currentVersion: GenModels.ApprovalHistoryFileVersionModel;
    }
}
export declare namespace GenModels {
    interface ApprovalHistoryFileVersionModel {
        versionId: string;
        fileId: string;
    }
}
export declare namespace GenModels {
    interface ApprovalHistoryFileCommentModel {
        fileId: string;
        name: string;
    }
}
export declare namespace GenModels {
    interface LayoutCardCreateParams {
        cardTypeId?: string;
        kindId?: string;
        folderId?: string;
        templateId?: string;
        parentCardId?: string;
        layoutMode?: string;
        createAsLink: GenModels.CreateAsLinkParams;
        relatedCreatorCardInfo: GenModels.RelatedCreatorCardInfo;
        layoutParams: Array<GenModels.LayoutParamModel>;
        sourceLayoutMode?: string;
        customContext?: any;
    }
}
export declare namespace GenModels {
    interface CreateAsLinkParams {
        sourceCardId: string;
        sourceCardTimestamp: number;
        linkTypeId: string;
        linksBinding: GenModels.SimpleBindingInfo;
        saveHardLink: boolean;
        isReport: boolean;
        editOperation: string;
    }
}
export declare namespace GenModels {
    interface SimpleBindingInfo {
        /**
         * Gets or sets data source resolver identifier
         *
         * @format datatype.uuid
         */
        dataSourceResolverId: string;
        /**
         * Gets or sets section identifier
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Gets or sets field alias
         */
        fieldAlias: string;
    }
}
export declare namespace GenModels {
    interface RelatedCreatorCardInfo {
        initialCardId: string;
        createRelatedCardModel: GenModels.CreateRelatedCardModel;
        parameters: Array<GenModels.ParamModel>;
    }
}
export declare namespace GenModels {
    interface CreateRelatedCardModel {
        /**
         * Gets or sets related card creator
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets display name
         */
        displayName: string;
        /**
         * Gets or sets operation id
         *
         * @format datatype.uuid
         */
        operationId?: string;
        /**
         * Gets or sets template identifier
         *
         * @format datatype.uuid
         */
        templateId?: string;
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId?: string;
        /**
         * Gets or sets link type
         *
         * @format datatype.uuid
         */
        linkTypeId?: string;
        /**
         * Gets or sets creating card kind id
         *
         * @format datatype.uuid
         */
        cardKindId: string;
        /**
         * Gets or sets creating card type id
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Where place created card.
         */
        location: GenModels.KindsCardCreationSettingLocation;
        /**
         * Additional information about operation, that will be passed to lifecycle.
         */
        operationContext?: any;
    }
}
export declare namespace GenModels {
    interface LayoutCardViewModel extends GenModels.LayoutViewModel {
        cardInfo: GenModels.CardInfoModel;
    }
}
export declare namespace GenModels {
    interface BaseInfoModel {
        id: string;
        timestamp: number;
        disabled: boolean;
        reason?: GenModels.Reason;
        createDate: string;
    }
}
export declare namespace GenModels {
    interface CardInfoModel extends GenModels.BaseInfoModel {
        typeId: string;
        kindId?: string;
        state: GenModels.StateModel;
        createAsLink: GenModels.CreateAsLinkParams;
        parentCardId?: string;
        createInFolder?: string;
        createInCurrentFolderForbidden: boolean;
        lockInfo: GenModels.LockInfoViewModel;
        relatedCreatorCardInfo: GenModels.RelatedCreatorCardInfo;
        isArchived: boolean;
    }
}
export declare namespace GenModels {
    interface StateModel {
        /**
         * Gets or sets state identifier
         *
         * @format datatype.uuid
         */
        stateId: string;
        /**
         * Gets or sets caption
         */
        caption: string;
        /**
         * Not configurable persistent state identifier.
         *
         * @format datatype.uuid
         */
        builtInStateId: string;
    }
}
export declare namespace GenModels {
    interface LockInfoViewModel {
        isLocked: boolean;
        accountName: string;
    }
}
export declare namespace GenModels {
    interface ViewCardLayoutRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Layout mode
         *
         * @format datatype.uuid
         */
        layoutMode?: string;
        /**
         * Layout params
         */
        layoutParams?: Array<GenModels.LayoutParamModel>;
        /**
         * Should add shortcut to user's recent cards folder
         */
        addToRecent?: boolean;
        /**
         * Should write record about card view to card history.
         */
        addCardLogMessage?: boolean;
        /**
         * Mark card as read by user.
         */
        markAsRead?: boolean;
        /**
         * Layout or layouts, where current layout will be shown
         */
        parentLayoutIds?: Array<string>;
    }
}
export declare namespace GenModels {
    interface EditCardLayoutRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Layout mode
         *
         * @format datatype.uuid
         */
        layoutMode?: string;
        /**
         * Layout params
         */
        layoutParams?: Array<GenModels.LayoutParamModel>;
    }
}
export declare namespace GenModels {
    interface DeleteCardRequestModel {
        /**
         * Gets or sets card identifier
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Gets or sets whether delete the card permanently
         */
        permanent?: boolean;
        /**
         * Gets or sets parent card identifier
         *
         * @format datatype.uuid
         */
        parentCardId?: string;
        /**
         * Gets related card creator info
         */
        relatedCreatorCardInfo?: GenModels.RelatedCreatorCardInfo;
        /**
         * Card is new
         */
        isNew: boolean;
    }
}
export declare namespace GenModels {
    interface CardLayoutParams {
        cardId: string;
        addToRecent: boolean;
        addCardLogMessage: boolean;
        markAsRead: boolean;
        layoutParams: Array<GenModels.LayoutParamModel>;
    }
}
export declare namespace GenModels {
    interface LayoutPartParams {
        cardId: string;
        layoutMode?: string;
        rootControlName: string;
        includeRootControl: boolean;
        contextData: {
            key: string;
            value: any;
        }[];
    }
}
export declare namespace GenModels {
    interface SaveControlDataModel {
        cardId: string;
        timestamp: number;
        layoutMode?: string;
        layoutAction: GenModels.LayoutAction;
        bindings: Array<GenModels.BindingsWriteRequest>;
        extendedDataSourceInfos: Array<GenModels.ExtendedDataSourceInfoModel>;
        createAsLink: GenModels.CreateAsLinkParams;
        createInFolder: string;
        parentCardId?: string;
        cardTypeId: string;
        relatedCreatorCardInfo: GenModels.RelatedCreatorCardInfo;
        layoutParams: Array<GenModels.LayoutParamModel>;
        completeCreation: boolean;
        customContext?: any;
    }
}
export declare namespace GenModels {
    interface MoveOrCopyShortcutsToFolderRequest {
        /**
         * Source folder identifier
         *
         * @format datatype.uuid
         */
        sourceFolderId: string;
        /**
         * Destination folder identifier
         *
         * @format datatype.uuid
         */
        destinationFolderId: string;
        /**
         * Identifiers of cards to be moved
         *
         * @format datatype.uuid
         */
        cardId: string;
    }
}
export declare namespace GenModels {
    interface ChangeStateDataModel {
        cardId: string;
        operationId: string;
        layoutMode?: string;
        comment: string;
        timestamp: number;
        fieldInfo?: GenModels.OperationFieldInfo;
    }
}
export declare namespace GenModels {
    interface OperationFieldInfo {
        /**
         * Field section
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Field name
         */
        fieldAlias: string;
        /**
         * Field type
         */
        fieldType: GenModels.FieldType;
        /**
         * Enum field value
         */
        enumValue?: number;
        /**
         * Base universal directory item id
         *
         * @format datatype.uuid
         */
        baseUniversalValue?: string;
    }
}
export declare namespace GenModels {
    interface ChangeStateDataModelWithParams extends GenModels.ChangeStateDataModel {
        layoutParams: Array<GenModels.LayoutParamModel>;
    }
}
export declare namespace GenModels {
    interface CardKindInfoModel {
        /**
         * Gets or sets card type id
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Gets or sets kind name
         *
         * @format datatype.uuid
         */
        kindId: string;
        /**
         * Gets or sets kind name
         */
        name: string;
        /**
         * Gets or set value indicated where kind is default
         */
        isDefault: boolean;
        /**
         * Gets or set value indicated where kind is not available
         */
        notAvailable: boolean;
        /**
         * Gets or set value indicated where kind is not allowed to select
         */
        notSelectable: boolean;
        /**
         * Gets or set child kinds
         */
        kinds: Array<GenModels.CardKindInfoModel>;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerSearchQuery {
        searchText: string;
        searchArea?: GenModels.DirectoryDesignerSearchArea;
        rootNodeId?: string;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerSearchResult {
        /**
         * List of directory designer row items
         */
        items: Array<GenModels.DirectoryDesignerRowModel>;
        /**
         * If there are more items (for pagination)
         */
        hasMore: boolean;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerLoadTreeQuery {
        rootNodeId?: string;
        searchArea?: GenModels.DirectoryDesignerSearchArea;
        currentNodeId?: string;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerTreeNode {
        /**
         * Node id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Node name
         */
        name: string;
        /**
         * Description
         */
        description: string;
        /**
         * Node type
         */
        nodeType: GenModels.DirectoryDesignerTreeNodeType;
        /**
         * Was children autoloaded or not
         */
        childrenLoaded: boolean;
        /**
         * Children tree node
         */
        children: Array<GenModels.DirectoryDesignerTreeNode>;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerSearchTreeQuery {
        searchArea?: GenModels.DirectoryDesignerSearchArea;
        rootNodeId?: string;
        searchQuery: string;
        searchResultNumber: number;
        searchMode?: GenModels.DirectoryDesignerSearchMode;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerSearchTreeResult {
        /**
         * Search results items data
         */
        items: Array<GenModels.DirectoryDesignerTreeNode>;
        /**
         * Total search results count
         */
        totalResultsCount: number;
        /**
         * Search result number
         */
        searchResultNumber: number;
        /**
         * Matched element id
         */
        matchedElementId: string;
        /**
         * Matched element field name
         */
        matchedFieldName: string;
        /**
         * Matched element field value
         */
        matchedFieldValue: string;
    }
}
export declare namespace GenModels {
    interface GenerateNumberRequest {
        /**
         * Document card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Save the number to card or not
         */
        save: boolean;
        /**
         * Section and field, where number id stored in the card
         */
        info: GenModels.BindingInfo;
        /**
         * Id of the rule, that should be used to generate number
         *
         * @format datatype.uuid
         */
        generationRuleId?: string;
    }
}
export declare namespace GenModels {
    interface BindingInfo {
        /**
         * Bound field alias in database
         */
        fieldAlias: string;
        /**
         * Data source resolver id
         *
         * @format datatype.uuid
         */
        dataSourceResolverId: string;
        /**
         * Bound section id
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Gets or sets property name
         */
        propertyName: string;
        /**
         * Gets or sets edit operation
         */
        editOperation: string;
    }
}
export declare namespace GenModels {
    interface NumberInfo {
        /**
         * Gets or sets number
         */
        number: string;
        /**
         * Gets or sets numerator card busy numbers row identifier
         *
         * @format datatype.uuid
         */
        id: string;
    }
}
export declare namespace GenModels {
    interface ReleaseNumberRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Section and field, where number id stored in the card
         */
        info: GenModels.BindingInfo;
        /**
         * Document number identifier
         *
         * @format datatype.uuid
         */
        numberId: string;
    }
}
export declare namespace GenModels {
    interface SendForAcquaintanceRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Employees that should acquaintance document
         */
        employeeIds: Array<string>;
        /**
         * Departments and organizations that should acquaintance document
         */
        departmentIds: Array<string>;
        /**
         * Groups that should acquaintance document
         */
        groupIds: Array<string>;
        /**
         * Roles that should acquaintance document
         */
        roleIds: Array<string>;
        /**
         * Acquaintance end date
         *
         * @format datatype.datetime
         */
        endDate?: string;
    }
}
export declare namespace GenModels {
    interface UniqueAttribute {
        /**
         * Gets or sets section id
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Gets or sets field alias
         */
        fieldAlias: string;
        /**
         * Gets or sets attribute type
         */
        type: number;
        /**
         * Gets or sets section name
         */
        sectionName: string;
        /**
         * Gets or sets field display name
         */
        fieldDisplayName: string;
    }
}
export declare namespace GenModels {
    interface UniqueAttributesValuesList {
        /**
         * Unique attribute value list
         */
        uniqueAttributeValues: Array<GenModels.UniqueAttributeValue>;
        /**
         * Document id
         *
         * @format datatype.uuid
         */
        documentId: string;
    }
}
export declare namespace GenModels {
    interface UniqueAttributeValue {
        /**
         * Gets or sets section id
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Gets or sets section name
         */
        sectionName: string;
        /**
         * Gets or sets attribute type
         */
        type: number;
        /**
         * Gets or sets field alias
         */
        fieldAlias: string;
        /**
         * Gets or sets field display name
         */
        fieldDisplayName: string;
        /**
         * Gets or sets attribute value
         */
        value: any;
    }
}
export declare namespace GenModels {
    interface UniqueAttributeCard {
        /**
         * Gets or sets card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Gets or sets card description
         */
        cardDescription: string;
        /**
         * Gets or sets author display name
         */
        authorDisplayName: string;
        /**
         * Gets or sets card create date
         *
         * @format datatype.datetime
         */
        createDate: string;
        /**
         * Gets or sets unique attribute values list
         */
        attributes: Array<GenModels.UniqueAttributeValue>;
    }
}
export declare namespace GenModels {
    interface SignatureRequest {
        documentId: string;
        signatureId: string;
        signaturePartId: string;
    }
}
export declare namespace GenModels {
    interface SignatureInfoModel {
        /**
         * Gets expire date
         *
         * @format datatype.datetime
         */
        expireDate?: string;
        /**
         * Gets signature type
         */
        signatureType: GenModels.SignatureType;
        /**
         * Gets certificate
         */
        certificate: GenModels.CertificateInfoModel;
        /**
         * Gets timestamps
         */
        timestamps: Array<GenModels.TimestampInfoModel>;
    }
}
export declare namespace GenModels {
    interface CertificateInfoModel {
        /**
         * Gets subject
         */
        subject: string;
        /**
         * Gets issuer
         */
        issuer: string;
        /**
         * Gets expire date
         *
         * @format datatype.datetime
         */
        expireDate: string;
    }
}
export declare namespace GenModels {
    interface TimestampInfoModel {
        /**
         * Gets create date
         *
         * @format datatype.datetime
         */
        createDate: string;
        /**
         * Gets expire date
         *
         * @format datatype.datetime
         */
        expireDate: string;
        /**
         * Gets issuer
         */
        issuer: string;
        /**
         * Gets timestamp type
         */
        timestampType: GenModels.TimestampType;
    }
}
export declare namespace GenModels {
    interface GetAcknowledgemenListRequest {
        documentId: string;
        transformationAlias: string;
        taskKindIds: Array<string>;
        includeTasksAllLevels: boolean;
    }
}
export declare namespace GenModels {
    interface GetFilesRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Query options
         */
        options: GenModels.GetFilesQueryOptions;
    }
}
export declare namespace GenModels {
    interface GetFilesQueryOptions {
        skipCount: number;
        maxCount?: number;
    }
}
export declare namespace GenModels {
    interface GetVersionsRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
    }
}
export declare namespace GenModels {
    interface FileListVersionsDataModel {
        versions: Array<GenModels.VersionedFileModel>;
    }
}
export declare namespace GenModels {
    interface GetCommentsRequest {
        /**
         * File card id
         *
         * @format datatype.uuid
         */
        fileCardId: string;
        /**
         * Version id
         *
         * @format datatype.uuid
         */
        versionId: string;
        /**
         * Task or document card, that owns file.
         *
         * @format datatype.uuid
         */
        ownerCardId: string;
    }
}
export declare namespace GenModels {
    interface VersionedFileCommentListModel {
        /**
         * Gets or sets file version comments
         */
        comments: Array<GenModels.VersionedFileCommentModel>;
        /**
         * Gets or sets file name
         */
        fileName: string;
        /**
         * Gets or sets file author name
         */
        fileAuthor: string;
        /**
         * Gets or sets file author id
         *
         * @format datatype.uuid
         */
        fileAuthorId: string;
        /**
         * Gets or sets file creation date
         *
         * @format datatype.datetime
         */
        fileCreationDate: string;
        /**
         * Gets or sets version
         */
        version: string;
        /**
         * Get version id
         *
         * @format datatype.uuid
         */
        versionId: string;
        /**
         * Get current user
         */
        currentEmployee: string;
        /**
         * Gets or sets Id of current employee
         *
         * @format datatype.uuid
         */
        currentEmployeeId: string;
        /**
         * Gets or sets file card identifier
         *
         * @format datatype.uuid
         */
        fileCardId: string;
        /**
         * Gets or sets file card timestamp
         */
        timestamp: number;
    }
}
export declare namespace GenModels {
    interface VersionedFileCommentCreateModel {
        commentId?: string;
        cardId: string;
        timestamp: number;
        comment: string;
        fileCardId: string;
        versionId: string;
    }
}
export declare namespace GenModels {
    interface VersionedFileCommentDeleteModel {
        commentId: string;
        cardId: string;
        timestamp: number;
        fileCardId: string;
        versionId: string;
    }
}
export declare namespace GenModels {
    interface CommmonFileRequest {
        /**
         * Owner card id
         *
         * @format datatype.uuid
         */
        ownerCardId: string;
        /**
         * File card id
         *
         * @format datatype.uuid
         */
        fileCardId: string;
        /**
         * Timestamp
         */
        timestamp?: number;
    }
}
export declare namespace GenModels {
    interface RenameFileNameRequest {
        /**
         * @format datatype.uuid
         */
        documentId: string;
        /**
         * @format datatype.uuid
         */
        documentFileId: string;
        isMain: boolean;
        fileName: string;
    }
}
export declare namespace GenModels {
    interface FileQuotesRequest {
        /**
         * Instance ID
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * File ID
         *
         * @format datatype.uuid
         */
        fileId: string;
        /**
         * Quotes limit
         */
        quotesLimit: number;
    }
}
export declare namespace GenModels {
    interface FileQuotes {
        fileId: string;
        ownerCardId?: string;
        fileName: string;
        fileExtension: string;
        link: string;
        quotes: Array<GenModels.Quote>;
        hasMore: boolean;
    }
}
export declare namespace GenModels {
    interface Quote {
        parts: Array<GenModels.QuotePart>;
    }
}
export declare namespace GenModels {
    interface QuotePart {
        text: string;
        isMarked: boolean;
    }
}
export declare namespace GenModels {
    interface CardQuotesRequest {
        /**
         * Instance ID
         *
         * @format datatype.uuid
         */
        instanceId: string;
        /**
         * Card ID
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Quotes limit
         */
        quotesLimit: number;
        /**
         * Files limit
         */
        filesLimit: number;
    }
}
export declare namespace GenModels {
    interface CardQuotes {
        cardId?: string;
        hasMore: boolean;
        files: Array<GenModels.FileQuotes>;
    }
}
export declare namespace GenModels {
    interface GetUserFoldersTreeDataRequest {
        /**
         * Folder id. If value provided, action will return subfolders for specified folder.
         *
         * @format datatype.uuid
         */
        folderId?: string;
    }
}
export declare namespace GenModels {
    interface FolderNode {
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Equivalent to Id
         *
         * @format datatype.uuid
         */
        additionalId: string;
        /**
         * Gets or sets folder name
         */
        name: string;
        /**
         * Gets or sets folder node type
         */
        type: GenModels.FolderNodeType;
        /**
         * Default folder view style
         */
        defaultStyle: GenModels.FolderNodeStyle;
        /**
         * Gets value indicating whether node has unloaded subfolders
         */
        hasUnloadedSubfolders: boolean;
        /**
         * Get or sets folder URL, when folder displayed as web page
         */
        url: string;
        /**
         * Gets or sets default view identifier
         *
         * @format datatype.uuid
         */
        defaultViewId: string;
        /**
         * Gets or sets search identifier for virtual folder
         *
         * @format datatype.uuid
         */
        searchId: string;
        /**
         * Gets or sets target folder identifier for delegate folder
         *
         * @format datatype.uuid
         */
        targetFolderId: string;
        /**
         * Folder setting - seconds to auto refresh. Zero value indicates, that autorefresh disabled.
         */
        refreshTimeout: number;
        /**
         * Folder setting - show unread counter
         */
        showUnreadCounter: boolean;
        /**
         * Folder setting
         */
        pagedSecurity: boolean;
        /**
         * Gets or sets subfolders
         */
        folders: Array<GenModels.FolderNode>;
    }
}
export declare namespace GenModels {
    interface GetFoldersRequest {
        /**
         * folders list
         */
        selectFolderNodes: Array<GenModels.SelectFolderNode>;
    }
}
export declare namespace GenModels {
    interface SelectFolderNode {
        /**
         * folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * use folders and its children
         */
        withChildren: boolean;
    }
}
export declare namespace GenModels {
    interface CheckFolderForAvailableCardKindRequest {
        /**
         * Folder id, where card going to be placed
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Card id to check
         *
         * @format datatype.uuid
         */
        cardId: string;
    }
}
export declare namespace GenModels {
    interface CheckResult {
        passed: boolean;
        failReason: string;
    }
}
export declare namespace GenModels {
    interface GetFolderInfoRequest {
        /**
         * Folder id
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * How many levels of subfolders to return with model
         */
        loadSubfoldersLevel?: number;
    }
}
export declare namespace GenModels {
    interface FolderInfoModel {
        name: string;
        typeInfo: GenModels.FolderTypeInfo;
        viewInfo: GenModels.FolderViewInfo;
        highlightingUnread?: boolean;
        canEditFolder?: boolean;
        canCreateSubfolder?: boolean;
    }
}
export declare namespace GenModels {
    interface SetFolderSettingsRequest {
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Gets or sets folder data model
         */
        folderData: GenModels.FolderDataModel;
    }
}
export declare namespace GenModels {
    interface FolderDataModel {
        name: string;
        typeId?: string;
        viewId?: string;
        highlightingUnread?: boolean;
    }
}
export declare namespace GenModels {
    interface CreateSubfolderRequestModel {
        /**
         * Gets or sets parent folder identifier
         *
         * @format datatype.uuid
         */
        parentFolderId: string;
        /**
         * Gets or sets folder data model
         */
        folderData: GenModels.FolderDataModel;
    }
}
export declare namespace GenModels {
    interface GetFolderInfoWithParentsRequest {
        /**
         * Folder id
         *
         * @format datatype.uuid
         */
        folderId: string;
    }
}
export declare namespace GenModels {
    interface FolderNodeWithParents {
        /**
         * List of parent nodes ids (path)
         */
        parentNodes: Array<string>;
        /**
         * Folder node
         */
        folderNode: GenModels.FolderNode;
    }
}
export declare namespace GenModels {
    interface DetachUserFoldersRequest {
        /**
         * Folders ids to detach
         */
        folderIds: Array<string>;
    }
}
export declare namespace GenModels {
    interface DeleteLinkRequest {
        /**
         * Show files for following links types
         */
        showFilesForLinksTypesIds: Array<string>;
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Simple binding info
         */
        info: GenModels.SimpleBindingInfo;
        /**
         * Allowed link types
         */
        allowedLinkTypes: Array<string>;
        /**
         * Link id
         *
         * @format datatype.uuid
         */
        linkId: string;
        /**
         * Kind id for file cards
         *
         * @format datatype.uuid
         */
        fileKindId?: string;
        /**
         * Card timestamp
         */
        timestamp: number;
    }
}
export declare namespace GenModels {
    interface DeleteFileRequest extends GenModels.DeleteLinkRequest {
        /**
         * Document (that containts file with FileCardId) card id
         *
         * @format datatype.uuid
         */
        documentCardId: string;
        /**
         * File card id
         *
         * @format datatype.uuid
         */
        fileCardId: string;
    }
}
export declare namespace GenModels {
    interface LinkType {
        /**
         * Link type id
         *
         * @format datatype.uuid
         */
        linkTypeId: string;
        /**
         * link type display name
         */
        displayName: string;
    }
}
export declare namespace GenModels {
    interface AllowedCardKind {
        kindId: string;
        cardTypeId: string;
        withDescendants: boolean;
    }
}
export declare namespace GenModels {
    interface LayoutKindModel {
        cardTypeId: string;
        kindId: string;
        name: string;
        kinds: Array<GenModels.LayoutKindModel>;
        notAvailable: boolean;
        layoutAvailable: boolean;
    }
}
export declare namespace GenModels {
    interface LayoutLinkCreateParams {
        sourceCardId: string;
        sourceCardTimestamp: number;
        linkTypeId: string;
        destinationCardId: string;
        linksBinding: GenModels.SimpleBindingInfo;
        saveHardLink: boolean;
        isReport: boolean;
        isFile: boolean;
        editOperation: string;
        preventDuplicates: boolean;
    }
}
export declare namespace GenModels {
    interface AddUrlLinkParams {
        cardId: string;
        allowedLinkTypes: Array<string>;
        bindingInfo: GenModels.SimpleBindingInfo;
        url: string;
        linkTypeId?: string;
        showFilesForLinksTypesIds: Array<string>;
        fileKindId?: string;
        timestamp: number;
        operationId?: string;
    }
}
export declare namespace GenModels {
    interface LayoutSetLinkDescriptionParams {
        cardId: string;
        allowedLinkTypes: Array<string>;
        bindingInfo: GenModels.SimpleBindingInfo;
        linkId: string;
        fileKindId?: string;
        showFilesForLinksTypesIds: Array<string>;
        newDescription: string;
        timestamp: number;
    }
}
export declare namespace GenModels {
    interface GetLinksRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Kind id for file cards
         *
         * @format datatype.uuid
         */
        fileKindId?: string;
        /**
         * Show files for following links types
         */
        showFilesForLinksTypesIds: Array<string>;
        /**
         * Allowed link types
         */
        allowedLinkTypes: Array<string>;
        /**
         * Binding info
         */
        bindingInfo: GenModels.SimpleBindingInfo;
        /**
         * Column view mode
         */
        columnViewMode: GenModels.LinksDescriptionColumnViewMode;
        /**
         * Column view extension
         */
        columnViewExtensionName: string;
    }
}
export declare namespace GenModels {
    interface LinksDataModel {
        links: Array<GenModels.LayoutLinkModel>;
        bindingInfo: GenModels.SimpleBindingInfo;
        allowedLinkCardTypes: Array<string>;
        allowedLinkTypes: Array<string>;
        linksLoaded: boolean;
        totalLinksCount: number;
        descriptionColumnViewMode: GenModels.LinksDescriptionColumnViewMode;
        descriptionColumnMethodKey: string;
    }
}
export declare namespace GenModels {
    interface LayoutLinkModel {
        linkId: string;
        displayName: string;
        linkTypeId: string;
        linkTypeName: string;
        kind: GenModels.LinkKind;
        isDocument: boolean;
        cardId: string;
        cardTypeId: string;
        cardKindId: string;
        fileCardId?: string;
        fileVersionId?: string;
        creationDate?: string;
        authorDisplayName: string;
        description: string;
        url: string;
        canDelete: boolean;
        linkDescription: GenModels.LayoutLinkDescriptionModel;
    }
}
export declare namespace GenModels {
    interface LayoutLinkDescriptionModel {
        linkDescriptionMode: GenModels.LinkDescriptionMode;
        text: string;
        layout: GenModels.LayoutCardViewModel;
    }
}
export declare namespace GenModels {
    interface CheckReadMainFileAvailableRequest {
        /**
         * Card id
         *
         * @format datatype.uuid
         */
        cardId: string;
    }
}
export declare namespace GenModels {
    interface GetLinksResultRequestModel {
        /**
         * Supported folder view requests for navigation.
         */
        queryViewRequest: GenModels.QueryViewRequest;
        /**
         * List of allowed card types.
         */
        allowedCardTypes: Array<string>;
    }
}
export declare namespace GenModels {
    interface LayoutRowCreateParams {
        cardId: string;
        sectionId: string;
        layoutMode?: string;
        parentRowId?: string;
        parentTreeRowId?: string;
        layoutParams: Array<GenModels.LayoutParamModel>;
        customContext?: any;
    }
}
export declare namespace GenModels {
    interface LayoutRowViewModel extends GenModels.LayoutViewModel {
        rowInfo: GenModels.RowInfoModel;
    }
}
export declare namespace GenModels {
    interface RowInfoModel extends GenModels.BaseInfoModel {
        sectionId: string;
        parentRowId?: string;
        parentTreeRowId?: string;
        cardId: string;
        lockInfo: GenModels.LockInfoViewModel;
    }
}
export declare namespace GenModels {
    interface RowLayoutParams {
        cardId: string;
        sectionId: string;
        rowId: string;
        layoutMode?: string;
        layoutParams: Array<GenModels.LayoutParamModel>;
    }
}
export declare namespace GenModels {
    interface DeleteRowModel {
        /**
         * Card, where row located
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Section of the row
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Row id
         *
         * @format datatype.uuid
         */
        rowId: string;
        /**
         * Parent row id for receiving it timestamp.
         *
         * @format datatype.uuid
         */
        parentRowId?: string;
        /**
         * Parent row section id for receiving it timestamp.
         *
         * @format datatype.uuid
         */
        parentRowSectionId?: string;
        isCreationCancel?: boolean;
    }
}
export declare namespace GenModels {
    interface RowLayoutPartParams extends GenModels.RowLayoutParams {
        rootControlName: string;
        includeRootControl: boolean;
    }
}
export declare namespace GenModels {
    interface SaveRowControlDataModel {
        cardId: string;
        sectionId: string;
        rowId: string;
        timestamp: number;
        layoutMode?: string;
        layoutAction: GenModels.LayoutAction;
        bindings: Array<GenModels.BindingsWriteRequest>;
        layoutParams: Array<GenModels.LayoutParamModel>;
        extendedDataSourceInfos: Array<GenModels.ExtendedDataSourceInfoModel>;
        completeCreation: boolean;
        customContext?: any;
    }
}
export declare namespace GenModels {
    interface DepartmentSearchQuery {
        searchText: string;
        source: GenModels.DepartmentDataSource;
        itemTypes: GenModels.SearchDepartmentType;
        skipCount?: number;
        maxCount?: number;
    }
}
export declare namespace GenModels {
    interface FindDepartmentsResponse {
        /**
         * List of department items
         */
        items: Array<GenModels.DepartmentModel>;
        /**
         * If there are more items (for pagination)
         */
        hasMore: boolean;
    }
}
export declare namespace GenModels {
    interface DepartmentLoadTreeQuery {
        parentNodeId?: string;
        treeLevelDown: number;
        source: GenModels.DepartmentDataSource;
        itemTypes: GenModels.SearchDepartmentType;
    }
}
export declare namespace GenModels {
    interface DepartmentTreeNode extends GenModels.IDirectoryItemData {
        /**
         * Node Id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Node name
         */
        name: string;
        /**
         * Node full name
         */
        fullName: string;
        /**
         * Organization INN
         */
        inn: string;
        /**
         * Not available flag
         */
        notAvailable: boolean;
        /**
         * Node department type
         */
        departmentType: GenModels.DepartmentType;
        /**
         * Shows if all children were loaded (for pagination)
         */
        childrenLoaded: boolean;
        /**
         * Shows if node has children
         */
        hasChildren: boolean;
        /**
         * Shows if node has employee
         */
        hasEmployee?: boolean;
        /**
         * Node children (can keep only part of children for pagination)
         */
        children: Array<GenModels.DepartmentTreeNode>;
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface DepartmentFindInTreeQuery {
        searchQuery: string;
        source: GenModels.DepartmentDataSource;
        itemTypes: GenModels.SearchDepartmentType;
    }
}
export declare namespace GenModels {
    interface DepartmentFindInTreeResult {
        /**
         * Found items
         */
        items: Array<GenModels.DepartmentTreeSearchResultNode>;
        /**
         * Total results count
         */
        totalResultsCount: number;
        /**
         * Search result number
         */
        searchResultNumber: number;
        /**
         * Matched field name
         */
        matchedFieldName: string;
        /**
         * Matched field value
         */
        matchedFieldValue: string;
        /**
         * Matched element id
         */
        matchedElementId: string;
    }
}
export declare namespace GenModels {
    interface DepartmentTreeSearchResultNode extends GenModels.DepartmentTreeNode {
        matched: boolean;
        /**
         * Name of the field in the element, that matched search query. if this field is not Name (otherwise null).
         */
        matchedFieldName: string;
        /**
         * Value of the matchedFieldName, if this field is not Name (otherwise null).
         */
        matchedFieldValue: string;
    }
}
export declare namespace GenModels {
    interface GetDepartmentsInfoRequestModel {
        /**
         * Gets or sets department ids
         */
        departmentIds: Array<string>;
        /**
         * Gets or sets source
         */
        source?: GenModels.DepartmentDataSource;
    }
}
export declare namespace GenModels {
    interface StaffInfoRequestModel {
        /**
         * Employee id list to get info
         */
        employeeIds: Array<string>;
        /**
         * Department and organisation ids to get info
         */
        departmentIds: Array<string>;
        /**
         * Where to look for employees and departments
         */
        source: GenModels.DepartmentDataSource;
    }
}
export declare namespace GenModels {
    interface StaffInfoResponseModel {
        /**
         * Employee id list to get info
         */
        employeesInfo: Array<GenModels.EmployeeModelWithPoneAndEmail>;
        /**
         * Department and organisation ids to get info
         */
        departmentsInfo: Array<GenModels.DepartmentExtendedModel>;
    }
}
export declare namespace GenModels {
    interface EmployeeModelWithPoneAndEmail extends GenModels.EmployeeModel {
        /**
         * Employee phone
         */
        phone: string;
    }
}
export declare namespace GenModels {
    interface GetDepartmentPathRequestModel {
        /**
         * Gets or sets a department identifier
         *
         * @format datatype.uuid
         */
        departmentId: string;
        /**
         * Where to look for employees and departments
         */
        source: GenModels.DepartmentDataSource;
    }
}
export declare namespace GenModels {
    interface DepartmentLoadFlatQuery {
        departmentId?: string;
        source: GenModels.DepartmentDataSource;
        itemTypes: GenModels.SearchDepartmentType;
        skip: number;
        maxCount: number;
    }
}
export declare namespace GenModels {
    interface DepartmentLoadFlatResponse {
        items: Array<GenModels.DepartmentFlatDigest>;
        totalItemsCount: number;
        directoryTimestamp: number;
    }
}
export declare namespace GenModels {
    interface DepartmentFlatDigest {
        data: GenModels.DepartmentTreeNode;
        hasChildren?: boolean;
    }
}
export declare namespace GenModels {
    interface DepartmentSearchFlatQuery {
        source: GenModels.DepartmentDataSource;
        itemTypes: GenModels.SearchDepartmentType;
        searchText: string;
        departmentId?: string;
        skip?: number;
        maxCount?: number;
    }
}
export declare namespace GenModels {
    interface DepartmentSearchFlatResponse {
        items: Array<GenModels.DepartmentSearchFlatItem>;
        hasMore: boolean;
        directoryTimestamp: number;
    }
}
export declare namespace GenModels {
    interface DepartmentSearchFlatItem extends GenModels.DepartmentFlatDigest {
        searchInfo: GenModels.PartnerSearchInfo;
        path: Array<GenModels.DepartmentModel>;
    }
}
export declare namespace GenModels {
    interface GetParentDepartmentsRequest {
        /**
         * @format datatype.uuid
         */
        departmentId: string;
        /**
         * Staff or partner department
         */
        source: GenModels.DepartmentDataSource;
    }
}
export declare namespace GenModels {
    interface FindEmployeesRequest {
        /**
         * Search term
         */
        term: string;
        /**
         * Some unique id, describing place in UI, where value selection performed
         *
         * @format datatype.uuid
         */
        kindId?: string;
        /**
         * How many records request should return
         */
        maxCount?: number;
        /**
         * How many records client already has from previous requests
         */
        skip?: number;
        /**
         * Restricts results to specified unit when is not null.
         *
         * @format datatype.uuid
         */
        unitId?: string;
        /**
         * List of id of employees, that should be filtered from result list.
         */
        skipEmployees: Array<string>;
        /**
         * Filter mode
         */
        filterMode: GenModels.EmployeeFilterMode;
    }
}
export declare namespace GenModels {
    interface FindEmployeesResponse {
        /**
         * Search result
         */
        employees: Array<GenModels.EmployeeModel>;
        /**
         * Pagination logic
         */
        hasMore: boolean;
    }
}
export declare namespace GenModels {
    interface UpdateEmployeeStatusModel {
        /**
         * Employee Status field value.
         */
        status: GenModels.StaffEmployeeStatus;
        /**
         * Employee InactiveStatus field value.
         */
        inactiveStatus: GenModels.StaffEmployeeInactiveStatus;
        /**
         * Employee start date of absence field
         *
         * @format datatype.datetime
         */
        startDate?: string;
        /**
         * Employee end date of absence
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Deputies
         */
        deputies: Array<GenModels.UpdateEmployeeDeputyModel>;
    }
}
export declare namespace GenModels {
    interface UpdateEmployeeDeputyModel {
        /**
         * Deputy employee id
         *
         * @format datatype.uuid
         */
        deputyID: string;
        /**
         * PermanentDeputy employee field
         */
        permanentDeputy: boolean;
        /**
         * Signature employee field
         */
        signature: boolean;
        /**
         * Order
         */
        order: number;
    }
}
export declare namespace GenModels {
    interface FileCardModelWithCertificateInfo extends GenModels.FileCardModel {
        /**
         * Certificate's friendly name
         */
        friendlyName: string;
        /**
         * Certificate's issuer
         */
        issuer: string;
        /**
         * Certificate's subject
         */
        subject: string;
        /**
         * Certificate valid from
         *
         * @format datatype.datetime
         */
        notBefore: string;
        /**
         * Certificate valid until
         *
         * @format datatype.datetime
         */
        notAfter: string;
    }
}
export declare namespace GenModels {
    interface GetTasksListRequestModel {
        /**
         * Id of the task list card.
         *
         * @format datatype.uuid
         */
        taskListId: string;
        /**
         * Filter result by these kinds. If array is empty or null, filter will not be applied.
         */
        availableKinds: Array<string>;
    }
}
export declare namespace GenModels {
    interface GetChildTasksCommentsRequestModel {
        /**
         * Id of the task card.
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Where in the card stored the comment.
         */
        commentBinding: GenModels.SimpleBindingInfo;
        /**
         * Where in the card stored the comment.
         */
        commentFileBinding: GenModels.SimpleBindingInfo;
        /**
         * Max depth of child task nesting
         */
        nestingLevel: number;
    }
}
export declare namespace GenModels {
    interface GetChildTasksCommentsResponseModel {
        /**
         * Id of the task card.
         */
        childTaskComments: Array<GenModels.ChildTaskCommentModel>;
        /**
         * Where in the card stored the comment.
         */
        taskHasCommentFile: boolean;
    }
}
export declare namespace GenModels {
    interface ChildTaskCommentModel {
        cardId: string;
        taskName: string;
        stateDisplayName: string;
        comment: string;
        commentFile: GenModels.CommonFileModel;
        performerDisplayName: string;
    }
}
export declare namespace GenModels {
    interface CommonFileModel {
        fileName: string;
        fileId: string;
        webDavLink: string;
        webDavReadonlyLink: string;
        filePreviewAvailable: boolean;
        isLocked: boolean;
        loadingErrorMessage: string;
    }
}
export declare namespace GenModels {
    interface AddTaskCommentsRequestModel {
        /**
         * Id of the task card.
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Where in the card stored the comment.
         */
        commentBinding: GenModels.SimpleBindingInfo;
        /**
         * Where in the card stored the comment.
         */
        commentFileBinding: GenModels.SimpleBindingInfo;
        /**
         * Comment text to add
         */
        comment: string;
        /**
         * Comment file to add.
         *
         * @format datatype.uuid
         */
        commentFileId?: string;
    }
}
export declare namespace GenModels {
    interface CreateChildTasksRequestModel {
        /**
         * Id of the task card.
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Id of the kind id.
         *
         * @format datatype.uuid
         */
        kindId: string;
        /**
         * Child tasks name
         */
        name: string;
        /**
         * Child tasks description
         */
        description: string;
        /**
         * Time to execute
         *
         * @format datatype.datetime
         */
        executionDate?: string;
        /**
         * Staff employees to become performers of the created tasks. One task per performer will be created.
         */
        performers: Array<string>;
    }
}
export declare namespace GenModels {
    interface ChildTaskCreateDefaultValues {
        name: string;
        content: string;
        currentPerformers: Array<GenModels.EmployeeModel>;
        endDate?: string;
    }
}
export declare namespace GenModels {
    interface GetDelegationRecordsRequestModel {
        /**
         * Task id
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Start performers mode
         */
        startPerformersMode: GenModels.DisplayPerformersStartPerformersMode;
        /**
         * View mode
         */
        viewMode: GenModels.DisplayPerformersViewMode;
        /**
         * Tip mode
         */
        tipMode: GenModels.DisplayPerformersTipMode;
        /**
         * Extended tip mode
         */
        extendedTipMode: GenModels.DisplayPerformersTipMode;
    }
}
export declare namespace GenModels {
    interface DelegateRecordsResponse {
        startPerformers: Array<GenModels.DisplayPerformersPerformer>;
        records: Array<GenModels.DelegateRecord>;
    }
}
export declare namespace GenModels {
    interface DisplayPerformersPerformer {
        /**
         * Gets or sets id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets display name
         */
        displayName: string;
        /**
         * Gets or sets tip
         */
        tip: string;
        /**
         * Gets or sets extended tip
         */
        extendedTip: string;
        /**
         * Gets or sets extended tip
         */
        type: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface DelegateRecord {
        event: GenModels.DelegateEvent;
        initiator: GenModels.EmployeeModel;
        performers: Array<GenModels.EmployeeModel>;
        date: string;
        comment: string;
    }
}
export declare namespace GenModels {
    interface TaskCardDelegateRequestModel {
        /**
         * Gets or sets task card identifier
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Gets or sets task comments
         */
        comment: string;
        /**
         * Gets or sets performer identifier
         *
         * @format datatype.uuid
         */
        delegateId: string;
        /**
         * Gets or sets RestrictDelegation
         */
        restrictDelegation: boolean;
        /**
         * Gets or sets ReturnAfterDelegation
         */
        returnAfterDelegation: boolean;
    }
}
export declare namespace GenModels {
    interface TaskCardCompleteRequestModel {
        /**
         * Gets or sets task card identifier
         *
         * @format datatype.uuid
         */
        taskCardId: string;
        /**
         * Gets or sets task report
         */
        report: string;
        /**
         * Gets or sets completion option
         */
        completionOption: GenModels.CompletionOptionRequestModel;
    }
}
export declare namespace GenModels {
    interface CompletionOptionRequestModel {
        /**
         * Gets or sets completion option identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets value indicated whether has report filed in completion option
         */
        hasReportFieldInCompletionOption: boolean;
        /**
         * Gets attributes collection
         */
        parameters: Array<GenModels.CompletionParameterRequestModel>;
        /**
         * Operation as field value
         */
        fieldInfo?: GenModels.OperationFieldInfo;
    }
}
export declare namespace GenModels {
    interface CompletionParameterRequestModel {
        /**
         * Gets or sets field name
         */
        name: string;
        /**
         * Gets or sets value
         */
        value: string;
        /**
         * Gets or sets id
         *
         * @format datatype.uuid
         */
        id: string;
    }
}
export declare namespace GenModels {
    interface TaskCardMakeDecisionRequestModel {
        /**
         * Gets or sets task identifier
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Gets or sets completion option identifier
         *
         * @format datatype.uuid
         */
        completionOptionId: string;
        /**
         * Gets or set decision comment
         */
        comment: string;
        /**
         * Gets or set additional approvers
         */
        additionalApprovers: Array<string>;
        /**
         * Gets or sets card timestamp
         */
        timestamp: number;
        /**
         * Gets or sets is sign required
         */
        isSignRequired: boolean;
        /**
         * Gets or sets client sign data
         */
        signData: GenModels.SignDataRequest;
    }
}
export declare namespace GenModels {
    interface GetApprovalTaskDecisionInfoOptions {
        taskId: string;
        completionOptionId: string;
    }
}
export declare namespace GenModels {
    interface ApprovalTaskDecisionInfo {
        taskId: string;
        documentId: string;
        completionOptionId: string;
        decisionId: string;
        requestDigitalSignature: boolean;
        allowSimpleSign: boolean;
        decisionSemantics: GenModels.DecisionSemantics;
        labelId?: string;
        encodedLabelId: string;
    }
}
export declare namespace GenModels {
    interface TaskCardRejectRequestModel {
        /**
         * Gets or sets task card identifier
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Gets or sets task comments
         */
        comment: string;
    }
}
export declare namespace GenModels {
    interface TaskCardTakeToReworkRequestModel {
        /**
         * Gets or sets task card identifier
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Gets or sets task comments
         */
        comment: string;
    }
}
export declare namespace GenModels {
    interface TaskCardChangeExecutionDatesModel {
        /**
         * Gets or sets task card identifier
         *
         * @format datatype.uuid
         */
        taskId: string;
        /**
         * Gets or sets task new start date
         *
         * @format datatype.datetime
         */
        startDate?: string;
        /**
         * Gets or sets task new end date
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Gets or sets task comments
         */
        comment: string;
    }
}
export declare namespace GenModels {
    interface GetCardKindsRequestModel {
        cardTypeId: string;
        folderId: string;
    }
}
export declare namespace GenModels {
    interface UnreadCountersRequest {
        /**
         * Gets or sets employee identifier
         *
         * @format datatype.uuid
         */
        employeeId: string;
        /**
         * Gets or sets tab identifier
         */
        realtimeSessionId: string;
        /**
         * Gets client folders with current counters
         */
        clientFolders: Array<GenModels.UnreadCountersFolderInfo>;
        /**
         * Should request awake or create session.
         */
        preventAwakeOrCreateSession: boolean;
    }
}
export declare namespace GenModels {
    interface UnreadCountersFolderInfo {
        /**
         * Gets or sets folder identifier
         *
         * @format datatype.uuid
         */
        folderId: string;
        /**
         * Minutes to refresh counter
         */
        refreshTimeout: number;
        /**
         * Gets or sets virtual folder search refresh parameter
         */
        forceVirtualFolderSearch: boolean;
    }
}
export declare namespace GenModels {
    interface ShowSelectExistingCardRequestModel {
        /**
         * Card identifier.
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Is report.
         */
        isReport?: boolean;
        /**
         * Allowed link types.
         */
        allowedLinkTypes: Array<string>;
    }
}
export declare namespace GenModels {
    interface LinkAddModel {
        /**
         * Gets or sets card timestamp
         */
        timestamp?: number;
        /**
         * Gets or sets source card identifier
         *
         * @format datatype.uuid
         */
        sourceCardId?: string;
        /**
         * Gets or sets destination card identifier
         *
         * @format datatype.uuid
         */
        destinationCardId?: string;
        /**
         * Gets or sets link type identifier
         *
         * @format datatype.uuid
         */
        linkTypeId?: string;
        /**
         * Gets or sets flag if link is backward
         */
        oppositeLinkName: string;
        /**
         * Gets or sets source card type
         *
         * @format datatype.uuid
         */
        sourceCardType?: string;
        /**
         * Gets or sets flag if link is file
         */
        isFileLink?: boolean;
        /**
         * Gets or sets flag if link is report
         */
        isReport?: boolean;
        /**
         * Gets or sets value whether indicate create link for new card
         */
        isNewCard?: boolean;
        /**
         * Gets or sets link types
         */
        linkTypes: Array<GenModels.LinkTypeModel>;
        /**
         * Gets or sets value whether LinkTypes array has some predefined order
         */
        linkTypesSorted?: boolean;
        /**
         * Gets or sets value whether hard link should be created
         */
        hardLink?: boolean;
        /**
         * Gets or sets is link type selectable
         */
        isLinkTypeSelectable?: boolean;
    }
}
export declare namespace GenModels {
    interface LinkTypeModel {
        /**
         * Gets or sets id
         *
         * @format datatype.uuid
         */
        linkTypeId: string;
        /**
         * Gets or sets type name
         */
        name: string;
        /**
         * Gets or set display name
         */
        displayName: string;
        /**
         * Gets or sets flag indicated if the link is bidirectional
         */
        oppositeLinkName: string;
    }
}
export declare namespace GenModels {
    interface GetNavigatorFoldersRequestModel {
        id?: string;
        excludeSearchParamFolder: boolean;
    }
}
export declare namespace GenModels {
    interface AttachUserFoldersRequestModel {
        folderIds: Array<string>;
    }
}
export declare namespace GenModels {
    interface StaffQuery {
        /**
         * Query type
         */
        queryType: GenModels.SearchQueryType;
        /**
         * Search mode
         */
        itemTypes: GenModels.DirectoryDataType;
        /**
         * Check children types
         */
        childItemTypes?: GenModels.DirectoryDataType;
        /**
         * Search text
         */
        searchText?: string;
        /**
         * Parent id
         *
         * @format datatype.uuid
         */
        parentId?: string;
        /**
         * Type of entity, which id passed in ParentId
         */
        parentType?: GenModels.DirectoryDataType;
        /**
         * Skip and max count
         */
        pagination: GenModels.Pagination;
        /**
         * Information about query initiator for loading last items.
         */
        context?: GenModels.StaffQueryContext;
        /**
         * List of identifiers, which should be removed from result.
         */
        excludeItems?: Array<string>;
    }
}
export declare namespace GenModels {
    interface StaffQueryContext {
        /**
         * Card, where control located.
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Card type of the card, where control located.
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Card type of the card, where control located.
         *
         * @format datatype.uuid
         */
        cardKindId: string;
        /**
         * Control binding
         */
        binding: GenModels.StaffItemsDataSourceModel;
        /**
         * Custom key (if not specified {@link GenModels} is used).
         */
        favoritesCustomKey: string;
    }
}
export declare namespace GenModels {
    interface StaffItemsDataSourceModel {
        /**
         * Section identifier
         *
         * @format datatype.uuid
         */
        dataSourceCardSection?: string;
        /**
         * Extended data source
         *
         * @format datatype.uuid
         */
        extendedDataSource: string;
        /**
         * Employee field alias
         */
        employeeAlias: string;
        /**
         * Group field alias
         */
        groupAlias: string;
        /**
         * Role field alias
         */
        roleAlias: string;
        /**
         * Unit field alias
         */
        unitAlias: string;
        /**
         * SearchWord field alias
         */
        searchWordAlias: string;
        /**
         * Position field alias
         */
        positionAlias: string;
        /**
         * Organization restriction.
         *
         * @format datatype.uuid
         */
        selectFromOrganization?: string;
        /**
         * Group restriction.
         *
         * @format datatype.uuid
         */
        selectFromGroup?: string;
        /**
         * Group area enabled
         */
        groupAreaEnabled: boolean;
        /**
         * Role area enabled
         */
        roleAreaEnabled: boolean;
        /**
         * Unit area enabled
         */
        unitAreaEnabled: boolean;
        /**
         * SearchWord area enabled
         */
        searchWordAreaEnabled: boolean;
        /**
         * Position area enabled
         */
        positionAreaEnabled: boolean;
        /**
         * Employee selection enabled
         */
        employeeEnabled: boolean;
        /**
         * Group selection enabled
         */
        groupEnabled: boolean;
        /**
         * Role selection enabled
         */
        roleEnabled: boolean;
        /**
         * Unit selection enabled
         */
        unitEnabled: boolean;
        /**
         * SearchWord selection enabled
         */
        searchWordEnabled: boolean;
        /**
         * Position selection enabled
         */
        positionEnabled: boolean;
    }
}
export declare namespace GenModels {
    interface StaffLoadResponse {
        /**
         * List of partner directory items
         */
        items: Array<GenModels.StaffDirectoryItem>;
        /**
         * Total items count, including not loaded items or zero, if total count is not available.
         */
        totalItemsCount: number;
        /**
         * Total partners count
         */
        hasMore: boolean;
        /**
         * Directory timestamp
         */
        directoryTimestamp: number;
    }
}
export declare namespace GenModels {
    interface StaffDirectoryItem {
        /**
         * Item data
         */
        data: GenModels.IDirectoryItemData;
        /**
         * Has item any children
         */
        hasChildren: boolean;
        /**
         * Partner search info
         */
        searchInfo: GenModels.SearchInfo;
        /**
         * Path where item located. Loaded only for search queries.
         */
        path: Array<GenModels.IDirectoryItemData>;
    }
}
export declare namespace GenModels {
    interface AddToFavoritesQuery {
        /**
         * List of partner directory items
         */
        items: Array<GenModels.DirectoryItemData>;
        /**
         * Information about query initiator for loading last items.
         */
        context: GenModels.StaffQueryContext;
    }
}
export declare namespace GenModels {
    interface AccountCheckResult {
        /**
         * Gets or sets value indicating whether account is found
         */
        accountFound: boolean;
        /**
         * Gets or sets full account name
         */
        fullAccountName: string;
        /**
         * Gets or sets error message
         */
        errorMessage: string;
    }
}
export declare namespace GenModels {
    interface StaffDataModel extends GenModels.IDirectoryItemData {
        /**
         * Entity identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Entity name
         */
        name: string;
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface StaffGroupDataModel extends GenModels.StaffDataModel {
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface SetEmployeeGroupsQuery {
        /**
         * Gets or sets employee identifier
         *
         * @format datatype.uuid
         */
        employeeId: string;
        /**
         * Gets or sets groups identifiers
         */
        groupIds: Array<string>;
    }
}
export declare namespace GenModels {
    interface SetEmployeeGroupsResult {
        /**
         * Gets or sets error message
         */
        errorMessage: string;
        /**
         * Gets or sets denied groups
         */
        deniedGroups: Array<string>;
    }
}
export declare namespace GenModels {
    interface TakeAndSetGroupsRequest {
        /**
         * Employees which will have groups set
         */
        employeesToSet: Array<string>;
        /**
         * Employyes which groups will be used
         */
        employeesAsGroupsSource: Array<string>;
    }
}
export declare namespace GenModels {
    interface TakeAndSetGroupsResult {
        /**
         * Error Message
         */
        errorMessage: string;
        /**
         * Groups
         */
        groups: Array<GenModels.StaffGroupDataModel>;
    }
}
export declare namespace GenModels {
    interface AddToGroupRequestModel {
        /**
         * Gets or sets group identifier
         *
         * @format datatype.uuid
         */
        groupId: string;
        /**
         * Gets or sets employees identifiers collection
         */
        employeeIds: Array<string>;
        /**
         * Gets or sets staff units identifiers collection
         */
        unitIds: Array<string>;
        /**
         * Gets or sets staff positions identifiers collection
         */
        positionIds: Array<string>;
        /**
         * Gets or sets staff group identifiers
         */
        groupIds: Array<string>;
    }
}
export declare namespace GenModels {
    interface EmployeeListRequestModel {
        /**
         * Instance id
         *
         * @format datatype.uuid
         */
        instanceId?: string;
        /**
         * Device type
         */
        deviceType: GenModels.DeviceType;
        /**
         * Hierarchy type
         */
        hierarchyType: GenModels.HierarchyType;
        /**
         * Hierarchy item id
         *
         * @format datatype.uuid
         */
        hierarchyItemID: string;
        /**
         * Gets or sets use sub-items
         */
        withChildren: boolean;
        /**
         * Gets or sets page number
         */
        pageNumber: number;
        /**
         * Page size
         */
        pageSize: number;
    }
}
export declare namespace GenModels {
    interface StaffDirectoryItemsMoveModel {
        /**
         * Staff Id
         *
         * @format datatype.uuid
         */
        staffId: string;
        /**
         * Target Id
         *
         * @format datatype.uuid
         */
        targetId: string;
    }
}
export declare namespace GenModels {
    interface EmployeeMoveModel {
        /**
         * Staff Id
         *
         * @format datatype.uuid
         */
        staffId: string;
        /**
         * Target Id
         *
         * @format datatype.uuid
         */
        targetId: string;
        /**
         * Directory Id
         *
         * @format datatype.uuid
         */
        directoryId: string;
        /**
         * Directory Data Type
         */
        directoryDataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface AddCardModalModel {
        /**
         * Links for creation of available cards
         */
        createLinks: Array<GenModels.AddCardModalModelLink>;
    }
}
export declare namespace GenModels {
    interface CardCreateLink {
        /**
         * Gets associated cardType
         */
        cardType: GenModels.CardTypeWeb;
        /**
         * Gets or sets KindId
         *
         * @format datatype.uuid
         */
        kindId?: string;
        /**
         * Gets or sets ShowMoreEnabled
         */
        showMoreEnabled: boolean;
        /**
         * Gets or sets KindName
         */
        kindName: string;
    }
}
export declare namespace GenModels {
    interface CardTypeWeb {
        /**
         * Gets card create route
         */
        route: string;
        /**
         * Get value where indicate card wild save in selected folder
         */
        saveInFolder: boolean;
        /**
         * Get value where indicate card color
         */
        cssClass: string;
        /**
         * Gets card create route
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Gets display name
         */
        displayName: string;
    }
}
export declare namespace GenModels {
    interface AddCardModalModelLink extends GenModels.CardCreateLink {
        /**
         * Card type
         */
        cardType: GenModels.CardTypeWeb;
        /**
         * Layout available
         */
        layoutAvailable: boolean;
        /**
         * Route
         */
        route: string;
        /**
         * Color CSS class name
         */
        colorCssClassName: string;
        /**
         * Default kind
         */
        defaultKind: string;
        /**
         * Save in folder
         */
        saveInFolder: string;
    }
}
export declare namespace GenModels {
    interface UploadToDssResponse {
        /**
         * Signature parts
         */
        parts: Array<GenModels.DocumentSignaturePartInfo>;
        /**
         * DSS server response
         */
        dssResponse: any;
    }
}
export declare namespace GenModels {
    interface ApplicationSettings {
        /**
         * Gets or sets route settings
         */
        route: GenModels.RouteSettings;
        /**
         * Gets or sets current employee
         */
        employee: GenModels.CurrentEmployeeInfo;
        /**
         * Gets or sets environment settings
         */
        environment: GenModels.EnvironmentSettings;
        /**
         * Gets or sets culture settings
         */
        culture: GenModels.CultureSettings;
        /**
         * Gets or sets realtime communication settings
         */
        realtimeCommunication: GenModels.RealtimeCommunicationSettings;
        /**
         * Cryptographic settings
         */
        cryptoSettings: GenModels.CryptoSettings;
        /**
         * Available locales
         */
        availableLocales: Array<GenModels.Locale>;
        /**
         * Some common application data, that can be cached.
         */
        data: GenModels.CommonData;
        /**
         * Gets or sets current employee
         */
        userProfile: GenModels.UserProfile;
        /**
         * Gets or sets behavior settings
         */
        behavior: GenModels.BehaviorSettings;
        /**
         * Settings of folder grid.
         */
        grid: GenModels.GridSettings;
        /**
         * Available features
         */
        features: Array<GenModels.Feature>;
        /**
         * Gets os sets pdf preview mode
         */
        pdfPreviewMode: GenModels.PdfPreviewMode;
        /**
         * Gets os sets pdf preview mode
         */
        pdfCacheLifetime: number;
        /**
         * Pdf cache directory
         */
        pdfCacheDirectory: string;
        /**
         * Pdf allow partial load
         */
        pdfAllowPartialLoad: boolean;
        /**
         * Gets or sets whether DVWebTool should be terminated after use.
         */
        dvWebToolAppShutDown: boolean;
        /**
         * Gets or sets whether DVWebTool should be launch after load OS.
         */
        dvWebToolStartUpLaunch: boolean;
        /**
         * Search context options
         */
        searchContextOptions: Array<GenModels.SearchOptionModel>;
        /**
         * Gets or sets needs to use old grid.
         */
        useOldGrid: GenModels.UseOldGrid;
        /**
         * Management console address
         */
        managementConsoleAddress: string;
        /**
         * Card must be deleted into the trash or deletes from database.
         */
        deletePermanently: boolean;
        /**
         * Gets ot sets connect address session parameter
         */
        connectAddress: string;
        /**
         * R7 address connection
         */
        serverR7ConnectionAddress: string;
        /**
         * File preview mode
         */
        filePreviewMode: GenModels.FilePreviewMode;
        /**
         * R7 secret token
         */
        serverR7SecretToken: string;
        /**
         * R7 upload directory
         */
        serverR7UploadDirectory: string;
        /**
         * Max preview file size
         */
        maxPreviewFileSize: number;
    }
}
export declare namespace GenModels {
    interface RouteSettings {
        /**
         * Gets or sets SammyPath to redirect after load
         */
        sammyPath: string;
        /**
         * Gets or sets whether log enabled
         */
        logEnabled: boolean;
    }
}
export declare namespace GenModels {
    interface CurrentEmployeeInfo extends GenModels.EmployeeModel {
        /**
         * Server role
         */
        serverRole: GenModels.ServerRole;
    }
}
export declare namespace GenModels {
    interface EnvironmentSettings {
        /**
         * Gets or sets application path
         */
        applicationPath: string;
        /**
         * Gets or sets whether BundleEnableOptimization
         */
        bundleEnableOptimization: boolean;
        /**
         * Gets or sets whether FullTextSearchEnabled
         */
        fullTextSearchEnabled: boolean;
        /**
         * Returns true whether grid filter supported
         */
        gridFilterSupported: boolean;
        /**
         * Returns true if SmartSearch is allowed in the Docsvision system
         */
        smartSearchEnabled: boolean;
        /**
         * Gets or sets base alias
         */
        baseAlias: string;
        /**
         * Gets or sets max upload file item size
         */
        maxUploadFileItemSize: number;
        /**
         * Max file name length, that server can accept.
         */
        maxUploadFileLength: number;
        /**
         * Gets or sets help uri
         */
        helpUri: string;
        /**
         * Enable sending client errors information to server log.
         */
        sendBrowserLogToServer: boolean;
        /**
         * Unique value associated with application start time.
         */
        applicationTimestamp: string;
        /**
         * Unique value of the application version.
         */
        applicationRevision: string;
        /**
         * Enable logging of key application loading stages with time.
         */
        enablePerformanceLogging: boolean;
        /**
         * Port on localhost that util is listening.
         */
        webServicesConnectionPort: number;
        /**
         * DVWebTool installer Uri
         */
        dvWebToolInstallerUri: string;
        /**
         * File extensions regular expression, that could be loaded to system.
         */
        acceptableFileExtensions: string;
        /**
         * Current Web-client connection.
         */
        storageServerUrl: string;
        /**
         * Application pool credentials.
         */
        poolAccountName: string;
        /**
         * Feedback URL
         */
        feedbackUrl: string;
        /**
         * Enabled unread counters or not.
         */
        unreadCountersEnabled: boolean;
        /**
         * Disable warning if file is read only
         */
        disableReadOnlyWarning: boolean;
    }
}
export declare namespace GenModels {
    interface CultureSettings {
        /**
         * Gets or sets name
         */
        name: string;
        /**
         * Gets or sets twoLetterISOLanguageName
         */
        twoLetterISOLanguageName: string;
        /**
         * Gets or sets NumberDecimalSeparator
         */
        numberDecimalSeparator: string;
        /**
         * Gets or sets NumberGroupSeparator
         */
        numberGroupSeparator: string;
        /**
         * Gets or sets PercentDecimalDigits
         */
        percentDecimalDigits: number;
        /**
         * Gets or sets LongTimePattern
         */
        longTimePattern: string;
        /**
         * Gets or sets LongDatePattern
         */
        longDatePattern: string;
        /**
         * Gets or sets FullDateTimePattern
         */
        fullDateTimePattern: string;
        /**
         * Gets or sets ShortDatePattern
         */
        shortDatePattern: string;
        /**
         * Gets or sets ShortTimePattern
         */
        shortTimePattern: string;
        /**
         * Gets or sets FirstDayOfWeek
         */
        firstDayOfWeek: System.DayOfWeek;
        /**
         * Gets or sets number group size
         */
        numberGroupSizes: Array<number>;
        /**
         * Gets or sets number decimal digits
         */
        numberDecimalDigits: number;
    }
}
export declare namespace GenModels {
    interface RealtimeCommunicationSettings {
        /**
         * Gets or sets session id
         */
        sessionId: string;
        /**
         * Gets or sets whether log enabled
         */
        logEnabled: boolean;
        /**
         * Gets or sets message type, that unread counters service will send.
         */
        unreadCountersMessageType: string;
        /**
         * Gets ot sets initialization timeout
         */
        initializationTimeout: number;
        /**
         * Gets or sets whether inactive session message hide
         */
        inactiveSessionMessageHide: boolean;
    }
}
export declare namespace GenModels {
    interface CryptoSettings {
        /**
         * Browser plug-in download link
         */
        cspPluginDownloadLink: string;
        /**
         * КриптоПро CSP
         */
        cspDownloadLink: string;
        /**
         * Possible extensions for signature files.
         */
        signatureFileExtensions: Array<string>;
        /**
         * Settings for cloud signature (DSS)
         */
        cloudSignature: GenModels.CloudSignatureSettings;
    }
}
export declare namespace GenModels {
    interface CloudSignatureSettings {
        /**
         * Path to DSS host
         */
        address: string;
        /**
         * Client id, registered in DSS.
         */
        clientId: string;
        /**
         * Name of SignServer application in IIS
         */
        signServerAppName: string;
        /**
         * Name of STS application in IIS
         */
        stsAppName: string;
        /**
         * Name of DocumentStore application in IIS
         */
        documentStoreAppName: string;
        /**
         * URL of verification service. For example https://dss.cryptopro.ru/verify/rest/api/signatures.
         */
        verifyUrl: string;
        /**
         * URL of TSP service.
         */
        tspServiceAddress: string;
        /**
         * SignatureType setting (Cades-Bes или Cades-Xlong-Type1)
         */
        signatureType: GenModels.CloudSignatureType;
        /**
         * User cloud signature verification, or built in.
         */
        enableCloudVerify: boolean;
        /**
         * Registered in DSS full address to CryptoProDssController/AcceptAuthorization action.
         */
        authorizeRedirectUrl: string;
        /**
         * Load cloud user profile certificate info on first use.
         */
        actualizeCloudProfileCertificate: boolean;
    }
}
export declare namespace GenModels {
    interface Locale {
        /**
         * Gets or sets LCID
         */
        LCID: number;
        /**
         * Gets or sets culture name
         */
        name: string;
        /**
         * Gets or sets display name
         */
        displayName: string;
    }
}
export declare namespace GenModels {
    interface CommonData {
        /**
         * Available card types
         */
        cardTypes: Array<GenModels.CardTypeModel>;
        /**
         * Translations
         */
        localization: {
            [name: string]: string;
        };
    }
}
export declare namespace GenModels {
    interface CardTypeModel {
        name: string;
        id: string;
    }
}
export declare namespace GenModels {
    interface UserProfile {
        /**
         * Activate status refuse last date and time
         *
         * @format datatype.datetime
         */
        lastRefuseDateTime: string;
        /**
         * Show Archived Cards
         */
        showArchivedCards: boolean;
        /**
         * Show Help button
         */
        showHelpButton: boolean;
    }
}
export declare namespace GenModels {
    interface BehaviorSettings {
        /**
         * Main menu behavior
         */
        uxMainMenuBehavior: GenModels.UXMainMenuBehavior;
        /**
         * Default button position
         */
        defaultButtonPosition: GenModels.ButtonPositions;
        /**
         * Hide sidebar on page click
         */
        hideSidebarOnPageClick: boolean;
        /**
         * Returns true whether tenant name must be shown
         */
        showTenantName: boolean;
    }
}
export declare namespace GenModels {
    interface GridSettings {
        /**
         * Page size to load cards from server
         */
        pageSize: number;
        /**
         * Time to apply selected aggregates filters.
         */
        applyAggregatesTimeout: number;
        /**
         * Enable manual applying of aggregates by button.
         */
        applyAggregatesButton: boolean;
    }
}
export declare namespace GenModels {
    interface Feature {
        /**
         * Gets or sets ID
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets feature's availability
         */
        isAvailable: boolean;
    }
}
export declare namespace GenModels {
    interface SearchOptionModel {
        /**
         * Gets or sets option id
         */
        id: string;
        /**
         * Gets or sets option display name
         */
        displayName: string;
        /**
         * Gets or sets option placeholder
         */
        placeholder: string;
    }
}
export declare namespace GenModels {
    interface CardNodeInfo {
        kindId: string;
        cardTypeId: string;
        caption: string;
        withDescendants: boolean;
    }
}
export declare namespace GenModels {
    interface AdminPanelMessageModel {
        cardId: string;
        messageCardId: string;
    }
}
export declare namespace GenModels {
    interface AgreementHistoryDataModel {
        historyExists: boolean;
        agreementCardId: string;
    }
}
export declare namespace GenModels {
    interface AgreementManagementButtonModel {
        agreementManagementOperation: GenModels.AgreementManagementOperations;
        displayName: string;
    }
}
export declare namespace GenModels {
    interface CardLinkDataModel {
        cardId: string;
        cardDigest: string;
        cardViewAllowed: boolean;
        mainFileReadAllowed: boolean;
    }
}
export declare namespace GenModels {
    interface ControlsInfoModel {
        controlDisplayName: string;
        controlName: string;
        showParameter: GenModels.ShowParametersOptions;
        completionParameterModel: GenModels.CompletionParameterModel;
    }
}
export declare namespace GenModels {
    interface CompletionParameterModel {
        /**
         * Gets or sets parameter identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets field name
         */
        name: string;
        /**
         * Gets or sets value indicated where field is required
         */
        required: boolean;
        /**
         * Gets or sets field type
         */
        type: GenModels.CompletionParameterType;
        /**
         * Gets or sets value
         */
        value: string;
        isEmpty: boolean;
        /**
         * Gets or sets employee
         */
        complexValue: any;
        showInCompletionDialog: boolean;
    }
}
export declare namespace GenModels {
    interface CreateKindDataModel {
        createRouteName: string;
        id: string;
        cardTypeId: string;
        displayName: string;
        isTemplate: boolean;
        isApprovingChildTasksNode: boolean;
    }
}
export declare namespace GenModels {
    interface DisplayStaffUnitModel {
        displayString: string;
        tooltip: string;
        errorMessage: string;
    }
}
export declare namespace GenModels {
    interface ElementsDataModel {
        elements: Array<GenModels.Element>;
        isEmptyKeyAllowed: boolean;
    }
}
export declare namespace GenModels {
    interface Element {
        /**
         * Unique key
         */
        key: string;
        /**
         * Element value
         */
        value: string;
        /**
         * Element value code
         */
        valueCode: number;
    }
}
export declare namespace GenModels {
    interface LayoutTableBindingModel {
        sectionId: string;
        skippedCount: number;
        hasMore: boolean;
        loadedRows: Array<string>;
        addedRows: Array<string>;
        deletedRows: Array<string>;
        rowsOrder: Array<string>;
    }
}
export declare namespace GenModels {
    interface LayoutTableColumnInfo {
        header: string;
        columnWidth: string;
        tip: string;
        visibility: boolean;
    }
}
export declare namespace GenModels {
    interface MultipleEmployeesDataModel {
        employees: Array<GenModels.EmployeeDataModel>;
        fieldPath: string;
    }
}
export declare namespace GenModels {
    interface OperationDataModel {
        operationId: string;
        builtInOperationId: string;
        displayName: string;
        tooltip: string;
        displayMode: GenModels.StateOperationDisplayMode;
        isGenerated: boolean;
        generatedOperationId: string;
        color: string;
        textColor: string;
        order: number;
        completionOptionId?: string;
        requestConfirmation: boolean;
        additionalInfo: GenModels.OperationAdditionalInfoDataModel;
        fieldInfo: GenModels.OperationFieldInfo;
    }
}
export declare namespace GenModels {
    interface OperationAdditionalInfoDataModel {
        decisionSemantics?: GenModels.DecisionSemantics;
        decisionName: string;
    }
}
export declare namespace GenModels {
    interface TransformationDataModel {
        id: string;
        name: string;
        displayName: string;
        default: boolean;
    }
}
export declare namespace GenModels {
    interface UploadFileFromDirectoryModel {
        documentId: string;
        fileId: string;
        timestamp: number;
        fileName: string;
        filePathInTempStorage: string;
        loadNewVersion: boolean;
    }
}
export declare namespace GenModels {
    interface CardTreeNodeModel extends GenModels.TreeNodeModel {
        /**
         * Gets or sets card name
         */
        name: string;
    }
}
export declare namespace GenModels {
    interface DelegationRecord {
        /**
         * Gets or sets previous performer display name
         */
        fromPerformer: string;
        /**
         * Gets or sets new performer display name
         */
        toPerformer: string;
    }
}
export declare namespace GenModels {
    interface TaskCurrentPerformer {
        /**
         * Gets or sets display name
         */
        displayName: string;
        /**
         * Gets or sets employee model
         */
        employeeModel: GenModels.EmployeeModel;
        /**
         * Hash of the user image
         */
        imageHash: string;
    }
}
export declare namespace GenModels {
    interface TaskGroupSelectedPerformer {
        /**
         * Gets or sets display name
         */
        displayName: string;
        /**
         * Gets or sets value indicating whether performer is responsible
         */
        isResponsiblePerformer: boolean;
        /**
         * Gets or sets employee model
         */
        employeeModel: GenModels.EmployeeModel;
    }
}
export declare namespace GenModels {
    interface TaskGroupTreeNodeHelpModel extends GenModels.TreeNodeHelpModel {
        /**
         * Gets or sets execution type
         */
        executionType: GenModels.ExecutionType;
        /**
         * Gets or sets author
         */
        author: GenModels.EmployeeModel;
        /**
         * Gets selected performers
         */
        selectedPerformers: Array<GenModels.TaskGroupSelectedPerformer>;
        /**
         * Gets or sets task name
         */
        name: string;
        /**
         * Gets or sets task content
         */
        content: string;
        /**
         * Gets or sets task end date
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Gets or sets controller
         */
        controller: GenModels.EmployeeModel;
        /**
         * Gets or sets task control date
         *
         * @format datatype.datetime
         */
        controlDate?: string;
    }
}
export declare namespace GenModels {
    interface TaskGroupTreeNodeHintModel extends GenModels.TreeNodeHintModel {
        /**
         * Gets or sets task group name
         */
        name: string;
        /**
         * Gets or sets task group end date
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Gets or sets execution type
         */
        executionType: GenModels.ExecutionType;
        /**
         * Gets task state class name
         */
        stateClassName: string;
        /**
         * Gets selected performers
         */
        selectedPerformers: Array<GenModels.TaskGroupSelectedPerformer>;
    }
}
export declare namespace GenModels {
    interface TaskGroupTreeNodeModel extends GenModels.TreeNodeModel {
        /**
         * Gets or sets execution type
         */
        executionType: GenModels.ExecutionType;
        /**
         * Gets or sets value indicating whether task group is overdue
         */
        isOverdue: boolean;
        /**
         * Gets or sets task group priority
         */
        priority: GenModels.Priority;
        /**
         * Gets or sets state category
         */
        stateCategory: GenModels.TaskGroupStateCategory;
        /**
         * Gets or sets value indicating whether task group on control
         */
        onControl: boolean;
    }
}
export declare namespace GenModels {
    interface TaskTreeNodeHelpModel extends GenModels.TreeNodeHelpModel {
        /**
         * Gets or sets author
         */
        author: GenModels.EmployeeModel;
        /**
         * Gets current performers
         */
        currentPerformers: Array<GenModels.TaskCurrentPerformer>;
        /**
         * Gets or sets delegation hint
         */
        delegationHint: GenModels.DelegationRecord;
        /**
         * Gets or sets task name
         */
        name: string;
        /**
         * Gets or sets task content
         */
        content: string;
        /**
         * Gets or sets task end date
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Gets or sets controller
         */
        controller: GenModels.EmployeeModel;
        /**
         * Gets or sets task control date
         *
         * @format datatype.datetime
         */
        controlDate?: string;
        /**
         * Gets or sets actual end date
         *
         * @format datatype.datetime
         */
        endDateActual?: string;
        /**
         * Gets or sets report
         */
        report: string;
        /**
         * Gets or sets report files
         */
        reportFiles: Array<GenModels.LinkModel>;
        /**
         * Gets delegation history
         */
        delegationHistory: Array<GenModels.DelegationRecord>;
        /**
         * Gets or sets completed user
         */
        completedUser: GenModels.EmployeeModel;
    }
}
export declare namespace GenModels {
    interface LinkModel {
        /**
         * Gets link identifier
         *
         * @format datatype.uuid
         */
        linkId: string;
        /**
         * Gets display link name
         */
        displayName: string;
        /**
         * Gets link type identifier
         *
         * @format datatype.uuid
         */
        linkTypeId: string;
        /**
         * Gets link type name
         */
        linkTypeName: string;
        /**
         * link kind
         */
        kind: GenModels.LinkKind;
        /**
         * Is linked card a document card.
         */
        isDocument: boolean;
        /**
         * Card type identifier
         *
         * @format datatype.uuid
         */
        cardTypeId: string;
        /**
         * Card kind identifier
         *
         * @format datatype.uuid
         */
        cardKindId: string;
        /**
         * Gets linked card identifier
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Gets link creation date
         *
         * @format datatype.datetime
         */
        creationDate?: string;
        /**
         * Gets display name of the author of the link.
         */
        authorDisplayName: string;
        /**
         * Gets link description model
         */
        linkDescription: GenModels.LinkDescriptionModel;
        /**
         * Gets or sets description
         */
        description: string;
        /**
         * Gets link description
         */
        url: string;
        /**
         * Gets or sets can delete link
         */
        canDelete: boolean;
    }
}
export declare namespace GenModels {
    interface LinkDescriptionModel {
        /**
         * Gets or sets link description mode
         */
        linkDescriptionMode: GenModels.LinkDescriptionMode;
        /**
         * Gets or sets text
         */
        text: string;
        /**
         * Gets or sets layout
         */
        layout: GenModels.ILayoutViewModel;
    }
}
export declare namespace GenModels {
    interface TaskTreeNodeHintModel extends GenModels.TreeNodeHintModel {
        /**
         * Gets or sets task name
         */
        name: string;
        /**
         * Gets or sets task end date
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Gets task state class name
         */
        stateClassName: string;
        /**
         * Gets or sets delegation hint
         */
        delegationHint: GenModels.DelegationRecord;
    }
}
export declare namespace GenModels {
    interface TaskTreeNodeModel extends GenModels.TreeNodeModel {
        /**
         * Gets or sets value indicating whether task has delegates
         */
        hasDelegates: boolean;
        /**
         * Gets or sets value indicating whether task has report
         */
        hasReport: boolean;
        /**
         * Gets or sets value indicating whether task has file report
         */
        hasFileReport: boolean;
        /**
         * Gets or sets value indicating whether task on control
         */
        onControl: boolean;
        /**
         * Gets or sets value indicating whether task is task of responsible performer in parent task group
         */
        isResponsiblePerformerTask: boolean;
        /**
         * Gets or sets performer gender
         */
        gender: GenModels.PerformerGender;
        /**
         * Gets or sets value indicating whether task is overdue
         */
        isOverdue: boolean;
        /**
         * Gets or sets task priority
         */
        priority: GenModels.Priority;
        /**
         * Gets or sets task state category
         */
        stateCategory: GenModels.TaskStateCategory;
        /**
         * Gets current performers
         */
        currentPerformers: Array<GenModels.TaskCurrentPerformer>;
    }
}
export declare namespace GenModels {
    interface StaffPositionDataModel extends GenModels.StaffDataModel {
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface StaffRoleDataModel extends GenModels.StaffDataModel {
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface StaffSearchWordDataModel extends GenModels.StaffDataModel {
        /**
         * Type of the data
         */
        dataType: GenModels.DirectoryDataType;
    }
}
export declare namespace GenModels {
    interface CompletionOption {
        /**
         * Gets or sets completion option identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets name
         */
        name: string;
        /**
         * Gets or sets localized name
         */
        localizedName: string;
        /**
         * Gets or sets value
         */
        value: number;
        /**
         * Gets or sets value indicating whether option is default
         */
        isDefault: boolean;
        /**
         * Gets attributes collection
         */
        parameters: Array<GenModels.CompletionParameter>;
        /**
         * Gets or sets color
         */
        color: string;
        /**
         * Button color code
         */
        colorCode?: number;
    }
}
export declare namespace GenModels {
    interface CompletionParameter {
        /**
         * Gets completion parameter type
         */
        type: GenModels.CompletionParameterType;
        /**
         * Gets or sets section identifier
         *
         * @format datatype.uuid
         */
        sectionId: string;
        /**
         * Gets or sets field name
         */
        fieldName: string;
        /**
         * Gets or sets value indicating whether attribute is required
         */
        required: boolean;
        /**
         * Gets or sets display name
         */
        displayName: string;
        /**
         * Gets or sets display mode
         */
        displayMode: GenModels.CompletionParameterDisplayMode;
        /**
         * Gets or sets value
         */
        value: any;
        /**
         * Gets value indicating whether Value is empty
         */
        isEmpty: boolean;
        /**
         * Gets or sets parameter identifier
         *
         * @format datatype.uuid
         */
        id: string;
        showInCompletionDialog: boolean;
        /**
         * Gets or sets elements for enum parameter
         */
        elements: Array<GenModels.Element>;
    }
}
export declare namespace GenModels {
    interface AddressModel {
        /**
         * Gets or sets address type
         */
        addressType: GenModels.AddressTypeModeItems;
        /**
         * Gets or sets zipcode
         */
        zipCode: string;
        /**
         * Gets or sets city
         */
        city: string;
        /**
         * Gets or sets address
         */
        address: string;
        /**
         * Gets or sets country
         */
        country: string;
    }
}
export declare namespace GenModels {
    interface ColumnsConfiguration {
        /**
         * Columns order and visibility
         */
        columns: Array<GenModels.ColumnDescription>;
    }
}
export declare namespace GenModels {
    interface ColumnDescription {
        /**
         * Column type
         */
        columnType: number;
        /**
         * Column name
         */
        name: string;
        /**
         * Is column visible to user
         */
        visible: boolean;
    }
}
export declare namespace GenModels {
    interface DirectoryDesignerRowDataSourceModel {
        /**
         * Card Section
         *
         * @format datatype.uuid
         */
        dataSourceCardSection?: string;
        /**
         * Alias of field with ItemType
         */
        itemTypeAlias: string;
        /**
         * Alias of field with Item
         */
        itemAlias: string;
    }
}
export declare namespace GenModels {
    interface PerformersTypeDialogModel {
        /**
         * Organization restriction.
         *
         * @format datatype.uuid
         */
        selectFromOrganization?: string;
        /**
         * Group restriction.
         *
         * @format datatype.uuid
         */
        selectFromGroup?: string;
        /**
         * Group area enabled
         */
        groupAreaEnabled: boolean;
        /**
         * Role area enabled
         */
        roleAreaEnabled: boolean;
        /**
         * Unit area enabled
         */
        unitAreaEnabled: boolean;
        /**
         * Employee area enabled
         */
        employeeValueEnabled: boolean;
        /**
         * Group area enabled
         */
        groupValueEnabled: boolean;
        /**
         * Role area enabled
         */
        roleValueEnabled: boolean;
        /**
         * Unit area enabled
         */
        unitValueEnabled: boolean;
    }
}
export declare namespace GenModels {
    interface TaskDelegationInfoModel {
        /**
         * Gets or sets lis of delegate
         */
        delegates: Array<GenModels.TaskCardDelegateItemModel>;
        /**
         * Get delegate status
         */
        status: string;
        /**
         * Get task state type
         */
        stateType: GenModels.TaskStateType;
        /**
         * Gets or sets completion option where task state in Completed
         */
        completionOption: GenModels.CompletionOptionModel;
        /**
         * Task performer
         */
        taskInitialPerformer: GenModels.EmployeeModel;
    }
}
export declare namespace GenModels {
    interface TaskCardDelegateItemModel {
        /**
         * Gets or sets from delegate
         */
        sourceDelegate: GenModels.EmployeeModel;
        /**
         * Gets or sets to delegate
         */
        destinationDelegate: GenModels.EmployeeModel;
        /**
         * Gets or sets to delegated to employees
         */
        delegatedTo: Array<GenModels.EmployeeModel>;
        /**
         * Gets or set delegate date
         *
         * @format datatype.datetime
         */
        delegateDate: string;
        /**
         * Gets or set return from delegation date
         *
         * @format datatype.datetime
         */
        returnFromDelegationDate?: string;
        /**
         * Is the record about completed delegation
         */
        returnedFromDelegation: boolean;
        /**
         * Gets or set delegate comment
         */
        comment: string;
    }
}
export declare namespace GenModels {
    interface EmployeeModel {
        /**
         * Gets or sets employee identifier
         *
         * @format datatype.uuid
         */
        employeeId: string;
        /**
         * Display user full name
         */
        displayName: string;
        /**
         * Get employee first name
         */
        fistName: string;
        /**
         * Gets employee last name
         */
        lastName: string;
        /**
         * Get employee middle name
         */
        middleName: string;
        /**
         * Gets or sets employee email address
         */
        email: string;
        /**
         * Gets or sets employee display position
         */
        position: string;
        /**
         * Gets or sets unit
         */
        unit: GenModels.UnitModel;
        /**
         * Gets or set user account name
         */
        accountName: string;
        /**
         * Gets or sets deputy display name
         */
        deputyDisplayName: string;
        /**
         * Gets value indicating whether employee is favorite performer
         */
        isFavoritePerformer: boolean;
    }
}
export declare namespace GenModels {
    interface UnitModel {
        /**
         * Get unit identifier
         *
         * @format datatype.uuid
         */
        unitId: string;
        /**
         * Get unit name
         */
        unitName: string;
    }
}
export declare namespace GenModels {
    interface CompletionOptionModel {
        /**
         * Gets or sets completion option identifier
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Gets or sets name
         */
        name: string;
        /**
         * Gets or sets name
         */
        localizedName: string;
        /**
         * Gets or sets value
         */
        value: number;
        /**
         * Gets or sets IsDefault
         */
        isDefault: boolean;
        /**
         * Gets or sets value indicated whether has report filed in completion option
         */
        hasReportFieldInCompletionOption: boolean;
        /**
         * Gets attributes collection
         */
        parameters: Array<GenModels.CompletionParameterModel>;
        /**
         * Gets or sets color
         */
        color: string;
        /**
         * Button color code
         */
        colorCode?: number;
        /**
         * Operation as field value
         */
        fieldInfo: GenModels.OperationFieldInfo;
    }
}
export declare namespace GenModels {
    interface TaskGroupPerformersModel {
        /**
         * Task group interval
         */
        intervals: Array<GenModels.TaskGroupIntervalModel>;
        /**
         * Execution type
         */
        executionType: GenModels.ExecutionType;
    }
}
export declare namespace GenModels {
    interface TaskGroupIntervalModel {
        /**
         * Performer model
         */
        performer: GenModels.IDirectoryItemData;
        /**
         * Task description
         */
        description: string;
        /**
         * Does performer is responsible for entry task group.
         */
        isResponsible: boolean;
        /**
         * Task start date
         *
         * @format datatype.datetime
         */
        startDate?: string;
        /**
         * Task end date.
         *
         * @format datatype.datetime
         */
        endDate?: string;
        /**
         * Task duration
         */
        duration?: number;
        /**
         * Task order in task group.
         */
        order: number;
        /**
         * Hot to distribute tasks between group employees.
         */
        taskDistribution: GenModels.TaskGroupPerformerMode;
    }
}
export declare namespace GenModels {
    interface UniquenessCheckOperationsModel {
        /**
         * All operations enabled
         */
        allStateOperations: boolean;
        /**
         * Operations
         */
        operations: Array<GenModels.UniquenessCheckOperationModel>;
    }
}
export declare namespace GenModels {
    interface UniquenessCheckOperationModel {
        /**
         * Operation id
         *
         * @format datatype.uuid
         */
        operationId: string;
        /**
         * Operation enabled
         */
        enabled: boolean;
    }
}
export declare namespace GenModels {
    interface LinksColumnsConfiguration {
        /**
         * Columns order and visibility
         */
        columns: Array<GenModels.LinkColumnDescription>;
    }
}
export declare namespace GenModels {
    interface LinkColumnDescription {
        /**
         * Column type
         */
        columnType: GenModels.LinkColumnType;
        /**
         * Column name
         */
        name: string;
        /**
         * Is column visible to user
         */
        visible: boolean;
    }
}
export declare namespace GenModels {
    interface DisplayPerformersModel {
        /**
         * Gets or sets start performers
         */
        startPerformers: Array<GenModels.DisplayPerformersPerformer>;
        /**
         * Gets or sets end performers
         */
        endPerformers: Array<GenModels.DisplayPerformersPerformer>;
        /**
         * Has history
         */
        hasHistory: boolean;
    }
}
export declare namespace GenModels {
    interface CardApprovalStageModel {
        stageId: string;
        name: string;
    }
}
export declare namespace GenModels {
    interface AuthenticationExtensionModel {
        /**
         * Unique Id
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Name
         */
        name: string;
        /**
         * Picture
         */
        logo: Array<number>;
        /**
         * Description
         */
        description: string;
        /**
         * URL
         */
        URL: string;
        /**
         * Supported types of response
         */
        supportedTypes: Array<string>;
        /**
         * Supported modes of response
         */
        supportedModes: Array<string>;
        /**
         * Add state guid to login url
         */
        isStateCompare: boolean;
        /**
         * Time to refresh login uri in seconds
         */
        timeOut: number;
    }
}
export declare namespace GenModels {
    interface AuthenticationKindsModel {
        /**
         * Id
         *
         * @format datatype.uuid
         */
        extensionId: string;
        /**
         * Name
         */
        extensionName: string;
        /**
         * Flag if use extension for current user
         */
        useExtension: boolean;
        /**
         * User login in current extension
         */
        userExtensionLogin: string;
        /**
         * User id
         *
         * @format datatype.uuid
         */
        userId: string;
        /**
         * Flag if extension allowed check user login
         */
        checkButtonEnable: boolean;
        /**
         * Information that used as login
         */
        loginType: GenModels.AuthenticationLoginType;
        /**
         * State of extension license
         */
        licenseState: GenModels.AuthenticationExtensionState;
    }
}
export declare namespace GenModels {
    interface SearchItemModel {
        /**
         * Search item id, specific for directory
         *
         * @format datatype.uuid
         */
        id: string;
        /**
         * Search item card id
         *
         * @format datatype.uuid
         */
        cardId: string;
        /**
         * Search item name (case or unit name)
         */
        name: string;
        /**
         * Unit full name
         */
        fullName: string;
        /**
         * Search item index
         */
        index: string;
        /**
         * Path in the directory
         */
        path: Array<GenModels.SearchItemModel>;
        /**
         * Item type, specific for directory
         */
        dataType: number;
    }
}
export declare namespace GenModels {
    interface SystemStateNotification {
        /**
         * Notification source
         */
        source: GenModels.SystemStateNotificationSource;
        /**
         * Severity
         */
        severity: GenModels.SystemStateNotificationSeverity;
        /**
         * Tenant name (optional)
         */
        tenantName: string;
        /**
         * Employee account (optional)
         */
        accountName: string;
        /**
         * Employee id (optional)
         *
         * @format datatype.uuid
         */
        employeeId?: string;
        /**
         * Short description
         */
        caption: string;
        /**
         * Detailed description
         */
        details: string;
        /**
         * Unique event type identificator.
         */
        eventCode: number;
        /**
         * Source specific additional data of the notification
         */
        data: GenModels.ISystemStateNotificationData;
    }
}
export declare namespace GenModels {
    interface ISystemStateNotificationData {
    }
}
export declare namespace GenModels {
    interface FolderListModel {
        /**
         * ignore flag Checked and use all folders in list
         */
        allFolders: boolean;
        /**
         * folder list
         */
        folders: Array<GenModels.SelectFolderNodeExt>;
    }
}
export declare namespace GenModels {
    interface SelectFolderNodeExt {
        /**
         * selected folder node
         */
        folderNode: GenModels.SelectFolderNode;
        /**
         * is folder checked
         */
        isChecked: boolean;
    }
}
export declare namespace GenModels {
    /**
     * Type of directory value
     */
    enum DirectoryDataType {
        /**
         * Data can not be loaded.
         */
        NotAvailable = 0,
        /**
         * Role
         */
        Role = 1,
        /**
         * Group
         */
        Group = 2,
        /**
         * Position
         */
        Position = 4,
        /**
         * Search word
         */
        SearchWord = 8,
        /**
         * Department
         */
        Department = 16,
        /**
         * Organization
         */
        Organization = 32,
        /**
         * All directory items but employees
         */
        AllNodes = 63,
        /**
         * Employee
         */
        Employee = 64,
        /**
         * All directory items for approvers
         */
        AllApprovers = 115,
        /**
         * All directory items
         */
        All = 127
    }
}
export declare namespace GenModels {
    /**
     * Type of department
     */
    enum DepartmentType {
        /**
         * Organization
         */
        Organization = 0,
        /**
         * Department
         */
        Department = 1
    }
}
export declare namespace GenModels {
    enum StaffEmployeeStatus {
        Active = 0,
        Sick = 1,
        Vacation = 2,
        BusinessTrip = 3,
        Absent = 4,
        Discharged = 5,
        Transfered = 6,
        DischargedNoRestoration = 7
    }
}
export declare namespace GenModels {
    enum DecisionSemantics {
        None = 0,
        Positive = 1,
        Negative = 2,
        Neutral = 3,
        Cancellation = 4,
        NewCycle = 5,
        ApproversAddition = 6,
        NonNegative = 7,
        Any = 8,
        Completion = 100,
        Return = 200
    }
}
export declare namespace GenModels {
    enum StageTaskSendingMode {
        Sequential = 0,
        Parallel = 1
    }
}
export declare namespace GenModels {
    enum StageRepeatMode {
        Always = 0,
        Never = 1,
        ForNotApproved = 2,
        OnNegativeDecision = 3,
        WhenRejectedOrFileChanged = 4
    }
}
export declare namespace GenModels {
    enum ConditionType {
        None = 0,
        And = 1,
        Or = 2,
        Complex = 3
    }
}
export declare namespace GenModels {
    enum NodeType {
        Stage = 0
    }
}
export declare namespace GenModels {
    /**
     * Represents type of {@link GenModels}
     */
    enum BusinessCalendarSourceType {
        /**
         * Employee
         */
        Employee = 0,
        /**
         * Staff unit
         */
        StaffUnit = 1,
        /**
         * Staff group
         */
        StaffGroup = 2,
        /**
         * Staff group
         */
        StaffRole = 3
    }
}
export declare namespace GenModels {
    /**
     * Represents execution type
     */
    enum ExecutionType {
        /**
         * Serial
         */
        Serial = 0,
        /**
         * Parallel
         */
        Parallel = 1
    }
}
export declare namespace GenModels {
    /**
     * Filter operation
     */
    enum FilterOperation {
        /**
         * Default
         */
        Default = 0,
        /**
         * Contains
         */
        Contains = 1,
        /**
         * Equals
         */
        Equals = 2
    }
}
export declare namespace GenModels {
    /**
     * Filter Mode
     */
    enum FilterMode {
        /**
         * Default
         */
        Default = 0,
        /**
         * Date List
         */
        DateList = 1,
        /**
         * Date Calendar
         */
        DateCalendar = 2
    }
}
export declare namespace GenModels {
    /**
     * Defines grid view mode
     */
    enum GridViewMode {
        /**
         * Compact
         */
        Compact = 0,
        /**
         * Wrap
         */
        Wrap = 1
    }
}
export declare namespace GenModels {
    /**
     * Represents search context option
     */
    enum SearchContextOption {
        /**
         * Search in current folder
         */
        CurrentFolder = 0,
        /**
         * Search in current folder and subfolders
         */
        CurrentFolderAndSubFolders = 1,
        /**
         * Search in search results
         */
        SearchInSearchResults = 2,
        /**
         * Search everywhere
         */
        EveryWhere = 3
    }
}
export declare namespace GenModels {
    /**
     * Table presentation mode
     */
    enum TablePresentation {
        /**
         * Depends on device
         */
        Default = 0,
        /**
         * Classic table view
         */
        GridView = 1,
        /**
         * List view
         */
        ListView = 2
    }
}
export declare namespace GenModels {
    /**
     * Column width mode
     */
    enum ColumnWidthMode {
        /**
         * Minimal
         */
        Minimal = 0,
        /**
         * Medium
         */
        Medium = 1,
        /**
         * Maximal
         */
        Maximal = 2
    }
}
export declare namespace GenModels {
    /**
     * Declare device types
     */
    enum DeviceType {
        /**
         * Desktop
         */
        Desktop = 0,
        /**
         * Smartphone
         */
        Smartphone = 1,
        /**
         * Tablet
         */
        Tablet = 2
    }
}
export declare namespace GenModels {
    /**
     * Type of signature item
     */
    enum SignatureItemType {
        /**
         * Detached SignedCms
         */
        MainFileSignaturePartType = 0,
        /**
         * Nondetached SignedCms
         */
        MainFileWithContentSignaturePartType = 1,
        /**
         * Document card attributes
         */
        DocumentFieldsSignaturePartType = 2,
        /**
         * Document attachments (additional files)
         */
        AttachmentsSignaturePartType = 3
    }
}
export declare namespace GenModels {
    /**
     * Image generator type
     */
    enum ImageGeneratorType {
        /**
         * electronic signature generator type
         */
        ElectronicSignature = 0
    }
}
export declare namespace GenModels {
    /**
     * Represents what and how to search in directory designer tree
     */
    enum DirectoryDesignerSearchArea {
        /**
         * Query should return only specified node and its rows
         */
        OnlyNode = 1,
        /**
         * Query should return only node, children and children rows (without node rows).
         */
        OnlyChildren = 2,
        /**
         * Query should return node, children, node rows and children rows (i.e. everything).
         */
        NodeWithChildren = 3
    }
}
export declare namespace GenModels {
    /**
     * Represents type of tree node
     */
    enum DirectoryDesignerTreeNodeType {
        /**
         * directory designer item type (node)
         */
        Node = 1,
        /**
         * directory designer row
         */
        Row = 2
    }
}
export declare namespace GenModels {
    /**
     * Represents disabled card reasons
     */
    enum Reason {
        /**
         * Unknown
         */
        Unknown = 0,
        /**
         * Merge
         */
        Merge = 1,
        /**
         * Acquaintance
         */
        Acquaintance = 2
    }
}
export declare namespace GenModels {
    /**
     * Defines file attachments mode for SendEmailButton control.
     */
    enum FileAttachmentsMode {
        /**
         * Attach only main files.
         */
        OnlyMainFiles = 0,
        /**
         * Attach only additional files.
         */
        OnlyAdditionalFiles = 1,
        /**
         * Attach all files.
         */
        AllFiles = 2,
        /**
         * No need to attach files.
         */
        WithoutFiles = 3
    }
}
export declare namespace GenModels {
    /**
     * Folder DocsVision.Platform.Cards.Constants.FoldersCard.Folders.DefaultStyle property value
     */
    enum DvFolderStyles {
        /**
         * None
         */
        None = 0,
        /**
         * View displayed
         */
        FolderView = 1,
        /**
         * Card displayed
         */
        FolderCard = 2,
        /**
         * HTML page displayed
         */
        FolderURL = 4,
        /**
         * Digest view displayed
         */
        FolderDigest = 8,
        /**
         * All
         */
        All = 15
    }
}
export declare namespace GenModels {
    enum ColumnType {
        Integer = 0,
        String = 1,
        Float = 2,
        DateTime = 3,
        Bool = 5,
        Decimal = 6,
        UniqueId = 7
    }
}
export declare namespace GenModels {
    enum SortDirection {
        Ascending = 0,
        Descending = 1
    }
}
export declare namespace GenModels {
    /**
     * Represents layout type
     */
    enum LayoutType {
        /**
         * View
         */
        View = 0,
        /**
         * Edit
         */
        Edit = 1
    }
}
export declare namespace GenModels {
    /**
     * Represents layout type
     */
    enum LayoutAction {
        /**
         * Layout for view
         */
        View = 0,
        /**
         * Layout for edit
         */
        Edit = 1,
        /**
         * Layout for creating card
         */
        Create = 2
    }
}
export declare namespace GenModels {
    /**
     * Special folder variants from control FolderDataContext
     */
    enum SystemFolders {
        /**
         * Recent user cards
         */
        RecentCards = 0,
        /**
         * Search results
         */
        SearchResults = 1,
        /**
         * Favorites folder
         */
        Favorites = 2
    }
}
export declare namespace GenModels {
    /**
     * Defines type of Diagram control
     */
    enum DiagramType {
        /**
         * Bar type
         */
        Bar = 0,
        /**
         * StackedBar type
         */
        StackedBar = 1,
        /**
         * StackedAreaCharts type
         */
        StackedAreaCharts = 2,
        /**
         * PieChart type
         */
        PieChart = 3
    }
}
export declare namespace GenModels {
    enum PartnerSearchMode {
        SearchDepartments = 0,
        SearchEmployees = 1,
        SearchAll = 2
    }
}
export declare namespace GenModels {
    enum PartnerItemType {
        Organization = 0,
        Department = 1,
        Employee = 2
    }
}
export declare namespace GenModels {
    /**
     * Possible objects, that security descriptor can be applied to.
     */
    enum DescriptorTargetType {
        Custom = 0,
        /**
         * Folder
         */
        Folder = 1,
        /**
         * Staff directory entity
         */
        StaffDirectoryItem = 2,
        /**
         * Card
         */
        Card = 3
    }
}
export declare namespace GenModels {
    enum SecureObjectType {
        Row = 0,
        Section = 1,
        Card = 2,
        File = 3,
        Object = 4,
        Report = 5,
        CardType = 6
    }
}
export declare namespace GenModels {
    /**
     * Type of access mask scheme
     */
    enum AccessMaskSchemeType {
        /**
         * Standard FullAccess, Read, Write, Delete, Own scheme
         */
        Standard = 0,
        /**
         * Unknown scheme
         */
        Custom = 1
    }
}
export declare namespace GenModels {
    /**
     * Access flags of standard access mask.
     */
    enum StandardAccessMaskFlags {
        /**
         * Unknown flags
         */
        Special = 0,
        /**
         * Modify access
         */
        Modify = 38,
        /**
         * Delete access
         */
        Delete = 65536,
        /**
         * Read access
         */
        Read = 131097,
        /**
         * Own
         */
        Own = 917504,
        /**
         * Full access
         */
        FullAccess = 983359
    }
}
export declare namespace GenModels {
    enum AceQualifier {
        AccessAllowed = 0,
        AccessDenied = 1,
        SystemAudit = 2,
        SystemAlarm = 3
    }
}
export declare namespace GenModels {
    enum AceFlags {
        None = 0,
        ObjectInherit = 1,
        ContainerInherit = 2,
        NoPropagateInherit = 4,
        InheritOnly = 8,
        InheritanceFlags = 15,
        Inherited = 16,
        SuccessfulAccess = 64,
        FailedAccess = 128,
        AuditFlags = 192
    }
}
export declare namespace GenModels {
    enum CardDataRights {
        ListChildObjects = 1,
        CreateChildObjects = 2,
        DeleteChildObjects = 4,
        Copy = 8,
        ReadAttributes = 16,
        WriteAttributes = 32,
        Modify = 38,
        PerformOperations = 256,
        SpecificRightsAll = 319,
        Delete = 65536,
        ReadPermissions = 131072,
        Read = 131097,
        ChangePermissions = 262144,
        TakeOwnership = 524288,
        Own = 917504,
        StandardRightsAll = 983040,
        FullControl = 983359,
        GenericAll = 268435456,
        GenericExecute = 536870912,
        GenericWrite = 1073741824,
        GenericRead = -2147483648
    }
}
export declare namespace GenModels {
    enum DigitalSignatureKind {
        Auto = 0,
        HashSignature = 1,
        CadesBesSignature = 2,
        CadesTSignature = 3,
        CadesXLongType1Signature = 4
    }
}
export declare namespace GenModels {
    /**
     * Where from signature method was received.
     */
    enum SignatureMethodSources {
        /**
         * CryptoPro browser plugin
         */
        LocalCryptoPro = 0,
        /**
         * CryptoPr DSS cloud service
         */
        Cloud = 1,
        /**
         * PkiClient ios mobile app
         */
        PkiClient = 2,
        /**
         * Unknown
         */
        Unknown = 3
    }
}
export declare namespace GenModels {
    /**
     * Verification status of signature
     */
    enum ValidationState {
        /**
         * Valid
         */
        Valid = 0,
        /**
         * Invalid
         */
        Invalid = 1,
        /**
         * Partially valid
         */
        PartiallyValid = 2,
        /**
         * Sign data is valid, but certificate is expired
         */
        CertificateExpired = 3,
        /**
         * Sign data is valid, but certificate is revoked
         */
        CertificateRevoked = 4
    }
}
export declare namespace GenModels {
    /**
     * Verification status of signature
     */
    enum SignatureVerificationStatus {
        /**
         * Not signed
         */
        NotSigned = 0,
        /**
         * Valid
         */
        Valid = 1,
        /**
         * Invalid
         */
        Invalid = 2,
        /**
         * Partially valid
         */
        PartiallyValid = 3,
        /**
         * Unable to verify
         */
        UnableToVerify = 4,
        /**
         * Certificate is revoked
         */
        CertificateRevoked = 5,
        /**
         * Certificate is expired
         */
        CertificateExpired = 6,
        /**
         * Certificate can not validated
         */
        CertificateCanNotValidated = 7
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    enum ModelValidationState {
        Unvalidated = 0,
        Invalid = 1,
        Valid = 2,
        Skipped = 3
    }
}
export declare namespace Microsoft.AspNetCore.Mvc.ModelBinding {
    enum EmptyBodyBehavior {
        Default = 0,
        Allow = 1,
        Disallow = 2
    }
}
export declare namespace GenModels {
    /**
     * Group task tasks distribution mode for group performers.
     */
    enum TaskGroupPerformerMode {
        /**
         * Separate task for every employee in the group.
         */
        SeparateTasks = 0,
        /**
         * One task, where performers would be group employees.
         */
        OneTaskToAll = 1,
        /**
         * One task to manager of the group.
         */
        OneTaskToHead = 2
    }
}
export declare namespace GenModels {
    /**
     * Possible task columns in TasksTable control
     */
    enum TaskColumnType {
        /**
         * Name
         */
        Name = 0,
        /**
         * Author
         */
        Author = 1,
        /**
         * State
         */
        State = 2,
        /**
         * Planed ending deadline
         */
        PlannedEndDate = 3,
        /**
         * Actual end date
         */
        ActualEndDate = 4,
        /**
         * Appointed performer
         */
        AppointedPerformer = 5,
        /**
         * Current performer
         */
        CurrentPerformer = 6,
        /**
         * Controller
         */
        Controller = 7,
        /**
         * Responsible performer
         */
        ResponsiblePerformer = 8,
        /**
         * Departure date
         */
        DepartureDate = 9,
        /**
         * Description
         */
        Description = 10,
        /**
         * Kind
         */
        Kind = 11,
        /**
         * Icon
         */
        Icon = 12,
        /**
         * Comment
         */
        Comment = 13
    }
}
export declare namespace GenModels {
    /**
     * Represents performer gender
     */
    enum PerformerGender {
        /**
         * Gender not specified
         */
        NotSpecified = 0,
        /**
         * Male
         */
        Male = 1,
        /**
         * Female
         */
        Female = 2
    }
}
export declare namespace GenModels {
    enum TasksIndicators {
        /**
         * Task is overdue
         */
        Overdue = 0,
        /**
         * Task delegated
         */
        HasDelegates = 1,
        /**
         * High priority
         */
        HighPriority = 2,
        /**
         * Low priority
         */
        LowPriority = 3,
        /**
         * Task on control
         */
        OnControl = 4,
        /**
         * Is the task of the task group responsible
         */
        ResponsibleTask = 5,
        /**
         * Has report
         */
        HasReport = 6,
        /**
         * Has file report
         */
        HasFileReport = 7
    }
}
export declare namespace GenModels {
    /**
     * Javascript log message level.
     */
    enum ClientLogMessageLevel {
        /**
         * Error
         */
        Error = 1,
        /**
         * Warning
         */
        Warning = 2,
        /**
         * Information
         */
        Info = 3,
        /**
         * Verbose
         */
        Verbose = 4
    }
}
export declare namespace GenModels {
    enum AgreementStateType {
        Draft = 0,
        Started = 1,
        Stopped = 2,
        Agreed = 3,
        Other = 4,
        Canceled = 5
    }
}
export declare namespace GenModels {
    enum ApprovalType {
        Sequential = 0,
        Parallel = 1,
        Consolidation = 2,
        Alternative = 3
    }
}
export declare namespace GenModels {
    enum StageSemantics {
        Positive = 1,
        Negative = 2,
        Neutral = 3,
        Other = 4
    }
}
export declare namespace GenModels {
    enum ApprovalOperationKind {
        Resume = 0,
        Finish = 1,
        Pause = 2,
        Cancel = 3,
        ToApprove = 4,
        AbortStage = 5,
        Management = 6
    }
}
export declare namespace GenModels {
    enum KindsCardCreationSettingLocation {
        None = 0,
        CurrentFolder = 1,
        InitialCardFolder = 2,
        PersonalFolder = 3,
        Custom = 4
    }
}
export declare namespace GenModels {
    enum FieldType {
        Int = 0,
        Bool = 1,
        DateTime = 2,
        Date = 3,
        Time = 4,
        Enum = 5,
        Bitmask = 6,
        UniqueId = 7,
        UserId = 8,
        String = 9,
        Unistring = 10,
        FileId = 11,
        Float = 12,
        RefId = 13,
        RefCardId = 14,
        Text = 15,
        Unitext = 16,
        Binary = 17,
        Image = 18,
        Sdid = 19,
        Decimal = 20,
        Variant = 21
    }
}
export declare namespace GenModels {
    /**
     * Represents how to search in directory designer tree
     */
    enum DirectoryDesignerSearchMode {
        /**
         * Search by id
         */
        Id = 0,
        /**
         * Search by name and description
         */
        NameAndDesc = 1
    }
}
export declare namespace GenModels {
    /**
     * Digital Signature Format
     */
    enum SignatureFormat {
        /**
         * .p7s format
         */
        p7s = 0,
        /**
         * .sig format
         */
        sig = 1,
        /**
         * .sgn format
         */
        sgn = 2,
        /**
         * .sign format
         */
        sign = 3
    }
}
export declare namespace GenModels {
    /**
     * Signature type enum
     */
    enum SignatureType {
        /**
         * Signature type is unknown
         */
        Unknown = 0,
        /**
         * Simple hash of data
         */
        Hash = 1,
        /**
         * CAdES-BES signature
         */
        Cades_BES = 2,
        /**
         * CAdES-T signature
         */
        Cades_T = 3,
        /**
         * CAdES-C signature
         */
        Cades_C = 4,
        /**
         * CAdES-X Long Type 1 signature
         */
        Cades_XLT1 = 5,
        /**
         * CAdES-A v3 signature
         */
        Cades_A = 6
    }
}
export declare namespace GenModels {
    /**
     * Represents timestamp type
     */
    enum TimestampType {
        /**
         * Timestamp type is unknown
         */
        Unknown = 0,
        /**
         * CAdES-T
         */
        Cades_T = 1,
        /**
         * CAdES-X Long Type 1
         */
        Cades_XLT1 = 2,
        /**
         * CAdES-A
         */
        Cades_A = 3
    }
}
export declare namespace GenModels {
    /**
     * Represents folder node type
     */
    enum FolderNodeType {
        /**
         * Regular
         */
        Regular = 1,
        /**
         * Virtual
         */
        Virtual = 4,
        /**
         * Delegate
         */
        Delegate = 8,
        /**
         * SystemHidden
         */
        SystemHidden = 16
    }
}
export declare namespace GenModels {
    /**
     * Represents folder node style
     */
    enum FolderNodeStyle {
        /**
         * View displayed
         */
        FolderView = 1,
        /**
         * Card displayed
         */
        FolderCard = 2,
        /**
         * HTML page displayed
         */
        FolderURL = 4,
        /**
         * Digest view displayed
         */
        FolderDigest = 8
    }
}
export declare namespace GenModels {
    /**
     * Describes links description column view mode
     */
    enum LinksDescriptionColumnViewMode {
        /**
         * Gets standard
         */
        Standard = 0,
        /**
         * Gets extension
         */
        Extension = 1,
        /**
         * Gets layout
         */
        Layout = 2
    }
}
export declare namespace GenModels {
    /**
     * Represent link kind
     */
    enum LinkKind {
        /**
         * card link type
         */
        Card = 0,
        /**
         * file link type
         */
        File = 1,
        /**
         * Url link type
         */
        Url = 2
    }
}
export declare namespace GenModels {
    /**
     * Gets link description mode
     */
    enum LinkDescriptionMode {
        /**
         * Text
         */
        Text = 0,
        /**
         * Layout
         */
        Layout = 1
    }
}
export declare namespace GenModels {
    enum DepartmentDataSource {
        StaffDirectory = 0,
        PartnersDirectory = 1
    }
}
export declare namespace GenModels {
    /**
     * Department type for different search requests
     */
    enum SearchDepartmentType {
        /**
         * Not specified (any)
         */
        None = 0,
        /**
         * Department
         */
        Department = 1,
        /**
         * Organization
         */
        Organization = 2
    }
}
export declare namespace GenModels {
    /**
     * Employee filter mode
     */
    enum EmployeeFilterMode {
        /**
         * Show not searchable
         */
        ShowNotSearchable = 0,
        /**
         * Show not available
         */
        ShowNotAvailable = 1
    }
}
export declare namespace GenModels {
    enum StaffEmployeeInactiveStatus {
        Sick = 0,
        Vacation = 1,
        BusinessTrip = 2,
        Absent = 3
    }
}
export declare namespace GenModels {
    /**
     * Start performers mode for DisplayPerformers control
     */
    enum DisplayPerformersStartPerformersMode {
        /**
         * Selected performers
         */
        SelectedPerformers = 0,
        /**
         * Main performers
         */
        MainInfoPerformers = 1
    }
}
export declare namespace GenModels {
    /**
     * Display performers view mode
     */
    enum DisplayPerformersViewMode {
        /**
         * Full name
         */
        FullName = 0,
        /**
         * Display name
         */
        DisplayName = 1
    }
}
export declare namespace GenModels {
    /**
     * Display performers tip mode
     */
    enum DisplayPerformersTipMode {
        /**
         * Full name
         */
        FullName = 0,
        /**
         * Full name and position
         */
        FullNameAndPosition = 1,
        /**
         * Full name and department and position
         */
        FullNameAndDepartmentAndPosition = 2,
        /**
         * Display name
         */
        DisplayName = 3,
        /**
         * Disabled
         */
        Disabled = 4
    }
}
export declare namespace GenModels {
    enum DelegateEvent {
        Delegated = 0,
        DelegatedWithReturn = 1,
        Returned = 2,
        TakenToWork = 3
    }
}
export declare namespace GenModels {
    /**
     * Staff query type
     */
    enum SearchQueryType {
        /**
         * Load tree level items.
         */
        LoadTree = 0,
        /**
         * Find items by search in directory window.
         */
        DirectorySearch = 1,
        /**
         * Find items by typeahead search.
         */
        QuickSearch = 2
    }
}
export declare namespace GenModels {
    /**
     * Hierarchy type
     */
    enum HierarchyType {
        /**
         * Group
         */
        Group = 2,
        /**
         * Position
         */
        Position = 4,
        /**
         * Unit
         */
        Unit = 16
    }
}
export declare namespace GenModels {
    /**
     * Condition for selecting Extended layouts
     */
    enum ServerRole {
        /**
         * Layout for usual user
         */
        User = 0,
        /**
         * Layout for power user
         */
        PowerUser = 1,
        /**
         * Layout for docsvision administrator
         */
        Administrator = 2,
        /**
         * DocsVision Security Administrators
         */
        SecurityAdministrator = 3,
        /**
         * DocsVision Archive Operators
         */
        ArchiveOperator = 4
    }
}
export declare namespace System {
    enum DayOfWeek {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6
    }
}
export declare namespace GenModels {
    enum CloudSignatureType {
        /**
         * Basic
         */
        BES = 0,
        /**
         * XLong Type 1
         */
        XLT1 = 1,
        /**
         * Signature with timestamp
         */
        T = 2
    }
}
export declare namespace GenModels {
    /**
     * UXMainMenuBehavior values
     */
    enum UXMainMenuBehavior {
        /**
         * Show with overlap
         */
        ShowWithOverlap = 0,
        /**
         * No overlap and pin
         */
        NoOverlapAndPin = 1
    }
}
export declare namespace GenModels {
    /**
     * Button position values
     */
    enum ButtonPositions {
        /**
         * System value
         */
        Auto = 0,
        /**
         * Ok - Cancel value
         */
        OkCancel = 1,
        /**
         * Cancel - Ok value
         */
        CancelOk = 2
    }
}
export declare namespace GenModels {
    /**
     * pdf preview mode
     */
    enum PdfPreviewMode {
        /**
         * standard mode with aspose
         */
        Standard = 0,
        /**
         * view via pdfjs
         */
        Pdfjs = 1
    }
}
export declare namespace GenModels {
    /**
     * Defines UseOldGrid setting values.
     */
    enum UseOldGrid {
        /**
         * Do not use old grid.
         */
        DoNotUse = 0,
        /**
         * Show old grid only for Internet Explorer.
         */
        OnlyForIE = 1,
        /**
         * Use old grid anywhere.
         */
        Anywhere = 2
    }
}
export declare namespace GenModels {
    /**
     * FilePreviewMode
     */
    enum FilePreviewMode {
        /**
         * Do not use preview.
         */
        None = 0,
        /**
         * Pdj.js viewer.
         */
        Pdfjs = 1,
        /**
         * R7 viewer.
         */
        R7 = 2
    }
}
export declare namespace GenModels {
    enum BackgroundStyle {
        Tile = 0,
        Stretch = 1
    }
}
export declare namespace GenModels {
    enum BackgroundType {
        Default = 0,
        Inherit = 1,
        Custom = 2
    }
}
export declare namespace GenModels {
    enum AgreementHistoryMode {
        Button = 0,
        Layout = 1
    }
}
export declare namespace GenModels {
    enum AgreementManagementAvailableButtons {
        Pause = 1,
        Cancel = 2,
        Complete = 4,
        All = -1
    }
}
export declare namespace GenModels {
    enum AgreementMode {
        StartAndManagement = 0,
        StartOnly = 1,
        ManagementOnly = 2
    }
}
export declare namespace GenModels {
    enum ApproverViewType {
        Fio = 0,
        FioAndPosition = 1,
        DisplayString = 2
    }
}
export declare namespace GenModels {
    enum AvailableChangesModes {
        No = 0,
        Nodes = 1,
        Records = 2,
        All = 3
    }
}
export declare namespace GenModels {
    enum DepartmentDialogMode {
        Tree = 0,
        List = 1
    }
}
export declare namespace GenModels {
    enum EmployeeViewMode {
        Fio = 0,
        DisplayName = 1,
        Auto = 2
    }
}
export declare namespace GenModels {
    enum PartnerTipModeItems {
        Fio = 0,
        FioAndPosition = 1,
        NotUsed = 2
    }
}
export declare namespace GenModels {
    enum TaskGroupWithOneTaskDisplayMode {
        Both = 0,
        Group = 1,
        Task = 2
    }
}
export declare namespace GenModels {
    enum TasksDisplayMode {
        ListAndCreation = 0,
        OnlyCreation = 1,
        Parent = 2
    }
}
export declare namespace GenModels {
    enum TasksOpenMode {
        CurrentTab = 0,
        NewTab = 1,
        NewWindow = 2
    }
}
export declare namespace GenModels {
    enum TasksTreeDisplayMode {
        Button = 0,
        Layout = 1
    }
}
export declare namespace GenModels {
    enum DateTimePickerType {
        DateTime = 0,
        Date = 1
    }
}
export declare namespace GenModels {
    enum FolderMode {
        Empty = 0,
        CurrentFolder = 1
    }
}
export declare namespace GenModels {
    enum HtmlViewMode {
        FromCard = 0,
        FromFile = 1,
        External = 2
    }
}
export declare namespace GenModels {
    enum Orientation {
        Horizontal = 0,
        Vertical = 1
    }
}
export declare namespace GenModels {
    enum RadioGroupLabelLocation {
        Right = 0,
        Left = 1
    }
}
export declare namespace GenModels {
    enum OpenMode {
        CurrentTab = 0,
        NewTab = 1,
        NewWindow = 2
    }
}
export declare namespace GenModels {
    enum AdditionalElementsMode {
        Left = 0,
        Right = 1
    }
}
export declare namespace GenModels {
    enum BarcodeSearchButtonMode {
        CurrentTab = 0,
        NewTab = 1,
        NewBrowserWindow = 2,
        StreamRead = 3
    }
}
export declare namespace GenModels {
    enum UserPanelDisplayMode {
        DisplayName = 0,
        SurnameName = 1
    }
}
export declare namespace GenModels {
    enum ScannedImageFormat {
        Pdf = 0,
        Jpeg = 1
    }
}
export declare namespace GenModels {
    enum AgreementManagementOperations {
        Resume = 0,
        Complete = 1,
        Pause = 2,
        Cancel = 3,
        ToApprove = 4,
        AbortStage = 5,
        Management = 6
    }
}
export declare namespace GenModels {
    enum ShowParametersOptions {
        Always = 0,
        Never = 1,
        IfFieldEmpty = 2
    }
}
export declare namespace GenModels {
    /**
     * Completion variant type
     */
    enum CompletionParameterType {
        /**
         * One row string
         */
        String = 0,
        /**
         * Multi row string
         */
        Text = 1,
        /**
         * Boolean
         */
        Boolean = 2,
        /**
         * DateTime
         */
        DateTime = 3,
        /**
         * Time
         */
        Time = 4,
        /**
         * Double
         */
        Double = 5,
        /**
         * Int
         */
        Int = 6,
        /**
         * Employee
         */
        Employee = 7,
        /**
         * Staff department
         */
        StaffDepartment = 8,
        /**
         * Staff role
         */
        StaffRole = 9,
        /**
         * Staff group
         */
        StaffGroup = 10,
        /**
         * Staff position
         */
        StaffPosition = 11,
        /**
         * Partner
         */
        Partner = 12,
        /**
         * Partner department
         */
        PartnerDepartment = 13,
        /**
         * Directory designer row
         */
        DirectoryDesignerRow = 14,
        /**
         * Enum
         */
        Enum = 15,
        /**
         * File
         */
        File = 16,
        /**
         * Image
         */
        Image = 17,
        /**
         * Decimal
         */
        Decimal = 18
    }
}
export declare namespace GenModels {
    enum DateTimeDefaultTimeModes {
        CurrentTime = 0,
        StartOfDay = 1,
        StartOfWorkDay = 2,
        EndOfDay = 3,
        EndOfWorkDay = 4
    }
}
export declare namespace GenModels {
    /**
     * Defines state operation display mode
     */
    enum StateOperationDisplayMode {
        /**
         * Secondary (default)
         */
        Secondary = 0,
        /**
         * Main
         */
        Main = 1,
        /**
         * Hidden
         */
        Hidden = 2
    }
}
export declare namespace GenModels {
    /**
     * Represents priority
     */
    enum Priority {
        /**
         * Low
         */
        Low = 0,
        /**
         * Normal
         */
        Normal = 1,
        /**
         * High
         */
        High = 2
    }
}
export declare namespace GenModels {
    /**
     * Represents task group state category
     */
    enum TaskGroupStateCategory {
        /**
         * TBD
         */
        Preparing = 0,
        /**
         * TBD
         */
        Performing = 1,
        /**
         * TBD
         */
        Completed = 2,
        /**
         * TBD
         */
        Other = 3
    }
}
export declare namespace GenModels {
    /**
     * Represents task state category
     */
    enum TaskStateCategory {
        /**
         * Initialization and Recalled
         */
        Preparing = 0,
        /**
         * InWork Delegated ReturnFromDelegation OnAcceptance
         */
        InWork = 1,
        /**
         * Rejected
         */
        Rejected = 2,
        /**
         * OnRework
         */
        OnRework = 3,
        /**
         * Completed
         */
        Completed = 4,
        /**
         * Other
         */
        Other = 5
    }
}
export declare namespace GenModels {
    /**
     * Represents parameter display mode
     */
    enum CompletionParameterDisplayMode {
        /**
         * Always
         */
        Always = 0,
        /**
         * Never
         */
        Never = 1,
        /**
         * If empty
         */
        IfEmpty = 2
    }
}
export declare namespace GenModels {
    enum AddressTypeModeItems {
        ContactAddress = 0,
        PostAddress = 1,
        LegalAddress = 2
    }
}
export declare namespace GenModels {
    /**
     * Declares available task states
     */
    enum TaskStateType {
        /**
         * Task created by author
         */
        Draft = 0,
        /**
         * Task processed by performer
         */
        InWork = 1,
        /**
         * Task completed by performer
         */
        Completed = 2,
        /**
         * Task rejected by performer
         */
        Rejected = 3,
        /**
         * Task is on agreement with somebody
         */
        OnAgreement = 4,
        /**
         * Task agreement was successfully completed
         */
        Agreed = 5,
        /**
         * Task state not supported by 6.0
         */
        Unknown = 6,
        /**
         * Task is not agreed
         */
        NotAgreed = 7,
        /**
         * Task is on acceptance
         */
        OnAcceptance = 8,
        /**
         * Task is on modification
         */
        OnModification = 9,
        /**
         * Task is deferred
         */
        Deferred = 10,
        /**
         * Task is recalled
         */
        Recalled = 11,
        /**
         * Task is delegated
         */
        Delegated = 12,
        /**
         * Task is returned from delegation
         */
        ReturnedFromDelegation = 13,
        /**
         * Task is started
         */
        Started = 14,
        /**
         * Task is stopped
         */
        Stopped = 15
    }
}
export declare namespace GenModels {
    /**
     * Represents task group card state type
     */
    enum TaskGroupStateType {
        /**
         * Preparation
         */
        Preparation = 0,
        /**
         * Performance
         */
        Performance = 1,
        /**
         * Completed
         */
        Completed = 2,
        /**
         * Recalled
         */
        Recalled = 3,
        /**
         * Unknown
         */
        Unknown = 6
    }
}
export declare namespace GenModels {
    /**
     * Declares available task operation
     */
    enum TaskOperationKind {
        /**
         * Read
         */
        Read = 0,
        /**
         * Edit
         */
        Edit = 1,
        /**
         * Delete
         */
        Delete = 2,
        /**
         * Begin task
         */
        Begin = 3,
        /**
         * Complete task
         */
        Complete = 4,
        /**
         * Complete by author
         */
        StopExecutionOperation = 5,
        /**
         * Accept
         */
        Accept = 6,
        /**
         * CreateComments
         */
        CreateComments = 7,
        /**
         * Create child task
         */
        CreateChildTask = 8,
        /**
         * Create child task group
         */
        CreateChildTaskGroup = 9,
        /**
         * Add linked document
         */
        AddLinkedDocument = 10,
        /**
         * Withdraw task
         */
        Withdraw = 11,
        /**
         * Reject task
         */
        Reject = 12,
        /**
         * SendToModification
         */
        SendToModification = 13,
        /**
         * Delegate
         */
        Delegate = 14,
        /**
         * Cancel delegation
         */
        CancelDelegation = 15,
        /**
         * Take in work
         */
        TakeInWork = 16,
        /**
         * Cancel TakeInWork
         */
        DoNotTakeToWork = 17,
        /**
         * Other
         */
        Other = 18,
        /**
         * RemoveLinkedDocument
         */
        RemoveLinkedDocument = 19,
        /**
         * Add reference
         */
        AddReference = 20,
        /**
         * Remove reference
         */
        RemoveReference = 21,
        /**
         * Add report
         */
        AddReport = 22,
        /**
         * Remove report
         */
        RemoveReport = 23,
        /**
         * Edit report field
         */
        EditReportField = 24,
        /**
         * Report links not exists
         */
        ReportLinksNotExist = 25,
        /**
         * Set content
         */
        SetContent = 26
    }
}
export declare namespace GenModels {
    /**
     * Possible columns of control Links
     */
    enum LinkColumnType {
        /**
         * Icon column
         */
        KindIcon = 0,
        /**
         * Card digest column
         */
        CardDigest = 1,
        /**
         * Link type column
         */
        LinkType = 2,
        /**
         * Info button column
         */
        InfoButton = 3,
        /**
         * Column for command menu button
         */
        CommandMenuButton = 4
    }
}
export declare namespace GenModels {
    /**
     * Describes links detailed info pop-up content
     */
    enum LinksDetailedInfoViewMode {
        /**
         * Only card info
         */
        Card = 0,
        /**
         * Only link info
         */
        Link = 1,
        /**
         * Card and link info
         */
        CardAndLink = 2,
        /**
         * None info
         */
        None = 3
    }
}
export declare namespace GenModels {
    /**
     * display staff unit hierarchy output mode
     */
    enum StaffUnitHierarchyOutputMode {
        /**
         * display until first organization
         */
        UntilFirstOrganization = 0,
        /**
         * display only direct department
         */
        DirectDepartmentOnly = 1,
        /**
         * display all hierarchy
         */
        DisplayAll = 2
    }
}
export declare namespace GenModels {
    /**
     * End performers mode for DisplayPerformers control
     */
    enum DisplayPerformersEndPerformersMode {
        /**
         * Current performers
         */
        CurrentPerformers = 0,
        /**
         * Main performers
         */
        MainInfoPerformers = 1
    }
}
export declare namespace GenModels {
    /**
     * Type of data that uses as login
     */
    enum AuthenticationLoginType {
        /**
         * Indicates that uses phone number as login
         */
        Phone = 0,
        /**
         * Indicates that uses INIPA(SNILS) as login
         */
        Snils = 1,
        /**
         * Indicates that uses email as login
         */
        Email = 2,
        /**
         * Indicates that uses custom data as login
         */
        Custom = 3
    }
}
export declare namespace GenModels {
    /**
     * Type of data that uses as login
     */
    enum AuthenticationExtensionState {
        /**
         * Known extension but license doesn't contains feature
         */
        NotLicensed = 0,
        /**
         * Known extension and license contains feature
         */
        Licensed = 1,
        /**
         * User extension
         */
        Unknown = 2
    }
}
export declare namespace GenModels {
    /**
     * Defines color mode for Diagram control
     */
    enum DiagramColorMode {
        /**
         * Monochrome mode
         */
        Monochrome = 0,
        /**
         * Unicolorous mode
         */
        Unicolorous = 1
    }
}
export declare namespace GenModels {
    /**
     * Defines legend color scheme for Diagram control
     */
    enum DiagramLegendColorScheme {
        /**
         * Indigo legend color scheme
         */
        Indigo = 0,
        /**
         * Cyan legend color scheme
         */
        Cyan = 1,
        /**
         * Green legend color scheme
         */
        Green = 2,
        /**
         * Orange legend color scheme
         */
        Orange = 3,
        /**
         * Red legend color scheme
         */
        Red = 4,
        /**
         * Purple legend color scheme
         */
        Purple = 5,
        /**
         * Violet legend color scheme
         */
        Violet = 6,
        /**
         * Gray legend color scheme
         */
        Gray = 7,
        /**
         * Brown legend color scheme
         */
        Brown = 8,
        /**
         * Multicolor mode
         */
        Multicolored = 9
    }
}
export declare namespace GenModels {
    /**
     * Defines legend position for Diagram control
     */
    enum DiagramLegendPosition {
        /**
         * Bottom legend position
         */
        Bottom = 0,
        /**
         * Top legend position
         */
        Top = 1,
        /**
         * Left legend position
         */
        Left = 2,
        /**
         * Right legend position
         */
        Right = 3
    }
}
export declare namespace GenModels {
    /**
     * Way of editing and creating of table rows.
     */
    enum TableRowEditMode {
        /**
         * Edit inside table, without modal windows
         */
        Inline = 0,
        /**
         * Load edit and create layouts in modal window
         */
        Layout = 1
    }
}
export declare namespace GenModels {
    /**
     * Serverity of the {@link GenModels}
     */
    enum SystemStateNotificationSource {
        /**
         * Unread counters subsystem event
         */
        UnreadCounters = 0
    }
}
export declare namespace GenModels {
    /**
     * Serverity of the {@link GenModels}
     */
    enum SystemStateNotificationSeverity {
        /**
         * Normal system state information.
         */
        Info = 0,
        /**
         * Some unexpected event occurred, but system continue operating.
         */
        Warning = 1,
        /**
         * Some operation failed.
         */
        Error = 2,
        /**
         * Some subsystem has been broken.
         */
        CriticalFault = 3
    }
}
export declare namespace GenModels {
    /**
     * Field subtype
     */
    enum FieldSubtype {
        /**
         * None
         */
        None = 0,
        /**
         * String
         */
        String = 1,
        /**
         * Integer
         */
        Int = 2,
        /**
         * Double
         */
        Double = 3,
        /**
         * Date
         */
        Date = 4,
        /**
         * Boolean
         */
        Bool = 5,
        /**
         * Employee
         */
        Employee = 6,
        /**
         * Department
         */
        Department = 7,
        /**
         * Group
         */
        Group = 8,
        /**
         * Role
         */
        Role = 9,
        /**
         * Universal
         */
        Universal = 10,
        /**
         * Time
         */
        Time = 11,
        /**
         * DateTime
         */
        DateTime = 12,
        /**
         * PartnerEmployee
         */
        PartnerEmployee = 13,
        /**
         * PartnerDepartment
         */
        PartnerDepartment = 14,
        /**
         * Card reference
         */
        CardRef = 15,
        /**
         * Card type
         */
        CardType = 16,
        /**
         * Card state
         */
        CardState = 17
    }
}
export declare namespace GenModels {
    /**
     * Data source variants from control FolderDataContext
     */
    enum FolderDataContextMode {
        /**
         * From specified data source
         */
        FromDataSource = 0,
        /**
         * From specified folder id
         */
        KnownFolder = 1,
        /**
         * From current route
         */
        FromUrl = 2,
        /**
         * System folder
         */
        SystemFolder = 3
    }
}
export declare namespace GenModels {
    enum ErrorCode {
        Failure = 1280,
        SQLFailure = 1281,
        InternalFailure = 1282,
        CannotAcccessSQL = 1283,
        NoAuthenticationInfo = 1284,
        Deadlock = 1285,
        FiberModeNotSupported = 1286,
        TransactionOpen = 1287,
        Timeout = 1288,
        InvalidDatabase = 1289,
        InvalidLogin = 1290,
        TransactionLogIsFull = 1291,
        WorkflowUnavailable = 1292,
        OutOfMemory = 1293,
        ServiceNotRegisteredInCluster = 1294,
        DatabaseNodeIsReadOnly = 1295,
        InvalidBase = 1312,
        InvalidSession = 1313,
        InvalidSessionOwner = 1314,
        InvalidUser = 1315,
        VersionMismatch = 1316,
        GlobalInfoMissing = 1317,
        SessionDenied = 1318,
        EmployeeLocked = 1319,
        OfflineSession = 1320,
        InvalidEmployee = 1321,
        InvalidCard = 1344,
        InvalidObject = 1345,
        InvalidCursor = 1346,
        InvalidRow = 1347,
        InvalidSection = 1348,
        DataReadError = 1349,
        DataWriteError = 1350,
        DataUpdateError = 1351,
        ParentCannotBeChild = 1352,
        InvalidRowFormat = 1353,
        UnsupportedReadType = 1354,
        InvalidFieldName = 1355,
        MetadataFieldTypeInvalidChange = 1356,
        MetadataSectionTypeInvalidChange = 1357,
        InvalidImportFormat = 1360,
        NullLinkReference = 1361,
        TreeUniquenessViolated = 1362,
        SectionUniquenessViolated = 1363,
        CardUniquenessViolated = 1364,
        GlobalUniquenessViolated = 1365,
        AddingSecondRowToStruct = 1366,
        InvalidSqlObject = 1367,
        InvalidEnumValue = 1368,
        InvalidParentRow = 1369,
        NoParentObject = 1370,
        RowDataTooLarge = 1371,
        BadCardForReferenceField = 1372,
        RowIsNotDeletable = 1373,
        RowBelongsToAnotherServer = 1374,
        ParentRowBelongsToAnotherServer = 1375,
        AccessDenied = 1376,
        IsNotAdmin = 1377,
        SecuritySchemaReadError = 1378,
        InvalidSecurityDescriptor = 1379,
        SecurityManagerLibIsMissing = 1380,
        ObjectCannotBeSecured = 1381,
        DictionaryReadDenied = 1382,
        IsNotControllerOfProcess = 1383,
        DatabaseIsReadOnly = 1384,
        SecurityObjectTypeIsDeprecated = 1385,
        IsNotArchiveOperator = 1392,
        IsNotSecurityAdmin = 1393,
        InvalidUserSid = 1394,
        InvalidSearchQuery = 1408,
        SearchFailed = 1409,
        EmptyCondition = 1410,
        FullTextSearchFailed = 1411,
        InvalidFullTextQuery = 1412,
        ErrorPublishingSearch = 1413,
        DisabledAutogenerateSearch = 1414,
        CryptoObjectDoesNotExist = 1440,
        InvalidCryptoObject = 1441,
        CryptObjectAlreadyExists = 1442,
        ObjectLocked = 1536,
        FileLocked = 1537,
        CardLocked = 1538,
        RowLocked = 1539,
        ObjectOwnerLocked = 1540,
        InvalidLogMessageCode = 1568,
        InvalidLogType = 1569,
        InvalidFile = 1600,
        FileIsInUse = 1601,
        FileIsReadOnly = 1602,
        FileIsWriteOnly = 1603,
        FileReadError = 1604,
        FileWriteError = 1605,
        FileIsOffline = 1606,
        FileNotOffline = 1607,
        FileIsArchived = 1608,
        FileNotArchived = 1609,
        BinaryStorageNotFound = 1616,
        BinaryArchivationFromExternalStorageToInternalNotSupported = 1617,
        InvalidBinary = 1618,
        InvalidView = 1632,
        InvalidViewColumn = 1633,
        InvalidViewRequest = 1634,
        TypesNotDefinedForView = 1635,
        InvalidCardView = 1636,
        ErrorPublishingView = 1637,
        InvalidGuidConversion = 1638,
        InvalidConversion = 1639,
        UnsupportedAggregate = 1640,
        DisabledAutogenerateView = 1641,
        InvalidNumberOrNumberInUse = 1665,
        InvalidRange = 1666,
        InvalidNumerator = 1667,
        NumberIsInUse = 1668,
        NumeratorIsInUse = 1669,
        NumberReserved = 1670,
        NoFreeNumbers = 1671,
        ExcludedRangeHasNumbers = 1672,
        NumeratorIsNotAvailable = 1673,
        LinkWillCauseCycles = 1793,
        CannotDeleteHardLinkedCard = 1794,
        DeletedCard = 1795,
        InvalidCardLinkValue = 1796,
        DictionaryExists = 1797,
        DictionaryCannotBeDeleted = 1798,
        InvalidCardType = 1799,
        CardTypeNotCopyable = 1800,
        CardTypeCannotBeTemplate = 1801,
        CardIsArchived = 1802,
        CardNotArchived = 1803,
        CardCannotBeArchived = 1804,
        CardIsNotDeletable = 1805,
        InvalidParameterType = 1872,
        ExtensionInternalError = 1873,
        ExtensionNotRegistered = 1904,
        InvalidLicense = 2048,
        LicenseExpired = 2049,
        ConnectionLimit = 2050,
        UpdateLimit = 2051,
        ServerLimit = 2052,
        InvalidFeature = 2053,
        IncrementFeatureError = 2054,
        FeatureLimit = 2055,
        NonConcurentLimit = 2056,
        LicenseFeatureMissing = 2057,
        ReplCannotMarkNonrefType = 4096,
        ReplCannotUnmarkInheritedFolder = 4097,
        ReplNotSynchronizedBase = 4098,
        InvalidIconIdentifier = 4352,
        DuplicateIconData = 4353,
        InvalidLabel = 4608
    }
}
