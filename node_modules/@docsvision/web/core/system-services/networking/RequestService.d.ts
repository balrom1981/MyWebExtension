import { ILogService } from "@docsvision/web/core/system-services/logging/LogService";
export interface IRequestService {
    get<T>(url: string, options?: RequestInit, parameters?: RequestOptions): Promise<T>;
    post<T>(url: string, postData: any, options?: RequestInit): any;
    put<T>(url: string, postData: any, options?: RequestInit): any;
    delete<T>(url: string, options?: RequestInit): any;
}
export interface RequestOptions {
    /** Отключает показ диалогов при возникновении ошибок. */
    disableDialogsOnErrors?: boolean;
}
export declare class RequestService {
    private readonly logService;
    private errorHandler?;
    private readonly absoluteUrlRegExp;
    constructor(logService: ILogService, errorHandler?: (response: Response, parameters?: RequestOptions) => Promise<void>);
    get<T>(requestInfo: RequestInfo, options?: RequestInit, parameters?: RequestOptions): Promise<T>;
    post<T>(requestInfo: RequestInfo, postData: any, options?: RequestInit): Promise<T>;
    put<T>(requestInfo: RequestInfo, postData: any, options?: RequestInit): Promise<T>;
    delete<T>(requestInfo: RequestInfo, options?: RequestInit): Promise<T>;
    fetch(requestInfo: RequestInfo, options?: RequestInit): Promise<any>;
    private makeRequest;
    private processJSONResponse;
}
export declare type $RequestService = {
    requestService: IRequestService;
};
export declare const $RequestService: string | ((model?: $RequestService) => IRequestService);
