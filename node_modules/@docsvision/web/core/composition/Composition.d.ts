import React from 'react';
import { RowRenderer } from '@docsvision/web/core/composition/RenderComposition';
import { IComposition } from '@docsvision/web/core/composition/IComposition';
import { ICompositionPlugins } from './ICompositionPlugins';
export interface ICompositionProps {
    data?: any;
    services?: any;
    plugins: ICompositionPlugins<any, any> | undefined | null;
    disabledFeatures?: string[];
    rowRenderer?: RowRenderer;
    forEach?: (data: any) => any[];
    children?: React.ReactNode | ((childData?: any) => React.ReactNode);
    name: string;
}
export interface ICompositionState {
}
/** Компонент, выполняющий рендеринг области, заполняемой плагинами. */
export declare class Composition extends React.Component<ICompositionProps, ICompositionState> implements IComposition {
    parentComposition: IComposition | undefined;
    unmountCallbacks: ((composition: IComposition) => void)[];
    constructor(props: ICompositionProps);
    get name(): string;
    get plugins(): ICompositionPlugins<any, any>;
    get services(): any;
    get data(): any;
    get disabledFeatures(): string[];
    getChildrenData(): any;
    renderChildren: (childrenData?: any) => React.ReactNode;
    renderChild(childData: unknown): React.ReactNode;
    update(): Promise<void>;
    ref: HTMLElement;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    private callCompositionDidMount;
    render(): {};
}
