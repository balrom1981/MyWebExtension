/// <reference types="react" />
import { $Router } from '@docsvision/web/core/routing/IRouter';
import { ServiceContainer } from "@docsvision/web/core/services";
import { $LogService } from '@docsvision/web/core/system-services/logging/LogService';
import { RouteContext } from './RouteContext';
export interface IApplication extends ServiceContainer, $LogService, $Router, $RoutingService {
}
export declare type Params = {
    [k in string]: any;
};
export declare type RouteHandler = (application: IApplication, params: Params, query: string) => Promise<JSX.Element>;
export interface INavigateOptions {
    replaceState: boolean;
}
export interface IRoutingService {
    /** Инициализация роутера */
    initializeRouter(): any;
    /** Резолв роута, без него смена роута не произойдет (метод resolve у navigo) */
    /**
     * Вызов метода "on" не триггерит проверку роута,
     * поэтому нужно вызывать resolve вручную, чтобы роутинг сработал
     */
    resolveRoute(): any;
    /** Обновление history или смена роута */
    updateUrl(path: string, affectBrowserHistory: boolean): any;
    /** Создание NotFound роута (метод notFound у navigo) */
    generateNotFoundRoute(handler?: () => void): any;
    /** Переход по роуту (метод navigate у navigo) */
    navigateToRoute(route: string, options?: INavigateOptions): any;
    /** Смена роута (navigate & resolve) */
    goToRoute(route: string, options?: INavigateOptions): any;
    /** Регистрация роутов в веб-клиенте */
    registerRoutes(mapper: any, processRoute: (context: RouteContext, mapper: any) => void): any;
    /** Проверка инициализирован ли роутер (true/false) */
    isInitialized(): boolean;
    /** Возвращает инстанс роутера */
    getInternalRouterInstance(): any;
    /** Возвращает объект с данными из lastRouteResolved ({url, query, params, name}) */
    getLastRouteResolvedParams(): RouteContext;
}
export declare type $RoutingService = {
    routingService: IRoutingService;
};
export declare const $RoutingService: string | ((model?: $RoutingService) => IRoutingService);
