import React from "react";
import { IComponentProps } from '@docsvision/web/core/component';
import { PopoverLogic } from '@docsvision/web/components/popover/PopoverLogic';
/** Свойства для  {@link Popover} */
export interface IPopoverProps extends IComponentProps<PopoverLogic> {
    /** При смене значения на true всплывающее окно откроется, при смене в false - скроется. */
    isOpen: boolean;
    hidden?: boolean;
    /** Контейнер целевого элемента, в котором будет отслеживаться скролл. */
    container?: HTMLElement;
    /**
     * Элемент, относительно которого всплывающее окно будет позиционироваться.
     *
     * Замечание: Popover не может корректно позиционироваться относительно элементов с display: inline.
     *
     * По умолчанию: ближайший не-inline родитель Popover.
     */
    target?: HTMLElement;
    /** Аналог {@see target}, но с динамическим определением значения. */
    targetGetter?: () => HTMLElement;
    /** Минимальная дистанция до границ экрана в пикселях. */
    screenPadding?: number;
    /**
     * Место относительно целевого элемента, где будет размещено вспылвающее окно.
     *
     * Замечение: если места сверху будет недостаточно (будут мешать границы экрана), то всплывающее окно
     * автоматически сместится вниз.
     *
     * По умолчанию: PopoverMode.Above
     */
    mode?: PopoverMode;
    /** Статичное смещение всплывающего окна от вычисленного положения по оси X в пикселях. */
    xShift?: number;
    /** Статичное смещение всплывающего окна от вычисленного положения по оси Y в пикселях. */
    yShift?: number;
    /** Настройка, определяющая, возможность перетаскивания окна мышкой */
    draggable?: boolean;
    /** Настройка, определяющая, надо ли скрывать всплывающее окно, если позиции достигли границ экрана */
    hideIfBehindPadding?: boolean;
    /** Не вызывает событие onClickOutside в случае, если клавиша мишы была зажата внутри Popover и отжата вне его */
    preventClickOutsideEventOnMouseUp?: boolean;
    /** Событие click вне всплывающего окна. */
    onClickOutside?: (ev: MouseEvent) => void;
    /** Событие click внутри всплывающего окна. */
    onClickInside?: (ev: MouseEvent) => void;
    /** Событие нажатия Enter (срабатывает, даже когда фокус вне модального окна). */
    onEnterPressed?: (ev: KeyboardEvent) => void;
    /** Событие нажатия Esc (срабатывает, даже когда фокус вне модального окна). */
    onEscPressed?: (ev: KeyboardEvent) => void;
    onShouldStartDrag?: (el: EventTarget) => boolean;
    /** Содержимое модального окна. Используйте {@link PopoverBox} для создания белой панели со скругленными краями. */
    children?: React.ReactNode;
    /** Дополнительный класс, который будет назначен на корневой элемент. */
    className?: string;
    /** Минимальная ширина. */
    minWidth?: string;
    /** Координаты клика мыши. */
    pageCoordinates?: any;
    /** Показывает необходиомость обработать событие contextmenu. */
    isContextmenuEventNeed?: boolean;
}
/**
 * Режим Popover.
 */
export declare enum PopoverMode {
    /** Сверху по центру. Если сверху места нет, то показывается снизу. */
    Above = 0,
    /**
     * Слева, выровненное вертикально по верхнему краю (верхний край окна совпадает с верхним краем целевого элемента).
     * Если снизу не хватает места, то смещается вверх ровно на столько, чтобы уместить на экране.
     * Если слева нет места, то смещается ровно на столько, чтобы уместить на экране.
     */
    LeftSide = 1,
    /** Снизу, выровненное так, что левый край окна соответствует левому краю целевого элемента. Если снизу нет места, то показывается сверху. */
    BottomDropdown = 2,
    /** Слева, так что верхний левый угол совпадает с левым верхнем углом целевого элемента. */
    LeftSideToRight = 3,
    /** Слева, так что верхний левый угол совпадает с левым нижним углом целевого элемента. */
    LeftBottomSideToRight = 4,
    /**
     * Под курсором.
     * Если нет места снизу, то выравнивается по крайней нижней границе
     *  Если нет места справа, то выравнивается по крайней правой границе
     */
    UnderCursor = 5
}
/**
 *
 * Пример использования:
 *
 *     <div>
 *         <Popover isOpen={this.state.popoverOpen} onClickOutside={this.closePopover} onEscPressed={this.closePopover}>
 *             <PopoverBox>
 *                 <PopoverHead>
 *                     <PopoverTitle>Заголовок</PopoverTitle>
 *                 </PopoverHead>
 *                 <PopoverContent>
 *                     Содержимое
 *                 </PopoverContent>
 *             </PopoverBox>
 *         </Popover>
 *         <span>Элемент, около которого появится окно</span>
 *     </div>
 *
 *  См. также: {@link PopoverBox}, {@link PopoverHead}, {@link PopoverTitle},
 *  {@link PopoverCloseButton}, {@link PopoverAcceptButton}, {@link PopoverCancelButton}, {@link PopoverContent}
 */
export declare const Popover: (props: IPopoverProps) => JSX.Element;
