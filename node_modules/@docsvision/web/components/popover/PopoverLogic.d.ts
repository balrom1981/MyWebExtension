import { IPopoverProps, PopoverMode } from "@docsvision/web/components/popover/Popover";
import { ComponentLogic } from "@docsvision/web/core/component/ComponentLogic";
import { Domain } from "effector";
export declare const UPDATE_POSITION_ANIMATION_DURATION = 300;
export declare type PopoverProcess = {
    zIndex: number;
};
export declare type PopoverCalcProcess = PopoverProcess & {
    calcFunc: () => void;
};
export declare class PopoverLogic extends ComponentLogic<IPopoverProps> {
    domain: Domain;
    $positionCalculated: import("effector").Store<boolean>;
    setPositionCalculated: import("effector").Event<boolean>;
    $root: import("effector").Store<HTMLElement>;
    setRoot: import("effector").Event<HTMLElement>;
    root: HTMLElement;
    $isHide: import("effector").Store<boolean>;
    setIsHide: import("effector").Event<boolean>;
    positionCalculated: boolean;
    $renderReady: import("effector").Store<boolean>;
    setRenderReady: import("effector").Event<boolean>;
    ignoreClickOutsideEvent: boolean;
    popoverClick: boolean;
    xDiff: number;
    yDiff: number;
    zIndex: number;
    getPropsTarget: (props: IPopoverProps) => HTMLElement;
    currentTarget: HTMLElement;
    $mode: import("effector").Store<PopoverMode>;
    screenPadding: number;
    calcPositionProcess: Array<PopoverCalcProcess>;
    getCurrentTarget: () => HTMLElement;
    attachStub: (elem: HTMLElement) => void;
    updatePositions: () => void;
    updateTopPosition: (target: any) => void;
    updateHorizontalPosition: (target: any) => void;
    isLastShownPopover: () => boolean;
    onShow: () => void;
    onHide: () => void;
    dispose: () => Promise<unknown>;
    updateVisibility: (hidden: boolean) => void;
    moveDraggableIntoView: (contentHidden?: boolean) => void;
    subscribeGlobalEvents: (keydown: boolean, click: boolean, position: boolean) => void;
    unsubscribeGlobalEvents: (keydown: boolean, click: boolean, position: boolean) => void;
    onDocumentMouseDown: (event: MouseEvent) => void;
    onDocumentMouseUp: (event: MouseEvent) => void;
    onMouseMove: (event: React.MouseEvent | React.TouchEvent | MouseEvent) => void;
    onMouseDown: (event: React.MouseEvent | React.TouchEvent) => void;
    onMouseUp: (event: React.MouseEvent | React.TouchEvent) => void;
    onDocumentClick: (event: MouseEvent) => void;
    onDocumentRightButtonClick: (event: MouseEvent) => void;
    onWindowResize: () => void;
    onDocumentKeyDown: (ev: any) => void;
    calcPopoverPositions: () => Promise<void>;
    isExistPopoverCalcProcess: (zIndex: number) => PopoverCalcProcess;
    addPopoverCalcProcess: (process: PopoverCalcProcess) => void;
    removePopoverCalcProcess: (zIndex?: number) => void;
    onPageScroll: () => Promise<void>;
    isAbsoluteOrFixedPositioned: (elem: HTMLElement, checkElementInBodyAndNotInContainer?: boolean) => boolean;
    isElementAbovePopover: (elem: HTMLElement) => boolean;
    init(): void;
}
