import { IComponentPlugin, ICompositionPluginProps, IDecoratorPlugin, IMountEffectPlugin, IServiceProviderPlugin } from "@docsvision/web/core/composition";
import { ICompositionPlugins } from "@docsvision/web/core/composition/ICompositionPlugins";
import { ICellData, IColumnData, IRowData, ITableData, TableCompositionTypes } from ".";
export interface ITablePlugins<ServicesT = any> {
    serviceProviders?: IServiceProviderPlugin<TableCompositionTypes.Root, ITableData, ServicesT>[];
    root?: ICompositionPlugins<TableCompositionTypes.Root, ITableData, ServicesT>;
    sidePanel?: ICompositionPlugins<TableCompositionTypes.SidePanel, ITableData, ServicesT>;
    toolbar?: ICompositionPlugins<TableCompositionTypes.Toolbar, ITableData, ServicesT>;
    table?: ICompositionPlugins<TableCompositionTypes.Table, ITableData, ServicesT>;
    header?: ICompositionPlugins<TableCompositionTypes.Header, ITableData, ServicesT>;
    headerRow?: ICompositionPlugins<TableCompositionTypes.HeaderRow, ITableData, ServicesT>;
    headerCell?: ICompositionPlugins<TableCompositionTypes.HeaderCell, IColumnData, ServicesT>;
    body?: ICompositionPlugins<TableCompositionTypes.Body, ITableData, ServicesT>;
    row?: ICompositionPlugins<TableCompositionTypes.Row, IRowData, ServicesT>;
    cell?: ICompositionPlugins<TableCompositionTypes.Cell, ICellData, ServicesT>;
    footer?: ICompositionPlugins<TableCompositionTypes.Footer, ITableData, ServicesT>;
}
export declare namespace TablePlugins {
    type ServiceProvider<TServices> = IServiceProviderPlugin<TableCompositionTypes.Root, ITableData, TServices>;
    namespace Root {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Root, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Root, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Root, ITableData, TServices>;
    }
    namespace SidePanel {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.SidePanel, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.SidePanel, ITableData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.HeaderCell, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.SidePanel, ITableData, TServices>;
    }
    namespace Toolbar {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Toolbar, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Toolbar, ITableData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.Toolbar, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Toolbar, ITableData, TServices>;
    }
    namespace Table {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Table, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Table, ITableData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.Table, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Table, ITableData, TServices>;
    }
    namespace Header {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Header, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Header, ITableData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.Header, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Header, ITableData, TServices>;
    }
    namespace HeaderRow {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.HeaderRow, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.HeaderRow, ITableData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.HeaderRow, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.HeaderRow, ITableData, TServices>;
    }
    namespace HeaderCell {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.HeaderCell, IColumnData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.HeaderCell, IColumnData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.HeaderCell, IColumnData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.HeaderCell, IColumnData, TServices>;
    }
    namespace Body {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Body, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Body, ITableData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.Body, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Body, ITableData, TServices>;
    }
    namespace Row {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Row, IRowData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Row, IRowData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.Row, IRowData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Row, IRowData, TServices>;
    }
    namespace Cell {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Cell, ICellData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Cell, ICellData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.Cell, ICellData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Cell, ICellData, TServices>;
    }
    namespace Footer {
        type MountEffect<TServices = any> = IMountEffectPlugin<TableCompositionTypes.Footer, ITableData, TServices>;
        type Component<TServices = any> = IComponentPlugin<TableCompositionTypes.Footer, ITableData, TServices>;
        type ComponentProps<TServices = any> = ICompositionPluginProps<TableCompositionTypes.Footer, ITableData, TServices>;
        type Decorator<TServices = any> = IDecoratorPlugin<TableCompositionTypes.Footer, ITableData, TServices>;
    }
}
