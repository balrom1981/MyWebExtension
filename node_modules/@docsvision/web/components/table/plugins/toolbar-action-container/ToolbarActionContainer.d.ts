import React from 'react';
import { IComponentProps, HtmlProps } from '@docsvision/web/core/component';
import { ICompositionPluginProps } from '@docsvision/web/core/composition';
import { ITableData } from '../../interfaces';
import { $TableData } from '../table-data';
import { IToolbarActionContainerButton, ToolbarActionContainerMode } from './ToolbarActionContainerTypes';
export declare class ToolbarActionContainerView {
    container: (props: React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement> & {
        ref?: any;
    } & ToolbarActionContainerProps) => JSX.Element;
    item: (props: React.ClassAttributes<HTMLLIElement> & React.LiHTMLAttributes<HTMLLIElement> & {
        ref?: any;
    } & import("./ToolbarActionContainerTypes").IToolbarActionContainerItemProps) => JSX.Element;
    itemMobile: (props: React.ClassAttributes<HTMLLIElement> & React.LiHTMLAttributes<HTMLLIElement> & {
        ref?: any;
    } & import("./ToolbarActionContainerTypes").IToolbarActionContainerItemProps) => JSX.Element;
    iconWrap: (props: import("@docsvision/web/components/media/Icon/Icon").IconProps) => JSX.Element;
    iconImage: (props: import("@docsvision/web/icons/DotsVerticalIcon").IDotsVerticalIconProps) => JSX.Element;
    wrap: (props: HtmlProps.div) => JSX.Element;
}
export interface ToolbarActionContainerProps extends IComponentProps {
    actions: IToolbarActionContainerButton[];
    mode?: ToolbarActionContainerMode;
    opened?: boolean;
}
export declare const ToolbarActionContainer: (props: ICompositionPluginProps<any, ITableData, $TableData> & ToolbarActionContainerProps) => JSX.Element;
