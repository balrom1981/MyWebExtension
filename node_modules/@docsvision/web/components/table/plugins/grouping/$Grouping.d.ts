import { GroupingStateItem } from "@docsvision/web/components/table/plugins/grouping";
import { Store } from "effector";
import { IGrouping } from "./interfaces/IGrouping";
import { IGroupingItem } from "./interfaces/IGroupingItem";
import { IGroupingPathItem } from "./interfaces/IGroupingPathItem";
export declare const GROUPING_SIDE_PANEL_TAB_ID = "GroupingTab";
export declare const EVERYTHING_GROUP_ITEM_ID = "EverythingItem";
export declare const GROUPING_DRAG_SCOPE = "GroupingColumnDrag";
export interface IGroupingService {
    /** Дерево значений группировки. */
    readonly $grouping: Store<IGrouping | null>;
    /** Структура группировки. */
    readonly $groupingPath: Store<IGroupingPathItem[]>;
    /** Служебное значение, идентифицирующее режим показа всех строк без группировки. */
    readonly everytingItem: IGroupingItem;
    /** Выбранное значение группировки. */
    readonly $selectedItem: Store<IGroupingItem>;
    /** Доступна ли группировка в данный момент. */
    readonly $groupingAvailable: Store<boolean>;
    /** Доступно ли изменение группировки в данный момент. */
    readonly $groupingReadonly: Store<boolean>;
    /** Состояние группировки. */
    readonly groupingStateInfo: Array<GroupingStateItem>;
    /** Сбрасывает группировку. */
    reset(): void;
    /** Свернуть или развернуть дочерний уровень группировки. */
    toggleItem(item: IGroupingItem): void;
    /** Выбрать значение группировки. */
    selectItem(item: IGroupingItem): void;
    /** Загружает следующую страницу значений группировки. */
    loadMoreItems(parentItem?: IGroupingItem): void;
    /** Включение или отключение возможности группировки. */
    enableGrouping(enable: boolean): void;
    /** Удаляет из группировки столбец. */
    removeColumnGrouping(columnId: string): void;
    /** Добавляет группировку по столбцу. */
    addColumnGrouping(columnId: string): void;
    /** Сбрасывает текущую группировку и устанавливает группировку по указанным столбцам. */
    setGroupingPath(columnIds: IGroupingPathItem[]): void;
    /** Проверяет, доступно ли добоавления столбца в группировку. */
    canAddColumnGrouping(columnId: string): boolean;
    /** Перезагружает дерево группировки. */
    reloadGrouping(): void;
}
export declare type $Grouping = {
    grouping: IGroupingService;
};
export declare const $Grouping: string | ((model?: $Grouping) => IGroupingService);
