import { $MessageWindow } from "@docsvision/web/components/modals/message-box";
import { $Resources } from "@docsvision/web/core/localization/$Resources";
import { $Domain } from "@docsvision/web/core/state-management";
import { Store, Event, Effect } from "effector";
import { $TableFilterService } from "../filter";
import { $SidePanel } from "../side-panel";
import { $TableSortService } from "../sort";
import { $TableData } from "../table-data";
import { $TableUpdate } from "../table-update/$TableUpdate";
import { IGroupingService } from "./$Grouping";
import { IGrouping } from "./interfaces/IGrouping";
import { IGroupingItem } from "./interfaces/IGroupingItem";
import { IGroupingPathItem } from "./interfaces/IGroupingPathItem";
export declare type $GroupingServices = $Domain & $SidePanel & $Resources & $TableSortService & $TableData & $TableUpdate & $MessageWindow;
export interface ILoadGroupingItemsOptions {
    path: IGroupingPathItem[];
    grouping: IGrouping;
    parentItem?: IGroupingItem;
    sortDescending?: boolean;
}
export interface GroupingStateItem {
    /**
     * Column name
     */
    name: string;
    /**
     * Grouping level
     */
    level: number;
    /**
     * Sorting by descending
     */
    isDescending: boolean;
    /**
     * Active value
     */
    activeValue: unknown;
}
export interface IGroupingServiceOptions {
    enabled: boolean;
    $readonly: Store<boolean>;
    loadGroupingItems: (options: ILoadGroupingItemsOptions, services?: any) => Promise<IGrouping>;
    onGroupingPathChanged: (path: IGroupingPathItem[]) => void;
}
export declare const GROUPING_COLUMN_VISIBILITY = "GroupingVisibility";
export declare class GroupingService implements IGroupingService {
    private options;
    private services;
    $grouping: Store<IGrouping | null>;
    $groupingPath: Store<IGroupingPathItem[]>;
    everytingItem: IGroupingItem;
    $selectedItem: Store<IGroupingItem>;
    $groupingAvailable: Store<boolean>;
    $groupingReadonly: Store<boolean>;
    $refreshToken: Store<string>;
    lastRefreshToken: string;
    loadGroupingItemsFx: Effect<ILoadGroupingItemsOptions, IGrouping>;
    reset: Event<void>;
    toggleItem: Event<IGroupingItem>;
    selectItem: Event<IGroupingItem>;
    loadMoreItems: Event<IGroupingItem>;
    enableGrouping: Event<boolean>;
    removeColumnGrouping: Event<string>;
    addColumnGrouping: Event<string>;
    setGroupingPath: Event<IGroupingPathItem[]>;
    reloadGrouping: Event<void>;
    constructor(options: IGroupingServiceOptions, services: $GroupingServices & $TableFilterService);
    private getSelectionPath;
    get groupingStateInfo(): GroupingStateItem[];
    canAddColumnGrouping(columnId: string): boolean;
    private columnGroupingAvailable;
}
