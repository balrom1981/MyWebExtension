import { ColumnWidthSettingType, IColumnsWidth, IResizeColumnService, TableLayoutFixed } from "@docsvision/web/components/table/plugins/resize-column/$ResizeColumn";
import { ISimplePluginData } from "@docsvision/web/core/extensibility/plugins";
import { $Domain } from "@docsvision/web/core/state-management";
import { Store, Event } from "effector";
import { ITableData } from "../../interfaces/ITableData";
import { $TableData } from "../table-data";
export declare const MIN_WIDTH_COLUMN_DEFAULT = 80;
export interface ResizeColumnServiceOptions {
    fixateOnMount: boolean;
}
export declare function getColumnSizeProcessedId(data: ITableData): ISimplePluginData<string>;
export declare class ResizeColumnService implements IResizeColumnService {
    private options;
    private services;
    private RESET_VALUE;
    $columnsWidth: Store<IColumnsWidth[]>;
    setWidthEvent: Event<IColumnsWidth[]>;
    $tableFixationState: Store<TableLayoutFixed>;
    setTableFixationState: Event<TableLayoutFixed>;
    $resizeInProgress: Store<boolean>;
    resizeCompleted: Event<void>;
    beginResize: Event<void>;
    endResize: Event<void>;
    columnElements: {
        [id: string]: HTMLTableHeaderCellElement | null;
    };
    constructor(options: ResizeColumnServiceOptions, services: $Domain & $TableData);
    processData(data: ITableData): Promise<void>;
    private replaceStateWithNewColumns;
    private createColumnWidth;
    setWidth(id: string, width: number, type: ColumnWidthSettingType): void;
    setWidthFor(columns: IColumnsWidth[]): void;
    private getWidthInfo;
    getWidth(id: string): number;
    getMinWidth(id: string): number;
    resetWidth(type: ColumnWidthSettingType): void;
    registerColumnHeaderElement(id: string, th: HTMLTableHeaderCellElement | null): void;
    fixateColumns(type?: ColumnWidthSettingType): void;
    resetColumns(): Promise<unknown>;
}
