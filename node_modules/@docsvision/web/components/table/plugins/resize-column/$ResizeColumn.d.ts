import { Store, Event } from 'effector';
import { ITableData } from '../../interfaces';
export interface ColumnWidthSetting {
    user?: number;
    custom?: number;
    system?: number;
    computed?: number;
}
export interface IColumnsWidth {
    id: string;
    width: ColumnWidthSetting;
}
export declare enum TableLayoutFixed {
    Off = 0,
    On = 1
}
export declare enum ColumnWidthSettingType {
    User = 0,
    Custom = 1,
    System = 2,
    Computed = 3
}
export interface IResizeColumnService {
    readonly $columnsWidth: Store<IColumnsWidth[]>;
    readonly $tableFixationState: Store<TableLayoutFixed>;
    readonly $resizeInProgress: Store<boolean>;
    readonly resizeCompleted: Event<void>;
    setTableFixationState: Event<TableLayoutFixed>;
    getWidth: (id: string) => number;
    getMinWidth: (id: string) => number;
    setWidth: (id: string, width: number, type: ColumnWidthSettingType) => void;
    resetWidth(type: ColumnWidthSettingType): void;
    processData(data: ITableData): Promise<void>;
    registerColumnHeaderElement(id: string, th: HTMLTableHeaderCellElement | null): void;
    fixateColumns(type?: ColumnWidthSettingType): void;
    resetColumns(): Promise<{}>;
    beginResize(): void;
    endResize(): void;
}
export declare type $ResizeColumn = {
    resizeColumn: IResizeColumnService;
};
export declare const $ResizeColumn: string | ((model?: $ResizeColumn) => IResizeColumnService);
