import { $ToolbarHeight } from '@docsvision/web/components/table/plugins/toolbar/$ToolbarHeight';
import { $Domain } from '@docsvision/web/core/state-management';
import { Event, Store } from 'effector';
import { IRow } from '../../interfaces';
import { $TableData } from '../table-data';
import { $ScrollContainer } from './$ScrollContainer';
import { ScrollWindow, IScrollPositionService } from './$ScrollPosition';
/**
 * Реализация сервиса {@see $ScrollPosition}.
 */
export declare class ScrollPositionService implements IScrollPositionService {
    private services;
    $enabled: Store<boolean>;
    enable: Event<boolean>;
    $topRowIndex: Store<number>;
    $scrollWindow: Store<ScrollWindow>;
    $scrollWindowThrottled: Store<ScrollWindow>;
    setScrollWindow: Event<ScrollWindow>;
    firstRowIndex: number;
    lastRowIndex: number;
    headerElement: HTMLElement;
    requiredPosition: number | null;
    setPositionInterval: any;
    setPositionIntervalCount: number;
    rowDomElements: {
        [entityId: string]: HTMLElement;
    };
    instanceId: string;
    constructor(services: $Domain & $ScrollContainer & $TableData & $ToolbarHeight);
    private onEnabled;
    setPosition(rowIndex: number): void;
    getScrollRelativeTo(rowIndex: number): number | undefined;
    setScrollRelativeTo(rowIndex: number, relativeScroll: number): void;
    registerRowElement(row: IRow, element: HTMLElement | null): void;
    registerHeaderElement(element: HTMLElement): void;
    getRowDomElement(rowIndex: number): HTMLElement;
    getRows(): IRow[];
    onScroll: () => void;
    actualizeScroll(perfect?: boolean): void;
    actualizeStore(): void;
    calculateWindow(firstFullyVisibleRow: number): ScrollWindow;
    findActualPosition(): any;
    private findFirstVisibleRow;
    private rowIsBelowContainerTopBorder;
    private rowVisible;
    private getRowAndContainerBorders;
    getOffsetTop(element: HTMLElement): number;
    private get headerOffsetHeight();
    private checkRequiredPositionAchieved;
}
