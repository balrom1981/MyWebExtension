import { ComponentLogic } from '@docsvision/web/core/component';
export interface ScrollBarLogicOptions {
    handleClassName: string;
    totalCount: number;
    topIndex: number;
}
export declare class ScrollBarLogic extends ComponentLogic<ScrollBarLogicOptions> {
    domain: import("effector").Domain;
    $dragPosition: import("effector").Store<number>;
    $dragIndex: import("effector").Store<number>;
    $dragHandle: import("effector").Store<HTMLElement>;
    $dragStarted: import("effector").Store<boolean>;
    $dragEnded: import("effector").Store<boolean>;
    $dragBar: import("effector").Store<HTMLElement>;
    $isAllowCalculatePosition: import("effector").Store<{
        timer: any;
        allow: boolean;
    }>;
    $dragBarRect: import("effector").Store<{
        top: number;
        bottom: number;
    }>;
    $mouseShiftOnHandle: import("effector").Store<number>;
    $mouseY: import("effector").Store<number>;
    $mouseMoved: import("effector").Store<boolean>;
    mouseDown: import("effector").Event<MouseEvent>;
    mouseMove: import("effector").Event<MouseEvent>;
    mouseUp: import("effector").Event<MouseEvent>;
    mouseLeave: import("effector").Event<MouseEvent>;
    beginDrag: import("effector").Event<{
        handle: HTMLElement;
        mouseShift: number;
        mouseY: number;
    }>;
    moveDrag: import("effector").Event<{
        mouseY: number;
    }>;
    endDrag: import("effector").Event<void>;
    positionCalculated: import("effector").Event<number>;
    setIsAllowCalculatePosition: import("effector").Event<boolean>;
    setMouseMoved: import("effector").Event<boolean>;
    /**
     * Processing time recalculation of the current scroll
     * Required for rigid fixation of the scroll bar
     */
    processingDelay: number;
    lastWindowSize: number;
    lastPosition: number;
    calculatePosition(index: number, bottomIndex: number, totalCount: number): number;
    getVisible(): boolean;
    init(props: ScrollBarLogicOptions): void;
}
