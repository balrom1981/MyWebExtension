import { IComposition } from "@docsvision/web/core/composition";
import React from 'react';
import { $ContextMenuOptions } from '@docsvision/web/components/table/plugins/context-menu/$ContextMenuOptions';
import { $ScrollContainer } from '@docsvision/web/components/table/plugins/scroll';
import { $TableDom } from '@docsvision/web/components/table/plugins/table-dom';
import { $Domain } from "@docsvision/web/core/state-management";
import { $CheckboxService } from "@docsvision/web/components/table/plugins/checkbox";
import { $DeviceType } from "@docsvision/web/core/system-services/environment";
export declare enum RowType {
    TableHeaderRowItem = 0,
    TableRowItem = 1
}
export declare const MenuItemCompositionNames: {
    TableHeaderRow: string;
    TableRow: string;
};
export interface ITableHeaderRowItemProps {
    children?: React.ReactNode;
}
export interface ITableRowItemProps {
    children?: React.ReactNode;
}
declare type $ContextMenuServices = $ScrollContainer & $TableDom & $ContextMenuOptions & $DeviceType & $CheckboxService;
export declare class ContextMenuLogic {
    private node;
    private composition;
    private static mMenuBarsContainer;
    private ACTIVE_ROW_CLASSNAME;
    private mContainer;
    private pageCoordinates;
    private targetRow;
    private static getMenuBarsContainer;
    constructor(node: HTMLElement, composition: IComposition<any, unknown, $ContextMenuServices & $Domain>);
    static Setup(node: HTMLElement, composition: IComposition<any, unknown, $ContextMenuServices & $Domain>): void;
    renderContextMenu(): JSX.Element;
    onShow(): void;
    private shouldShow;
    private isMobile;
    onHide(): void;
    componentWillUnmount(): void;
    openMenu: () => void;
    closeMenu: () => void;
    hideContextMenuHandler: () => void;
    private setRowSelection;
    showContextMenuHandler: (e?: any) => void;
    private longTapTimer;
    private longTapInterval;
    private touchstartListener;
    private touchendListener;
    addContextMenuCustom: (row: HTMLElement) => void;
    removeContextMenuCustom: (row: HTMLElement) => void;
    onMenuItemClick(action: (context: IComposition<any, any, any>) => void, enabled: boolean): void;
}
export {};
