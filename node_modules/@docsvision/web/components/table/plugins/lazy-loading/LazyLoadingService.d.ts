import { IRow } from '@docsvision/web/components/table/interfaces';
import { $Domain } from '@docsvision/web/core/state-management';
import { Event, Store } from 'effector';
import { $ScrollPosition, ScrollWindow } from '../scroll';
import { $TableData } from '../table-data';
import { ILazyLoadingService } from './$LazyLoading';
export interface LazyLoadingOptions {
    /** Колличество строк выше и ниже видимого окна, которые необходимо загружать. */
    overscan?: number;
    /** Минимальное колличество строк, которое инициирует загрузку следующей порции. */
    overscanSensitivity?: number;
}
export declare const DEFAULT_OVERSCAN = 50;
export declare const MAX_ITERATION = 10000;
/**
 * Реализация сервиса {@see $LazyLoading}.
 */
export declare class LazyLoadingService implements ILazyLoadingService {
    private options;
    private services;
    $loading: Store<boolean>;
    setLoading: Event<boolean>;
    constructor(options: LazyLoadingOptions | undefined, services: $TableData & $ScrollPosition & $Domain);
    onScrollPositionChange: (scroll: ScrollWindow) => Promise<void>;
    onScrollPositionChangeKnownModelSize: (scroll: ScrollWindow, rows: IRow[]) => Promise<void>;
    onScrollPositionChangeUnknownModelSize: (scroll: ScrollWindow, rows: IRow[]) => Promise<void>;
    loadAllRows: () => Promise<void>;
    loadRowsKnownModelSize: (rows: IRow[]) => Promise<void>;
    loadRowsUnknownModelSize: (rows: IRow[]) => Promise<void>;
    checkAllRowsLoaded(): boolean;
    private get overscanSensitivity();
    private get overscan();
}
