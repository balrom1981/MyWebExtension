import { IColumn } from "@docsvision/web/components/table/interfaces";
import { ITableFilterPluginData } from "@docsvision/web/components/table/plugins/filter/ITableFilterPluginData";
import { FilterRefData, FilterRefObject, IFilterActiveColumn, ISetFilterPanelData } from "@docsvision/web/components/table/plugins/filter/services/TableFilterService";
import { IComposition } from "@docsvision/web/core/composition";
import { Effect, Event, Store } from "effector";
export declare enum FilterMode {
    /**
     * Default
     */
    Default = 0,
    /**
     * Date List
     */
    DateList = 1,
    /**
     * Date Calendar
     */
    DateCalendar = 2
}
export interface IFilterValue {
    column: IColumn;
    value: string[];
    mode?: FilterMode;
}
export interface ITableFilterService {
    /** Общее хранилище показанных колонок таблицы c невыключенным фильтром */
    $filter: Store<IColumn[]>;
    /** Хранилище колонок к которым применены фильтры */
    $filterActive: Store<IFilterActiveColumn[]>;
    /** Видимая панель с фильтром */
    $filterPanelVisible: Store<FilterRefObject>;
    /** Механизм переключения видимости панели с фильтром */
    toggleFilterPanelVisibility: Event<IColumn>;
    applyFilterFx: Effect<IFilterValue, void>;
    /** Очищает все текущие фильтры и устанавливает переданные фильтры. */
    setFiltersFx: Effect<IFilterValue[], void>;
    removeFilterFx: Effect<IColumn, void>;
    dropFiltersFx: Effect<void, void>;
    setFilterPanelStatus: Event<ISetFilterPanelData>;
    getFilterData(column: IColumn): ITableFilterPluginData | null;
    update(composition: IComposition): void;
    getRef(columnId: string): FilterRefObject;
    setRef: Event<FilterRefData>;
}
export declare type $TableFilterService = {
    tableFilterService: ITableFilterService;
};
export declare const $TableFilterService: string | ((model?: $TableFilterService) => ITableFilterService);
