import { IColumn, ITableData } from '@docsvision/web/components/table/interfaces';
import { IFilterValue, ITableFilterService } from '@docsvision/web/components/table/plugins/filter/services/ITableFilterService';
import { IComposition } from '@docsvision/web/core/composition';
import { Event, Store, Effect } from 'effector';
import { RefObject } from 'react';
export declare enum FilterStatus {
    NotActive = 0,
    Active = 1,
    Disabled = 2
}
export declare enum FilterPanelStatus {
    Hidden = 0,
    Visible = 1
}
export interface IFilterActiveColumn extends IColumn {
}
export interface ISetFilterPanelData {
    column: IColumn;
    status: FilterPanelStatus;
}
export declare enum FilterRef {
    Panel = "panel",
    Filter = "filter",
    Input = "input",
    ScrollContainer = "scrollContainer"
}
export interface RefElements {
    input: RefObject<HTMLInputElement>;
    panel: RefObject<HTMLDivElement>;
    filter: RefObject<HTMLDivElement>;
    scrollContainer: RefObject<HTMLDivElement>;
}
export interface FilterRefObject {
    column: IColumn;
    ref: Partial<RefElements>;
}
export interface FilterRefData {
    column: IColumn;
    type: FilterRef;
    ref: RefObject<any>;
}
export declare const getVisibleColumnsWithFilterExt: (composition: IComposition<any, ITableData, any>) => any[];
export declare class TableFilterService implements ITableFilterService {
    private onFilterRequest;
    domain: import("effector").Domain;
    services: any;
    composition: IComposition;
    $filter: Store<IColumn[]>;
    $filterActive: Store<IFilterActiveColumn[]>;
    /** хранилище RefObjects элементов фильтрации */
    $refs: Store<FilterRefObject[]>;
    $filterPanelVisible: Store<FilterRefObject>;
    toggleFilterPanelVisibility: Event<IColumn>;
    updateMainStore: Event<IColumn[]>;
    setFilterPanelStatus: Event<ISetFilterPanelData>;
    setRef: Event<FilterRefData>;
    applyFilterFx: Effect<IFilterValue, void>;
    removeFilterFx: Effect<IColumn, void, any>;
    dropFiltersFx: Effect<void, void, any>;
    setFiltersFx: Effect<IFilterValue[], void>;
    constructor(onFilterRequest: (filterData: IFilterActiveColumn[], services: any) => void, composition: IComposition<any, ITableData, any>);
    private setActiveFilterData;
    private removeActiveFilterData;
    getFilterData(column: IColumn): import("@docsvision/web/components/table/plugins/filter").ITableFilterPluginData;
    getRef(columnId: string): FilterRefObject;
    update(composition: IComposition<any, ITableData, any>): void;
}
