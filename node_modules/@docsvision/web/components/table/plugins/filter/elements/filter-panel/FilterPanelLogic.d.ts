import { ColumnType, IColumn } from '@docsvision/web/components/table/interfaces';
import { ComponentLogic } from '@docsvision/web/core/component';
import { IPluginData } from '@docsvision/web/core/extensibility/plugins';
import { Moment } from 'moment';
import { FormEvent, MouseEvent, RefObject } from 'react';
import { FilterRef } from "@docsvision/web/components/table/plugins/filter/services/TableFilterService";
import { $TableFilterService, FilterMode } from '@docsvision/web/components/table/plugins/filter';
export interface IDateFormatPluginData extends IPluginData {
    dateFormat?: string;
    timeFormat?: string;
    dateTimeSeparator?: string;
}
export interface IFilterPanelSetValue {
    value: string[];
    mode: FilterMode;
}
export interface IFilterPanelValue {
    default: string[];
    dateList: string[];
    dateCalendar: string[];
}
export declare class FilterPanelLogic extends ComponentLogic {
    domain: import("effector").Domain;
    services: $TableFilterService;
    column: IColumn;
    inputRef: RefObject<HTMLInputElement>;
    panelRef: RefObject<HTMLDivElement>;
    dateFormatData: IDateFormatPluginData;
    columnType: ColumnType;
    columnName: string;
    setValidStatus: import("effector").Event<boolean>;
    setFilterValue: import("effector").Event<string[]>;
    setFocus: import("effector").Event<boolean>;
    $values: import("effector").Store<IFilterPanelValue>;
    setValues: import("effector").Event<IFilterPanelSetValue>;
    $value: import("effector").Store<string[]>;
    setValue: import("effector").Event<string[]>;
    $mode: import("effector").Store<FilterMode>;
    setMode: import("effector").Event<FilterMode>;
    $isValueValid: import("effector").Store<boolean>;
    $filterValue: import("effector").Store<string[]>;
    $focused: import("effector").Store<boolean>;
    private get currentDate();
    private setCurrentValues;
    private resetValues;
    applyFilter: (e: FormEvent) => void;
    removeFilter: (e: MouseEvent) => void;
    validateInput: (inputValue: string[]) => boolean;
    onChangeFocus: (e: FocusEvent, focus: boolean) => void;
    onChange: (value: (string | Moment)[], mode?: FilterMode) => void;
    syncGlobalAndCurrentValues: (filterValue: string[], mode?: FilterMode) => void;
    setCurrentRef(ref: RefObject<any>, type: FilterRef): void;
    init: ({ composition: { services, data: { column } } }: {
        composition: {
            services: any;
            data: {
                column: any;
            };
        };
    }) => void;
}
