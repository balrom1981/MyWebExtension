import React, { RefObject } from 'react';
import './Tooltip.css';
import { DeviceType } from '@docsvision/web/core/system-services/environment';
export declare const TOOLTIP_CLASS = "dv-tooltip";
export interface TooltipEvents {
    click?: boolean;
    focus?: boolean;
    hover?: boolean;
    touch?: boolean;
}
export interface TooltipDelayOptions {
    show?: number;
    hide?: number;
}
export declare type TooltipPosition = 'top' | 'bottom' | 'left' | 'right';
export interface ITooltipProps {
    events?: TooltipEvents | boolean;
    attribute?: string;
    delay?: TooltipDelayOptions | number;
    autoPosition?: boolean;
    className?: string;
    onRenderContent?(target?: any, content?: any): React.ReactNode;
    persist?: boolean;
    position?: TooltipPosition;
    ref?(): RefObject<any>;
    defaultTargetId?: string;
    deviceType?: DeviceType;
}
export interface ITooltipState {
    hidden?: boolean;
    content?: any;
    place?: TooltipPosition;
    top?: number;
    left?: number;
    position: TooltipPosition;
    allowHTML: boolean;
    isContentMounted?: boolean;
}
export declare class Tooltip extends React.Component<ITooltipProps, ITooltipState> {
    static defaultProps: {
        attribute: string;
        autoPosition: boolean;
        className: string;
        delay: number;
        events: boolean;
        onRenderContent: any;
        persist: boolean;
        position: TooltipPosition;
        defaultTargetId: any;
        deviceType: DeviceType;
    };
    static init({ defaultTargetId, onRenderContent, delay, events, autoPosition, className, persist, position, attribute, deviceType }?: ITooltipProps): void;
    /** Обновление содержимого подсказки без перенаведения */
    static update(): void;
    private hint;
    private container;
    private target;
    private defaultState;
    state: ITooltipState;
    private timer;
    private placement;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    toggleEvents: (props: ITooltipProps, isAddEventListener: boolean) => void;
    private touchEnd;
    toggleHint: (e: any) => void;
    private updateContent;
    getTarget: (el: any) => HTMLElement;
    shouldComponentUpdate(props: any, state: any): boolean;
    shallowEqual: (a: any, b: any) => boolean;
    showHint: () => void;
    render(): JSX.Element;
}
export declare const renderDefaultContent: ({ allowHTML, content }: ITooltipState, className: string) => JSX.Element;
