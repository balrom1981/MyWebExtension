/// <reference types="react" />
import { BodyContainerProvider } from '@docsvision/web/components/modals/body-container-provider/BodyContainerProvider';
export declare type MessageBoxButton<T> = {
    name?: React.ReactNode | string;
    value?: T;
    id?: string;
    isCancel?: boolean;
};
export interface ShowConfirmationOptions {
    customCaptionText?: React.ReactNode;
    customButtonOkText?: React.ReactNode;
    customButtonCancelText?: React.ReactNode;
    hideByBackdropClick?: boolean;
    color?: string;
    closeOnEscape?: boolean;
}
export interface ShowCustomOptions {
    hideByBackdropClick?: boolean;
    color?: string;
    customCaptionText?: React.ReactNode | string;
    contentMaxHeight?: string | number;
    boxDefaultWidth?: boolean;
    boxMaxWidth?: string | number;
    className?: string;
}
export interface ShowOptions {
    customCaptionText?: React.ReactNode;
}
/** Сервис для доступа к системным функция setTimeout и setInterval. */
export interface IMessageWindowService {
    /** Показывает модальное окно с сообщением об ошибке. */
    showError(content: React.ReactNode, options?: ShowOptions): Promise<void>;
    /** Показывает модальное окно с информационным сообщением. */
    showInfo(content: React.ReactNode, options?: ShowOptions): Promise<void>;
    /** Показывает модальное окно с предупреждением. */
    showWarning(content: React.ReactNode, options?: ShowOptions): Promise<void>;
    /** Показывает модальное окно с запросом подтвердить какое-либо действие. */
    showConfirmation(content: React.ReactNode, options?: ShowConfirmationOptions): Promise<void>;
    /** Показывает окно с набором кнопок. */
    showCustom<T>(content: React.ReactNode, buttons: MessageBoxButton<T>[], options?: ShowCustomOptions): Promise<T>;
    /** Вовращает DOM-контейнер для показа специфичных информационных модальных окон. */
    getMessageBoxContainer(): BodyContainerProvider;
}
export declare type $MessageWindow = {
    messageWindow: IMessageWindowService;
};
export declare const $MessageWindow: string | ((model?: $MessageWindow) => IMessageWindowService);
