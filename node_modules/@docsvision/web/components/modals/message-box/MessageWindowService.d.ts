import { BodyContainerProvider } from "@docsvision/web/components/modals/body-container-provider";
import { IMessageWindowService, MessageBoxButton, ShowConfirmationOptions, ShowCustomOptions, ShowOptions } from "@docsvision/web/components/modals/message-box/$MessageWindow";
import { MessageWindowType } from "@docsvision/web/components/modals/message-box/MessageWindowType";
import React from "react";
import './MessageWindow.css';
/**
 * Предоставляет статические методы для отображения простых модальных окон.
 * Ресурсы, которые должны быть переданы вызывающей стороной
 * @param Dialog_Confirm Текст подтверждения
 * @param Dialog_Ok Текст кнопки Ок
 * @param Dialog_Cancel Текст кнопки Отмена
 * @param Dialog_Error Текст заголовка сообщения об ошибке
 * @param Dialog_Warning Текст заголовка сообщения с предупреждением
 * @param Dialog_Information Текст заголовка сообщения с информацией
 */
export declare class MessageWindowService implements IMessageWindowService {
    private static mMessageBoxContainerProvider;
    static lastError?: HTMLElement;
    private services;
    constructor(services: any);
    getMessageBoxContainer(): BodyContainerProvider;
    /**
     * Показывает модальное окно с сообщением об ошибке.
     *
     * @param content Текст сообщения обо ошибке
     * @param customCaptionText Заголовок диалога
     * @returns Promise объект, который перейдет в состояние "resolved" после закрытия диалога.
     */
    showError(content: React.ReactNode, options?: ShowOptions): Promise<any>;
    /**
     * Показывает модальное окно с информационным сообщением.
     *
     * @param content Текст сообщения
     * @param customCaptionText Заголовок диалога
     * @returns Promise объект, который перейдет в состояние "resolved" после закрытия диалога.
     */
    showInfo(content: React.ReactNode, options?: ShowOptions): Promise<any>;
    /**
     * Показывает модальное окно с предупреждением.
     *
     * @param content Текст предупреждения
     * @param customCaptionText Заголовок диалога
     * @returns Promise объект, который перейдет в состояние "resolved" после закрытия диалога.
     */
    showWarning(content: React.ReactNode, options?: ShowOptions): Promise<any>;
    /**
     * Показывает модальное окно с запросом подтвердить какое-либо действие.
     *
     * @param content Текст запроса
     * @param customCaptionText Заголовок диалога
     * @returns Promise объект, который перейдет в состояние "resolved" при согласии, и "rejected" при отказе.
     */
    showConfirmation(content: React.ReactNode, options?: ShowConfirmationOptions): Promise<any>;
    showCustom<T>(content: React.ReactNode, buttons: MessageBoxButton<T>[], options?: ShowCustomOptions): Promise<T>;
    show(content: React.ReactNode, msgType: MessageWindowType, options?: ShowOptions): Promise<any>;
}
